<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hello world</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kflu.github.io/"/>
  <updated>2024-06-20T04:41:55.680Z</updated>
  <id>http://kflu.github.io/</id>
  
  <author>
    <name>KL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to scan large size pages to PDf using GIMP</title>
    <link href="http://kflu.github.io/2022/07/21/2022-07-21-scan-large-book-pages-crop-pdf/"/>
    <id>http://kflu.github.io/2022/07/21/2022-07-21-scan-large-book-pages-crop-pdf/</id>
    <published>2022-07-21T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.680Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3&gt;Step 1: How to scan larger-than-letter/A4 sized pages from a book?&lt;/h3&gt;
&lt;p&gt;For scanning, don&#39;t need to perfectly align to a page size using the scanner.
Use the scanbed, put the page in the &lt;strong&gt;middle&lt;/strong&gt; - we&#39;ll crop later. Scan all
the pages using this method. Scan to JPG files.&lt;/p&gt;
&lt;h3&gt;Step 2: How to crop them efficiently?&lt;/h3&gt;
&lt;p&gt;NOTE:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if you need to rotate each page, I found it easier to rotate each page first before cropping all at once. See &amp;quot;How to rotate&amp;quot;&lt;/li&gt;
&lt;li&gt;before doing any transformation, scale the image if they&#39;re too big in pixels (e.g., from 7000 -&amp;gt; 3000). And adjust the ppi to 72 ~ 200. This will bring down the exported PDF file size, and make later rotation faster.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In GIMP, drag the first page in, manually select the desired page region, then &lt;strong&gt;right click -&amp;gt; image -&amp;gt; crop to selection&lt;/strong&gt;. This will crop the canvas to the desired page size.&lt;/p&gt;
&lt;p&gt;Drap the 2nd page in. Note that it&#39;s on the 2nd layer. Notice that only a &amp;quot;window&amp;quot; (of selection size) of the 2nd image is shown. Use the &lt;strong&gt;drag tool&lt;/strong&gt; to move the desired portion of this image into the &amp;quot;window&amp;quot;.&lt;/p&gt;
&lt;p&gt;Repeat the above process for the rest of the pages. Now you should have each page in their own layers.&lt;/p&gt;
&lt;h4&gt;&amp;gt;&amp;gt;&amp;gt; NEW WORKFLOW: Rotate and Crop Layers Using Guidelines &amp;lt;&amp;lt;&amp;lt;&lt;/h4&gt;
&lt;p&gt;Creating guide lines helps rotation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use select tool, from top-left to bottom-right corners.&lt;/li&gt;
&lt;li&gt;Image -&amp;gt; New Guidelines from selection. NOTE - cancel selection now by clicking anywhere on the canvas (1). Otherwise later rotation only applies to the selection region.&lt;/li&gt;
&lt;li&gt;Now use the guidelines to&lt;/li&gt;
&lt;li&gt;rotate each page: Shift-R (or &amp;quot;Tools -&amp;gt; Rotate&amp;quot;) for layer rotation (not whole image). Drag to rotate. Shift-Drag to rotate at certain degrees.&lt;/li&gt;
&lt;li&gt;move each page to the guideline&lt;/li&gt;
&lt;li&gt;Finally, selection on the guide line region, then image -&amp;gt; crop to selection. This will crop all layers all at once.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Step 3: How to compile them into PDF?&lt;/h3&gt;
&lt;p&gt;GIMP 2.10 supports exporting layers as pages to a single PDF file. Export -&amp;gt; set file name to some_thing.pdf -&amp;gt; press export. A dialog pops up about PDF exporting, choose &amp;quot;layers as pages&amp;quot; (it lets you specify the
        
      
    
    </summary>
    
    
      <category term="media" scheme="http://kflu.github.io/tags/media/"/>
    
  </entry>
  
  <entry>
    <title>Exposing GIT repository via SSH and HTTP</title>
    <link href="http://kflu.github.io/2022/04/25/2022-04-25-git-http/"/>
    <id>http://kflu.github.io/2022/04/25/2022-04-25-git-http/</id>
    <published>2022-04-25T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.680Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;You don&#39;t need a git hosting service to manage and share your git repo. All you
need is a server which is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;accessible via SSH (to yourself, not others), for pushing changes, and&lt;/li&gt;
&lt;li&gt;has a public accessible HTTP server (for others to clone)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Firstly, on the remote server, let&#39;s prepare a &lt;em&gt;bare&lt;/em&gt; repo:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir repo.git; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; repo.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git init --bare&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Also, move &lt;code&gt;repo.git&lt;/code&gt; directory to a place under HTTP server directory. I put it under &lt;code&gt;~/html/git/&lt;/code&gt; so there can host multiple git repos.&lt;/p&gt;
&lt;p&gt;Now, with SSH, you should be able to push changes via SSH already:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# In your git repo:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ~USER is standard UNIX way to expand into USER&#39;s home directory&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;URL=ssh://USER@SERVER/~USER/path/to/repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git remote &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;-url origin &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$URL&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now, exposing the repo to HTTP mostly following &lt;a href=&quot;https://mirrors.edge.kernel.org/pub/software/scm/git/docs/user-manual.html#setting-up-a-public-repository&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this guide&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# in the bare repo:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git update-server-info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv hooks/post-update.sample hooks/post-update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the hook calls update-server-info, so everytime there&#39;s a push, the server info is updated (needed to serve the repo via HTTP).&lt;/li&gt;
&lt;li&gt;the default hook script seems to have a bug in it:&lt;/li&gt;
&lt;/ol&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;exec git-update-server-info&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;On my system &lt;code&gt;git-update-server-info&lt;/code&gt; does not exit. So I&#39;ve to change it to&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;exec git update-server-info&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;I host the repo on a public unix system, so I have &lt;code&gt;umask 077&lt;/code&gt;. So, in order for the updated git repo to be always exposed to public (HTTP), I need to &lt;code&gt;chmod&lt;/code&gt; all subdir/files to &lt;code&gt;go+rX&lt;/code&gt;. So I also do this in the post-update hook:&lt;/li&gt;
&lt;/ol&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# hooks/post-update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exec git update-server-info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Note that the hooks of a bare repo is always run with PWD set to the repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# root, but just to be safe, let&amp;apos;s make sure it looks like a git repo:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if test -f HEAD; then&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  echo &amp;quot;updating repo permission...&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  chmod -R go+rX .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;exec must be in a sub-shell, otherwise commands following it won&#39;t run
echo &amp;quot;Updating server info...&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;the hook is run in a bare repo&#39;s root dir (&lt;a href=&quot;https://stackoverflow.com/a/9229463/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When you push remotely, the output of the hooks are shown in the &lt;code&gt;git push&lt;/code&gt; output.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After these steps, you can pull it from HTTP:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Pull it from HTTP&lt;/li&gt;
&lt;/ol&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git pull http://$SERVER_URL/path/to/repo_dir repo.http&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Test that repo changes and file permissions are are indeed updated via the hooks:&lt;/li&gt;
&lt;/ol&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Make some change to the repo and push via SSH&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push ssh://USER@SERVER/~USER/path/to/repo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Then pull via HTTP again&lt;/p&gt;
  &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# in repo.http/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Make sure you see the
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="git" scheme="http://kflu.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>PDB, Exceptions, Tracebacks</title>
    <link href="http://kflu.github.io/2022/04/18/2022-04-18-pdb-exceptions-traceback/"/>
    <id>http://kflu.github.io/2022/04/18/2022-04-18-pdb-exceptions-traceback/</id>
    <published>2022-04-18T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.680Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;code&gt;sys.exc_info()&lt;/code&gt; - the exception info that&#39;s been currently handled. Note that the exception could contain inner exceptions via &lt;code&gt;__context__&lt;/code&gt;, or &lt;code&gt;__cause__&lt;/code&gt;. And this could be nested for multiple levels.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pdb.post_mortem(traceback)&lt;/code&gt; - once found the exception you want to post-mortem debug, use:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pdb.post_mortem(exception.__traceback__)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;About exception chaining (both implicit and explicit), see &lt;a href=&quot;https://peps.python.org/pep-3134/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PEP-3134&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Explicit chaining is via:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; SomeErr(...) &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#                  ~~~~~~ this!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In above case, the &lt;code&gt;SomeErr&lt;/code&gt; instance contains &lt;code&gt;__cause__&lt;/code&gt; which is &lt;code&gt;e&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Implicit chaining:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;except&lt;/span&gt; Exception &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; e:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;raise&lt;/span&gt; SomeErr(...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# ~~~~~~~~ implicit chaining (by interpreter)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In implicit chaining, interpreter &lt;em&gt;automatically&lt;/em&gt; sets &lt;code&gt;__context__&lt;/code&gt; on the new exception instance &lt;code&gt;SomeErr&lt;/code&gt;. TBH, I feel the differentiation of implicit and explicit chaining via &lt;code&gt;__cause__&lt;/code&gt; and &lt;code&gt;__context__&lt;/code&gt; is unnecessary. And it causes extra complexity to handle them.&lt;/p&gt;
&lt;p&gt;PDB&#39;s handling of inner exceptions&lt;/p&gt;
&lt;p&gt;...there is none. PDB&#39;s post mortem &lt;code&gt;pdb.pm()&lt;/code&gt; doesn&#39;t debug the inner-most exception of &lt;code&gt;sys.last_value&lt;/code&gt;. In fact, &lt;code&gt;sys.last_value&lt;/code&gt; isn&#39;t always present. So &lt;code&gt;pm()&lt;/code&gt; is not a reliable way of post-mortem debugging.&lt;/p&gt;
&lt;p&gt;To debug the inner-most exception:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys, pdb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;debug_inner&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&#39;Debug the inner-most exception&#39;s traceback&#39;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    exc = sys.exc_info()[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; getattr(exc, &lt;span class=&quot;string&quot;&gt;&#39;__context__&#39;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;None&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        exc = exc.__context__&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pdb.post_mortem(exc.__traceback__)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I created a &lt;code&gt;.pdbrc&lt;/code&gt; alias for this:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_LOCAL = dict()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_DEF = &amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_DEF += &amp;quot;&#92;ndef debug_inner():&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_DEF += &amp;quot;&#92;n    &amp;apos;&amp;apos;&amp;apos;Debug the inner-most exception&amp;apos;s traceback&amp;apos;&amp;apos;&amp;apos;&amp;quot; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_DEF += &amp;quot;&#92;n    exc = __import__(&amp;apos;sys&amp;apos;).exc_info()[1]&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_DEF += &amp;quot;&#92;n    while getattr(exc, &amp;apos;__context__&amp;apos;, None):&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_DEF += &amp;quot;&#92;n        exc = exc.__context__&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_DEF += &amp;quot;&#92;n    __import__(&amp;apos;pdb&amp;apos;).post_mortem(exc.__traceback__)&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;exec(_DEF, dict(), _LOCAL)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias di
        
      
    
    </summary>
    
    
      <category term="python" scheme="http://kflu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>OSC52 hack</title>
    <link href="http://kflu.github.io/2022/01/06/2022-01-06-osc-52-hack/"/>
    <id>http://kflu.github.io/2022/01/06/2022-01-06-osc-52-hack/</id>
    <published>2022-01-06T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.680Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;OSC52 is a terminal control sequence that allows remote side to set the system
clipboard of the local side. This is the best way to get clipboard support when
working with remote ssh sessions.&lt;/p&gt;
&lt;p&gt;However, here&#39;re a couple of limitations to consider:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Your terminal app needs to support OSC52. MacOS terminal.app doesn&#39;t support it. iterm2 does. xterm actually supports it, just require some additional setting.&lt;/li&gt;
&lt;li&gt;Mosh does not support OSC52. Native ssh supports it. Eternal Terminal (et) does support it.&lt;/li&gt;
&lt;li&gt;tmux supports passing copied text via OSC52, see tmux man, &lt;code&gt;set-clipboard&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In Vim, &lt;code&gt;ojroques/vim-oscyank&lt;/code&gt; is a plugin to support yanking text via OSC52&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With above consideration, so far the best combination that works for me has been using iterm2 + et.&lt;/p&gt;
&lt;p&gt;Today it comes to my attension this little utility &lt;a href=&quot;https://github.com/roy2220/osc52pty&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;osc52pty&lt;/a&gt;, which adds OSC52 support for any terminal application (e.g., a shell). It basically removes the terminal app limitation from above consideration. I.e., with&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Do this in terminal.app:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;osc52pty zsh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh foo@bar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For any terminal app, it detects osc52 bytes and pipes content to pbcopy. However this seems to only work with native ssh client. Neither et nor mosh
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>MacVim as System Vim</title>
    <link href="http://kflu.github.io/2022/01/03/2022-01-03-macvim-as-system-vim/"/>
    <id>http://kflu.github.io/2022/01/03/2022-01-03-macvim-as-system-vim/</id>
    <published>2022-01-03T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.680Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I made a &lt;a href=&quot;https://superuser.com/a/1697239/114255&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;post&lt;/a&gt; here on how to use macvim installation as the default vim commands (vim, vimdiff, view, etc.)&lt;/p&gt;
&lt;p&gt;In short do:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl https://gist.githubusercontent.com/kflu/c492dfcba2a32965918f920b046f8d19/raw/aa6da495ee8579afd0ec8235911b10d31ec5555f/mvim_as_sys | sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo &amp;quot;== Don&amp;apos;t forget to add ~/.local/bin to PATH&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The script is &lt;a href=&quot;https://gist.github.com/kflu/c492dfcba2a32965918f920b046f8d19&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="vim" scheme="http://kflu.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Useful Tmux Settings</title>
    <link href="http://kflu.github.io/2021/10/26/2021-10-26-tmux-pass-selected-text-to-command/"/>
    <id>http://kflu.github.io/2021/10/26/2021-10-26-tmux-pass-selected-text-to-command/</id>
    <published>2021-10-26T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.680Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;Pass selected text to system commands in Tmux&lt;/h1&gt;
&lt;p&gt;What I want to achieve is similar to Vim&#39;s &lt;code&gt;:&#39;&amp;lt;,&#39;&amp;gt;!some_command&lt;/code&gt;. In other words, in Tmux, once some text is selected, I want to press a key that triggers a prompt for me to enter a system command. Then the text will be piped to the command as stdin. The stdout of the command will be displayed in a temporary tmux buffer.&lt;/p&gt;
&lt;p&gt;I have answered it &lt;a href=&quot;https://unix.stackexchange.com/a/674820/38968&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt; but it&#39;s kind of hard to find, so I&#39;ll document it here:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bind-key -T copy-mode   !  command-prompt -p &amp;quot;cmd:&amp;quot; &amp;quot;send-keys -X copy-selection-no-clear &#92;; run-shell &#92;&amp;quot;tmux show-buffer | %1&#92;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bind-key -T copy-mode-vi   !  command-prompt -p &amp;quot;cmd:&amp;quot; &amp;quot;send-keys -X copy-selection-no-clear &#92;; run-shell &#92;&amp;quot;tmux show-buffer | %1&#92;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Several notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-T copy-mode-vi&lt;/code&gt; is essential if you use tmux&#39;s vi mode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;command-prompt&lt;/code&gt; prompts for some user input and run the template as tmux command - it is the core part that makes this run &lt;strong&gt;arbitrary&lt;/strong&gt; user specified commands.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux show-buffer&lt;/code&gt; is for dumping previosly selected text to stdout&lt;/li&gt;
&lt;li&gt;I could have used &lt;code&gt;pipe-selection&lt;/code&gt; which pipes selection to arbitrary command, however, this does not display the command stdout back to tmux. On the contrary, &lt;code&gt;run-shell&lt;/code&gt; does this.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;KEY BINDING FOR SWAPPING PANES&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bind-key -T prefix  C-s display-panes &#92;; command-prompt -p &amp;quot;&amp;lt;pane1&amp;gt;:,&amp;lt;pane2&amp;gt;:&amp;quot; &amp;quot;swap-pane -s %1 -t %2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Press &lt;code&gt;C-b C-s&lt;/code&gt; (can hold ctrl) will:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, display the pane numbers as if you pressed &lt;code&gt;&amp;lt;prefix&amp;gt;q&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Prompt for 1st pane to swap&lt;/li&gt;
&lt;li&gt;Prompt for 2nd pane to swap&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-p &amp;quot;&amp;lt;pane1&amp;gt;:,&amp;lt;pane2&amp;gt;:&amp;quot;&lt;/code&gt; the comma seperates two prompts to the user
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="tmux" scheme="http://kflu.github.io/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>pkgsrc survival guide</title>
    <link href="http://kflu.github.io/2021/07/19/2021-07-19-pkgsrc-survival-guide/"/>
    <id>http://kflu.github.io/2021/07/19/2021-07-19-pkgsrc-survival-guide/</id>
    <published>2021-07-19T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.680Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;pkgsrc is NetBSD&#39;s ports system. But it&#39;s also cross-platform, available on Mac and Linux. It also support unprivileged use. This is a quick reference for it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.netbsd.org/docs/pkgsrc/pkgsrc.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The document is awesome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;First let&#39;s make a few decisions about the installation locations:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Location of the pkgsrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PKGSRC_DIR=     /data/user/&amp;lt;u&amp;gt;/pkgsrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Location of the built package installation site&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PKG_DIR=        /data/user/&amp;lt;u&amp;gt;/pkg&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1&gt;BOOTSTRAPPING&lt;/h1&gt;
&lt;p&gt;First download pkgsrc - it&#39;s a collection of configurations instructing how to download and build different packages.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://ftp.netbsd.org/pub/pkgsrc/stable/pkgsrc.tar.gz &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar xf pkgsrc.tar.gz -C $PKGSRC_DIR&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;pkgsrc needs to be bootstrapped on the target machine where packages are to be built. The bootstrapping process builds the necessary tools pkgsrc will be using later on. We will focus on &lt;em&gt;unprivileged&lt;/em&gt; use, since that&#39;s more fun and less covered by documents everywhere else:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cd $PKGSRC_DIR/bootstrap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./bootstrap --help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./bootstrap --unprivileged --prefix $PKGSRC_DIR --make-jobs &amp;lt;num_cpus&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Finally we need to export &lt;code&gt;PATH&lt;/code&gt; and &lt;code&gt;MANPATH&lt;/code&gt; to include &lt;code&gt;$PKG_DIR&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;PARALLEL BUILD&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MAKE_JOBS=&amp;lt;num_cpus&amp;gt; bmake&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1&gt;USEFUL TARGETS, GETTING HELP&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;bmake help&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bmake help topic=:index  # prints all helps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bmake help topic=&amp;lt;target|option&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bmake show-all&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bmake show-depends       # seems only incl. direct deps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bmake show-depends-dirs  # include transient deps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bmake show-var VARNAME=SOME_VAR_NAME&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;See &lt;a href=&quot;https://wiki.netbsd.org/pkgsrc/targets/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pkgsrc targets&lt;/a&gt;
The following targets may be useful to invoke from keyboard:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;depends&lt;/code&gt; to build and install dependencies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fetch&lt;/code&gt; to fetch distribution file(s)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checksum&lt;/code&gt; to fetch and check distribution file(s)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extract&lt;/code&gt; to look at unmodified source&lt;/li&gt;
&lt;li&gt;&lt;code&gt;patch&lt;/code&gt; to look at initial source&lt;/li&gt;
&lt;li&gt;&lt;code&gt;configure&lt;/code&gt; to stop after configure stage&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt; or build to stop after build stage&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stage&lt;/code&gt;-install to install under stage directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt; to run package&#39;s self-tests, if any exist and supported&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package&lt;/code&gt; to create binary package before installing it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace&lt;/code&gt; to change (upgrade, downgrade, or just replace) installed package in-place&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deinstall&lt;/code&gt; to deinstall previous package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package&lt;/code&gt;-install to install package and build binary package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;install&lt;/code&gt; to install package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin-install&lt;/code&gt; to attempt to skip building from source and use pre-built binary package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show-depends&lt;/code&gt; print dependencies for building&lt;/li&gt;
&lt;li&gt;&lt;code&gt;show-options&lt;/code&gt; print available options from options.mk&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cleanup targets (in separate section because of importance):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clean&lt;/code&gt;-depends to remove work directories for dependencies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clean&lt;/code&gt; to remove work directory&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distclean&lt;/code&gt; to remove distribution file(s)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package-clean&lt;/code&gt; to remove binary package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following targets are useful in development and thus may be useful for an advanced user:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;makesum&lt;/code&gt; to fetch and generate checksum for distributed file(s)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;makepatchsum&lt;/code&gt; to (re)generate checksum for patches&lt;/li&gt;
&lt;li&gt;&lt;code&gt;makedistinfo&lt;/code&gt; to (re)generate distinfo file (creating checksums for distributed file and patches)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mps&lt;/code&gt; short for makepatchsum&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mdi&lt;/code&gt; short for makedistinfo&lt;/li&gt;
&lt;li&gt;&lt;code&gt;print-PLIST&lt;/code&gt; to attempt to generate correct packaging list (NB! It helps, but it doesn&#39;t eliminate manual work.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;USEFUL PKG TOOLS&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(cd pkgtools &amp;amp;&amp;amp; bmake install)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;man pkg_info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pkg_info -L &amp;lt;pkg_name&amp;gt;  # list package contents&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1&gt;DISTFILES, FETCHING ETC&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# generate sh script which downloads distfiles when run&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bmake fetch-list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bmake checksum          # fetch distfile and do checksum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bmake depends-checksum  # also for deps&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1&gt;BUILD OPTIONS&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;$PKG_DIR/etc/mk.conf&lt;/code&gt; is where to set build options. For specific package, add line:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;PKG_OPTIONS.&amp;lt;pkg_name&amp;gt;+=       &amp;lt;option&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;bmake show-all&lt;/code&gt; is helpful in discovering available build options, and what are enabled/disabled.&lt;/p&gt;
&lt;h1&gt;USEFUL ENVIRONMENT VARS&lt;/h1&gt;
&lt;p&gt;These can be specified in &lt;code&gt;mk.conf&lt;/code&gt;, or on each build instance:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;DISTDIR=... bmake&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DISTDIR&lt;/code&gt;: directory where to look for distfiles&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FETCH_USING&lt;/code&gt;: the program for fetching (can set to wget)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;TROUBLESHOOTING&lt;/h1&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Prints detailed build command&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PKG_DEBUG_LEVEL=1 bmake&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1&gt;BUILD PHASES&lt;/h1&gt;
&lt;p&gt;https://www.netbsd.org/docs/pkgsrc/build.html&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The fetch phase&lt;/li&gt;
&lt;li&gt;The checksum phase&lt;/li&gt;
&lt;li&gt;The extract phase&lt;/li&gt;
&lt;li&gt;The patch phase&lt;/li&gt;
&lt;li&gt;The tools phase&lt;/li&gt;
&lt;li&gt;The wrapper phase&lt;/li&gt;
&lt;li&gt;The configure phase&lt;/li&gt;
&lt;li&gt;The build phase&lt;/li&gt;
&lt;li&gt;The test phase&lt;/li&gt;
&lt;li&gt;The install phase&lt;/li&gt;
&lt;li&gt;The package phase&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Use pkgsrc along side Joyent pkgsrc binary distribution&lt;/h1&gt;
&lt;p&gt;Sat May 28 14:58:51 PDT 2022&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Joyent&#39;s pkgsrc binary distribution (this must be installed at the pre-determined location. E.g., for MacOS, at &lt;code&gt;/opt/pkg&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;At any location, git clone pkgsrc source repo (e.g., clone into &lt;code&gt;~/work/pkgsrc&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;To build from source, just &lt;code&gt;cd ~/work/pkgsrc/net/sshping &amp;amp;&amp;amp; bmake install&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bmake&lt;/code&gt; is from &lt;code&gt;/opt/pkg/bin&lt;/code&gt;. Installed package will also go there.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since this installs to system location, there maybe frequent prompt for root
password. Use this patch can fix it. Note that it assumes you have &lt;code&gt;sudo&lt;/code&gt;
already installed at /usr/bin/sudo. Otherwise, follow the pkgsrc
&lt;a href=&quot;https://www.netbsd.org/docs/pkgsrc/faq.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FAQ&lt;/a&gt; (use pkgsrc to install
&lt;code&gt;sudo&lt;/code&gt; first):&lt;/p&gt;
&lt;figure class=&quot;highlight diff&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>Stereo audio recording setup</title>
    <link href="http://kflu.github.io/2021/06/29/2021-06-29-stereo-audio-recording/"/>
    <id>http://kflu.github.io/2021/06/29/2021-06-29-stereo-audio-recording/</id>
    <published>2021-06-29T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.675Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Need this to record classic grand piano. Setup diagram:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LCT 040 x2 &lt;a href=&quot;https://www.amazon.com/dp/B07MZXKZVG/?coliid=I1XHTOO4CCDH01&amp;amp;colid=3POR139P6KGAA&amp;amp;psc=1&amp;amp;ref_=lv_ov_lig_dp_it&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2i2 gen3 USB audio interface &lt;a href=&quot;https://www.amazon.com/dp/B07QR73T66/?coliid=I2IU6RKAJY88OW&amp;amp;colid=3POR139P6KGAA&amp;amp;psc=1&amp;amp;ref_=lv_ov_lig_dp_it&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;link&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;this is the main magic. it can directly connect to computer and provide 48v phantom power.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Need another mic stand too!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On the Mac side, I can use GarageBand. Because of the audio interface, I shouldn&#39;t need to create aggregated input device.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;IMG_4460.jpg&quot;
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>irc, znc, and erc</title>
    <link href="http://kflu.github.io/2021/06/04/2021-06-04-irc--znc--and-erc/"/>
    <id>http://kflu.github.io/2021/06/04/2021-06-04-irc--znc--and-erc/</id>
    <published>2021-06-04T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.675Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This article discusses ZNC setup and how to connect with Emacs ERC.&lt;/p&gt;
&lt;h3&gt;ZNC admin interface&lt;/h3&gt;
&lt;p&gt;ZNC&#39;s IRC service and web admin service can share the same port, magical, but confusing. I seperated them into two ports, and restricted the web port to be only accessible from LAN.&lt;/p&gt;
&lt;h3&gt;ZNC Setup &amp;amp; Connection&lt;/h3&gt;
&lt;p&gt;ZNC user and password are different than IRC network&#39;s nick and password, which is usually managed by the network&#39;s NickServ.&lt;/p&gt;
&lt;p&gt;A ZNC user can define multiple (network, nick) pairs.&lt;/p&gt;
&lt;p&gt;To connect to ZNC, using any IRC client, use the following &lt;strong&gt;password&lt;/strong&gt; format to authenticate:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;znc_user@client_id/znc_network_name:znc_user_pass&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;@client_id&lt;/code&gt; part can be omitted, if not using &lt;a href=&quot;https://wiki.znc.in/Clientbuffer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;clientbuffer&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;Note for ERC: &lt;code&gt;M-x erc-tls&lt;/code&gt; prompts for nick, DO NOT leave it empty, but put in the network nick, so ERC is not confused and have the buffer window bug (TODO: link).&lt;/p&gt;
&lt;h3&gt;ZNC management inside IRC&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;*status&lt;/code&gt; bot (prefixed by &lt;code&gt;*&lt;/code&gt;, configurable) is ZNC specific. You can &lt;code&gt;/query *status&lt;/code&gt; and &lt;code&gt;help&lt;/code&gt; from there. It provides all the functionalities for managing ZNC.&lt;/p&gt;
&lt;p&gt;The modules all have corresponding bot: &lt;code&gt;*module_name&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Multiple client and clientbuffer&lt;/h3&gt;
&lt;p&gt;This article: &lt;a href=&quot;https://blog.jay2k1.com/2016/02/04/how-to-configure-znc-backlog-for-multiple-clients/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to configure multiple clients against single ZNC network nick&lt;/a&gt; talks about the buffer playback problem and the solution by &lt;strong&gt;using clientbuffer&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note that clientbuffer is a network level module, so you&#39;ll have to enable it per network.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;msg *status loadmod clientbuf autoadd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Also at ZNC user level, don&#39;t forget to &lt;strong&gt;disable&lt;/strong&gt; clear chan/query buffers.&lt;/p&gt;
&lt;h3&gt;ZNC external module building&lt;/h3&gt;
&lt;p&gt;Take clientbuffer as example:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# DO ALL THESE AS USER znc:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git clone https://github.com/CyberShadow/znc-clientbuffer.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# requires znc-buildmod&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# produces clientbuffer.so&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &amp;quot;install&amp;quot; it&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mv clientbuffer.so ~/.znc/modules&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# To load the module, use `loadmod` with *status
        
      
    
    </summary>
    
    
      <category term="irc" scheme="http://kflu.github.io/tags/irc/"/>
    
  </entry>
  
  <entry>
    <title>You don&#39;t need an IRC client to IRC</title>
    <link href="http://kflu.github.io/2021/05/26/2021-05-26-You-don-t-need-IRC-clients-to-IRC/"/>
    <id>http://kflu.github.io/2021/05/26/2021-05-26-You-don-t-need-IRC-clients-to-IRC/</id>
    <published>2021-05-26T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.675Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;The IRC spec is in &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc1459#section-4.6.4&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RFC 1459&lt;/a&gt;. The IRC protocol is suprisingly elegant and simple. For basic operation, there is no need for a dedicated client (although a client makes chatting more enjoyable).&lt;/p&gt;
&lt;p&gt;In general, an IRC message looks like:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;command&amp;gt; [arg] [arg] ... :[arg with spaces]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[:prefix] &amp;lt;command&amp;gt; [arg] [arg] ... :[arg with spaces]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This format is the same for both client -&amp;gt; server, and server&#39;s replies. The prefix is usually the an identity of the message&#39;s originator.&lt;/p&gt;
&lt;h3&gt;Basic Operations&lt;/h3&gt;
&lt;p&gt;To connect:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Connect to the server using TLS: &lt;code&gt;openssl s_client -connect &amp;lt;server&amp;gt;:&amp;lt;port&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set the nick: &lt;code&gt;nick &amp;lt;your_nick&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set username: &lt;code&gt;user &amp;lt;your_nick&amp;gt; . .&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To chat:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Join channel with &lt;code&gt;join &amp;lt;channel_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Chat in channel with &lt;code&gt;privmsg &amp;lt;channel_name&amp;gt; :&amp;lt;msg&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Chat with other user with &lt;code&gt;privmsg &amp;lt;user&amp;gt; :&amp;lt;msg&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;List channel users with &lt;code&gt;lusers &amp;lt;channel&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To authenticate your nick with NickServ, you need to issue the following command to the &lt;em&gt;user&lt;/em&gt; &lt;code&gt;NickServ&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;identify &amp;lt;your nick&#39;s password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To do this, issue the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;privmsg nickserv :identify &amp;lt;nick&#39;s password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;channel_name&lt;/code&gt; starts with &lt;code&gt;#&lt;/code&gt;, while user name doesn&#39;t.&lt;/p&gt;
&lt;h3&gt;An Example Log&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; openssl s_client -connect irc.libera.chat:6697&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat NOTICE * :*** Checking Ident&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat NOTICE * :*** Looking up your hostname...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat NOTICE * :*** Found your hostname: xxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat NOTICE * :*** No Ident response&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nick jsbach&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user jsbach . . .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 001 jsbach :Welcome to the Libera.Chat Internet Relay Chat Network jsbach&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 002 jsbach :Your host is platinum.libera.chat[188.240.145.102/6697], running version solanum-1.0-dev&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 003 jsbach :This server was created Sat May 22 2021 at 19:04:12 UTC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 004 jsbach platinum.libera.chat solanum-1.0-dev &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 005 jsbach SAFELIST ELIST=CTU FNC WHOX CALLERID=g KNOCK MONITOR=100 ETRACE CHANTYPES=# EXCEPTS INVEX CHANMODES=eIbq,k,flj,CFLMPQScgimnprstuz :are supported by this server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 005 jsbach CHANLIMIT=#:250 PREFIX=(ov)@+ MAXLIST=bqeI:100 MODES=4 NETWORK=Libera.Chat STATUSMSG=@+ CASEMAPPING=rfc1459 NICKLEN=16 MAXNICKLEN=16 CHANNELLEN=50 TOPICLEN=390 DEAF=D :are supported by this server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 005 jsbach TARGMAX=NAMES:1,LIST:1,KICK:1,WHOIS:1,PRIVMSG:4,NOTICE:4,ACCEPT:,MONITOR: EXTBAN=$,ajrxz CLIENTVER=3.0 :are supported by this server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 251 jsbach :There are 42 users and 19058 invisible on 19 servers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 252 jsbach 32 :IRC Operators online&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 253 jsbach 3 :unknown connection(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 254 jsbach 15309 :channels formed&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 255 jsbach :I have 1914 clients and 1 servers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 265 jsbach 1914 2025 :Current local users 1914, max 2025&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 266 jsbach 19100 19898 :Current global users 19100, max 19898&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 250 jsbach :Highest connection count: 2026 (2025 clients) (15019 connections received)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 375 jsbach :- platinum.libera.chat Message of the Day -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 372 jsbach :- This server provided by NORDUnet/SUNET&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 372 jsbach :- Welcome to libera.chat, the IRC network for free &amp;amp; open-source software&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 372 jsbach :- and peer directed projects.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 372 jsbach :-&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 372 jsbach :- Please visit us in #libera for questions and support.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 376 jsbach :End of /MOTD command.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:jsbach MODE jsbach :+RZi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;join #test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:jsbach!~jsbach@xxxx JOIN #test&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 353 jsbach = #test :jsbach NightMonkey Daniel071_ python PowaBanga ExEsPi simong maximagui voliborfrey Koragg jstoker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;:platinum.libera.chat 366 jsbach #test :End of /NAMES list.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;privmsg #test
        
      
    
    </summary>
    
    
      <category term="irc" scheme="http://kflu.github.io/tags/irc/"/>
    
  </entry>
  
  <entry>
    <title>tmux tricks</title>
    <link href="http://kflu.github.io/2021/05/24/2021-05-24-tmux-tricks/"/>
    <id>http://kflu.github.io/2021/05/24/2021-05-24-tmux-tricks/</id>
    <published>2021-05-24T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h4&gt;Useful key bindings&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PREFIX-w&lt;/code&gt;: &lt;code&gt;choose-window&lt;/code&gt; - displays windows for user to choose interactively&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PREFIX-:&lt;/code&gt;: activate tmux command line (wtih tab completion)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PREFIX-q&lt;/code&gt;: display window ID for each window&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The choose window is so useful when I&#39;m terminal&#39;ing from iPhone that I assign F10 to it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bind-keys -n F10 choose-window
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;Deal with nested sessions&lt;/h4&gt;
&lt;p&gt;Tmux offers two main benefit - terminal multiplexing, and process persistence. Usually you should avoid nested tmux sessions. But in case inside a tmux session, you ssh to a remote machine and do stuff, you would want a tmux session on the remote as well. First of, I suggest using that inner tmux only for process persistence, not terminal multiplexing, b/c passing tmux prefix keys into that inner one is not convenient.&lt;/p&gt;
&lt;p&gt;Then here&#39;s the magic for the second point - inner tmux (remote) is only for process persistence, meaning, that tmux session only host one process (be it a shell, or vim, etc.). In this case, &lt;strong&gt;you don&#39;t really need&lt;/strong&gt; the inner tmux to have a status bar, nor a prefix key.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To getting rid of the status bar, use &lt;code&gt;set status off&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To disable prefix keys, use &lt;code&gt;set prefix None&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Actually, I have a little shell script for launching this:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;session=&lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;shift&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmux new -A -s &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$session&lt;/span&gt;&quot;&lt;/span&gt; &#92;; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; prefix None &#92;; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; status off&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note that after disabling prefix key, you won&#39;t be able to manipulate that tmux session from inside it. Well most likely you don&#39;t need to, because it&#39;s single process, and you have a outer tmux. But just for entertaining purpose, you can control it from shell, inside that session:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tmux detach&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# or more generally, run any tmux command:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tmux
        
      
    
    </summary>
    
    
      <category term="tmux" scheme="http://kflu.github.io/tags/tmux/"/>
    
  </entry>
  
  <entry>
    <title>emailing with gnus - imap, smtp, gmail, etc</title>
    <link href="http://kflu.github.io/2021/05/18/2021-05-18-gnus--imap--gmail--etc/"/>
    <id>http://kflu.github.io/2021/05/18/2021-05-18-gnus--imap--gmail--etc/</id>
    <published>2021-05-18T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;You don&#39;t need any configuration to use Gnus. Just &lt;code&gt;emacs -f gnus&lt;/code&gt; then type &lt;code&gt;B&lt;/code&gt;, you&#39;ll be prompted to enter all the information ephemerally:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;use &lt;code&gt;nnimap&lt;/code&gt; as &amp;quot;methd&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;imap.gmail.com&lt;/code&gt; as server (Gmail needs to be prepared to enable IMAP though)&lt;/li&gt;
&lt;li&gt;type username and password&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Gnus Basic Concepts&lt;/h2&gt;
&lt;p&gt;Gnus support newsgroup (NNTP), email (IMAP/POP), sending mail (IMAP). These are called &amp;quot;&lt;strong&gt;servers&lt;/strong&gt;&amp;quot;. Each server has many &lt;strong&gt;groups&lt;/strong&gt;. For email servers, groups are just mail folders.&lt;/p&gt;
&lt;h3&gt;Groups Buffer&lt;/h3&gt;
&lt;p&gt;When Gnus starts up, you see the list of groups that you subscribed (which will be empty). This is called the &lt;strong&gt;group buffer&lt;/strong&gt;. In group buffer, you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Press &lt;code&gt;^&lt;/code&gt; for the servers list, where you can enter each server and subscribe their groups (pressing &lt;code&gt;u&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;Subscribe means if there&#39;re new items then they&#39;ll show in group buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;g&lt;/code&gt; to manually fetch&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;m&lt;/code&gt; for composing new message
&lt;ul&gt;
&lt;li&gt;This is different from &lt;code&gt;c-x m&lt;/code&gt; sending mail, which has nothing to do with Gnus. The difference is Gnus can &amp;quot;gcc&amp;quot; the sent item into a specified Sent (archive) folder.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Summary Buffer&lt;/h3&gt;
&lt;p&gt;Entering each subscribed group, you&#39;ll see the articles, or posts, or messages. This is called the &lt;strong&gt;summary buffer&lt;/strong&gt;. Here most commands are prefixed with &lt;code&gt;B&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;B &amp;lt;DEL&amp;gt;&lt;/code&gt; to purge&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; to mark as read (Gnus has many type of read marks but they don&#39;t matter for beginners)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Draft Buffer&lt;/h3&gt;
&lt;p&gt;In the draft buffer,  press &lt;code&gt;e&lt;/code&gt; to edit (entering composing buffer)&lt;/p&gt;
&lt;h3&gt;Composing Buffer&lt;/h3&gt;
&lt;p&gt;This is where new messages (&lt;code&gt;m&lt;/code&gt;) or drafts (&lt;code&gt;e&lt;/code&gt;) are edited. In this view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c-c c-c&lt;/code&gt; to send
&lt;ul&gt;
&lt;li&gt;If not configured, &lt;code&gt;smtpmail&lt;/code&gt; prompts you on how to send - this is not part of Gnus&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c-x k&lt;/code&gt; to drop message&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c-x c-s&lt;/code&gt; to save message&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c-c y&lt;/code&gt; to yank original message when replying&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Setting up Gmail IMAP with GNUS&lt;/h2&gt;
&lt;p&gt;Gmail makes it really hard to use IMAP:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Turn on IMAP access in gmail settings&lt;/li&gt;
&lt;li&gt;Turn on &amp;quot;Less secure app access&amp;quot; - (&lt;em&gt;NOTE&lt;/em&gt; DO NOT do this by switching account if your gmail is multi-accounts and it&#39;s not your primary - it will turn on &amp;quot;less secure&amp;quot; for the main account. Do this in incognito mode.)&lt;/li&gt;
&lt;li&gt;Now in GNUS (or any other client), use &lt;code&gt;imap.gmail.com&lt;/code&gt; as server, and &lt;strong&gt;full&lt;/strong&gt; gmail address as user name, regular password as password.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Setting up SDF SMTP&lt;/h2&gt;
&lt;p&gt;SDF SMTP&#39;s CRAM-MD5 auth is broken, even though it advertises that it&#39;s supported, it always fail client authentication when this method is used. This breaks Emacs smtpmail - which although supports other auth methods (plain, login), are not attempted when cram-md5 fails (which seems to be a &lt;a href=&quot;https://lists.gnu.org/archive/html/bug-gnu-emacs/2021-05/msg01669.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;bug&lt;/a&gt;). So to work around, I had to manually disable cram-md5 when SDF SMTP is used:&lt;/p&gt;
&lt;figure class=&quot;highlight lisp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;setq&lt;/span&gt; smtpmail-smtp-server &lt;span class=&quot;string&quot;&gt;&quot;mx.sdf.org&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;setq&lt;/span&gt; smtpmail-smtp-service &lt;span class=&quot;number&quot;&gt;587&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;setq&lt;/span&gt; mtpmail-stream-type &#39;starttls)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;; SDF cram-md5 fails and emacs doesn&#39;t know to try the rest,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;; so, forcefully set the auth method:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;setq&lt;/span&gt; smtpmail-auth-supported &#39;(plain))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gnu.org/software/emacs/manual/html_mono/smtpmail.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SMTPMail doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gnus.org/manual/gnus_toc.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gnus doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A practical guide to
        
      
    
    </summary>
    
    
      <category term="emacs" scheme="http://kflu.github.io/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>Pelican Site Generator Setup Notes</title>
    <link href="http://kflu.github.io/2021/05/07/2021-05-07-pelican-notes/"/>
    <id>http://kflu.github.io/2021/05/07/2021-05-07-pelican-notes/</id>
    <published>2021-05-07T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Pelican is a popular static site generator written in Python. I find it has a better design and provide saner tooling than Hexo. So maybe I&#39;ll switch at some point.&lt;/p&gt;
&lt;h2&gt;HTML directory setup&lt;/h2&gt;
&lt;p&gt;the ultimate publish dir will be ~/public_html. But for containing the source, create ~/public_html.src, and will use ~/public_html.src/output/ to hold the generated site. So, eventually,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ln -s ~/public_html.src/output ~/public_html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;will do.&lt;/p&gt;
&lt;p&gt;NOTE: make sure all dirs on ~/public_html.src/output have &lt;code&gt;go+x&lt;/code&gt; set.&lt;/p&gt;
&lt;h2&gt;Pelican setup&lt;/h2&gt;
&lt;p&gt;Pelican can be installed in isolated way using venv. From inside ~/public_html.src/:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 -m venv .ve

# no need to activate the venv:
.ve/bin/python3 -m pip install &#39;pelican[markdown]&#39;

# initialize the site
.ve/bin/pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now a Makefile is created to use &lt;code&gt;pelican&lt;/code&gt; for various tasks. However, &lt;code&gt;make&lt;/code&gt; for this Makefile requires venv activation. So we create a make wrapper to avoid the ve activation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat &amp;gt;./make
#!/bin/sh

cd &amp;quot;$( dirname &amp;quot;$0&amp;quot; )&amp;quot;
PATH=./.ve/bin:&amp;quot;$PATH&amp;quot; make &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From now on, all site related tasks can be done via:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./make clean publish
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Pelican config&lt;/h2&gt;
&lt;p&gt;Configs are in &lt;code&gt;pelicanconf.py&lt;/code&gt; and &lt;code&gt;publishconf.py&lt;/code&gt;. Note that variables can be defined in both, so make sure you only set a varaible at one of them. I recommend setting everything in &lt;code&gt;pelicanconf.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Notable config variables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MENUITEMS&lt;/code&gt;: defines the &amp;quot;links&amp;quot; displayed in the site&#39;s menu bar.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Pelican themes setup&lt;/h2&gt;
&lt;p&gt;All themes are in https://github.com/getpelican/pelican-themes.&lt;/p&gt;
&lt;p&gt;The most basic way to use one is (in ~/public_html.src):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone https://github.com/getpelican/pelican-themes.git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then set the &lt;code&gt;THEME&lt;/code&gt; variable (which takes relative path):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;THEME = &#39;pelican-themes/&amp;lt;some_theme&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Deep customization&lt;/h3&gt;
&lt;p&gt;Sometimes you need to edit the theme template directly, for example, I want to remove the footer of the &amp;quot;simple&amp;quot; theme, and there&#39;s no way to do so with configuration.&lt;/p&gt;
&lt;p&gt;For deep customization, we also want to version control the theme files, so it&#39;s not desirable to clone &lt;code&gt;getpelican/pelican-themes&lt;/code&gt;.  Instead, create a &lt;code&gt;themes&lt;/code&gt; folder with only the ones you need and customize inside:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir themes

# assume you cloned pelican-themes *outside* of the site repo:
cp -r ~/Downloads/pelican-themes/basic themes/basic
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then make edits to &lt;code&gt;themes/basic&lt;/code&gt; and set &lt;code&gt;THEME = &#39;themes/basic&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Customizing theme template which is inherited&lt;/h3&gt;
&lt;p&gt;If the template you want to edit is &lt;code&gt;extended&lt;/code&gt;, e.g., &lt;code&gt;basic/templates/base.html&lt;/code&gt; has:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% extends &quot;!simple/base.html&quot; %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What if it is the &lt;code&gt;simple&lt;/code&gt; theme you want to edit? We can make a copy (see note 1) of the simple theme into &lt;code&gt;themes/simple2&lt;/code&gt;, and have &lt;code&gt;basic&lt;/code&gt; points to it. To do so, we need to set variable:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;THEME_TEMPLATES_OVERRIDES = [ &#39;themes&#39; ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then change &lt;code&gt;basic&lt;/code&gt; theme&#39;s &lt;code&gt;extends&lt;/code&gt; directive to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{% extends &quot;simple2/templates/base.html&quot; %}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note 1: where do we copy the &lt;code&gt;simple&lt;/code&gt; theme, since it comes with &lt;code&gt;pelican&lt;/code&gt; itself? You can list all installed themes&#39; locations with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.ve/bin/pelican-themes
        
      
    
    </summary>
    
    
      <category term="markdown" scheme="http://kflu.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Markdown Editors Survey</title>
    <link href="http://kflu.github.io/2021/05/02/2021-05-02-markdown-editors/"/>
    <id>http://kflu.github.io/2021/05/02/2021-05-02-markdown-editors/</id>
    <published>2021-05-02T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Recently my interest in using Markdown documents as personal notes have re-emerged.&lt;/p&gt;
&lt;h2&gt;Typora&lt;/h2&gt;
&lt;p&gt;This looks like a really good markdown editor. Desirable features include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cross-platform and free&lt;/li&gt;
&lt;li&gt;Paste images from clipboard
&lt;ul&gt;
&lt;li&gt;There&#39;s an option to save image to current folder&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cmd-K to insert link&lt;/li&gt;
&lt;li&gt;Follow links with cmd-click&lt;/li&gt;
&lt;li&gt;Able to follow local links (important for wiki like personal notes)&lt;/li&gt;
&lt;li&gt;Outline mode&lt;/li&gt;
&lt;li&gt;Always-on-Top (useful for note-taking)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://support.typora.io/Use-Typora-From-Shell-or-cmd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Launch Typora from command line&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Mac: &lt;code&gt;open -a typora &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This feels like a quality build software. I predict it will become wildly more popular.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note - launch typora from command line&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;gt;&lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/.&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/typora &amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;EOF&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/Applications/Typora.app/Contents/MacOS/Typora &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$@&lt;/span&gt;&quot;&lt;/span&gt; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; osascript -e &lt;span class=&quot;string&quot;&gt;&quot;delay 0.2&quot;&lt;/span&gt; -e &lt;span class=&quot;string&quot;&gt;&quot;tell application &#92;&quot;Typora&#92;&quot; to activate&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EOF&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;chmod +x &lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/.&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/typora&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;Vim&lt;/h2&gt;
&lt;p&gt;In the past 10+ years I&#39;ve been using Vim for basically everything everyday. So my default markdown editor has been vim. For quick edits I still prefer vim. Some nice plugins for markdown editing are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goyo: distraction free writing&lt;/li&gt;
&lt;li&gt;vim-markdown: better syntax highlighting
&lt;ul&gt;
&lt;li&gt;ToC: &lt;code&gt;:TOC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Link conceal: &lt;code&gt;:set conceallevel=2 concealcursor=nc&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Follow local link: the good old &lt;code&gt;gf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Preview image (maybe &lt;code&gt;gx&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you choose to not using hard wrap, then following config makes long lines look nice:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set breakindent &amp;quot; soft wrapped lines are indented too
let &amp;amp;showbreak = &#39;↳ &#39; &amp;quot; visual line break
        
      
    
    </summary>
    
    
      <category term="markdown" scheme="http://kflu.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Archlinux notes</title>
    <link href="http://kflu.github.io/2021/01/21/2021-01-21-arch-linux-install/"/>
    <id>http://kflu.github.io/2021/01/21/2021-01-21-arch-linux-install/</id>
    <published>2021-01-21T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2&gt;ISSUE: NO INTERNET AFTER INSTALLATION AND REBOOT&lt;/h2&gt;
&lt;p&gt;Symptom:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the interface is DOWN&lt;/li&gt;
&lt;li&gt;no name resolve after manually bring the interface UP&lt;/li&gt;
&lt;li&gt;systemd-networkd and systemd-resolved services are not started&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enable temporary (lost after reboot) internet access:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ip link &amp;lt;interface&amp;gt; up&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dhcpcd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The persistent fix is to use and configure a network manager. Choices are &lt;a href=&quot;https://wiki.archlinux.org/index.php/Network_configuration#Network_managers&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. My experience are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;systemd-networkd and systemd-resolved is arch/systemd built-in, so requires no additional download. However, it is not &amp;quot;smart engouth&amp;quot; to support zero-configuration. So you&#39;ll have to write a network config.&lt;/li&gt;
&lt;li&gt;NetworkManager is used by anarchy-linux installer. It is zero-configuration (only requires install and enable). However, it&#39;s an additional 100+ MB download (maybe due to its tie to Gnome).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below describes how to configure systemd-networkd|resolved.&lt;/p&gt;
&lt;p&gt;First, configure systemd-networkd. Find the interface name (e.g., &lt;code&gt;enp0s3&lt;/code&gt;),
then create file &lt;code&gt;/etc/systemd/network/200-enp0s3.network&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[Match]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Name=enp0s3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Network]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DHCP=yes&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Finally, enable the services and reboot:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;systemctl enable --now systemd-networkd.service systemd-resolved.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reboot&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You should have internet connection now.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Systemd-networkd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;arch systemd-networkd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Systemd#Enable_installed_units_by_default&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;arch systemd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;INSTALLERS AND ARCH-BASED DISTROS&lt;/h2&gt;
&lt;p&gt;To simplify installation, one can choose to use a installer program (once
booted into Arch live CD), or choose a Arch-based distro.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://itsfoss.com/arch-based-linux-distros/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This&lt;/a&gt; article lists the arch-based distros. Manjaro seems to be the most popular. However I tried Manjaro Architect, the installer seems to be too low level - it&#39;s basically waling through Arch&#39;s installation guide, so one might just go through the guide.&lt;/p&gt;
&lt;p&gt;Among the installers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://anarchyinstaller.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Anarchy&lt;/a&gt; is most polished. Installer experience is close to what I imagine.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/MatMoul/archfi&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;archfi&lt;/a&gt; feels rough edged. Disk partitioning (and others) is very limiting. Not so useful&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://picodotdev.github.io/alis/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;alis&lt;/a&gt; is not interactive, but config based.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I pick Anarchy - note it&#39;s an ISO bundled with Arch image. So it&#39;s a blury line between installers and distro.&lt;/p&gt;
&lt;p&gt;Note on internet connection: it looks like if choosing anarchy-desktop, then NetworkManager is configured as the network manager, and internet is enabled. If choosing anarchy-server, then no network manager is installed, and no internet.&lt;/p&gt;
&lt;h2&gt;ABS &amp;amp; MAKEPKG&lt;/h2&gt;
&lt;p&gt;makepkg verifies GPG signature for each package. But that needs to be explicitly trusted
by user:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# makepkg complains can&amp;apos;t verify gpg key xxxxxx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpg --recv-keys
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>luit Usage</title>
    <link href="http://kflu.github.io/2020/12/20/2020-12-20-luit-usage/"/>
    <id>http://kflu.github.io/2020/12/20/2020-12-20-luit-usage/</id>
    <published>2020-12-20T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;luit can translate non-UTF-8 char encodings into UTF-8, but &lt;strong&gt;cannot&lt;/strong&gt; do the
reverse. There&#39;re many ways to invoke luit, first read the manual.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;luit -encoding &amp;lt;enc&amp;gt; -- prog [args...]  # (1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prog_outputs_gbk | luit -c -encoding gbk  # (2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;luit -encoding &amp;lt;enc&amp;gt;  # (3) invokes a nested shell using given encoding&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The limitation of usage (1) is if the program also redirects its output, it&#39;s
tricky:&lt;/p&gt;
&lt;p&gt;You hope this would writes GBK chars into &lt;code&gt;file&lt;/code&gt;, but it doesn&#39;t. What you types
is repeated to the stdout. Because luit merely runs &lt;code&gt;cat&lt;/code&gt;, not &lt;code&gt;cat &amp;gt;file&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;luit -encoding gbk cat &amp;gt;file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Also, this won&#39;t work either:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat | luit -encoding gbk -c &amp;gt;file&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# or simpler:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;luit -encoding gbk -c &amp;gt;file&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-c&lt;/code&gt; makes &lt;code&gt;luit&lt;/code&gt; take from stdin and writes to stdout. It doesn&#39;t work b/c luit
translates gbk to utf8, from stdin to stdout. If you want the &lt;code&gt;file&lt;/code&gt; to have gbk
content, it won&#39;t work.&lt;/p&gt;
&lt;p&gt;Finally, to make it work:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;luit -encoding gbk sh -c &amp;apos;cat &amp;gt;file&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;or run &lt;code&gt;luit -encoding gbk&lt;/code&gt; which opens a nested shell, then in that shell, do
&lt;code&gt;cat
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Working with FIFOs (Named Pipes)</title>
    <link href="http://kflu.github.io/2020/12/15/2020-12-15-working-with-fifo/"/>
    <id>http://kflu.github.io/2020/12/15/2020-12-15-working-with-fifo/</id>
    <published>2020-12-15T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;How to properly read from FIFO:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;&amp;gt;fifo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Stéphane Chazelas on StackExchange shared some really good explanation
&lt;a href=&quot;https://unix.stackexchange.com/a/392754/38968&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;, especially on the strange
behavior of using &lt;code&gt;tail -f fifo&lt;/code&gt; to read.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Like cat, tail will wait for a process to open a file for writing. But here,
since you didn&#39;t specify a -n +1 to copy from the beginning, tail will need to
wait until eof to find out what the last 10 lines were, so you won&#39;t see
anything until the writing end is closed.&lt;/p&gt;
&lt;p&gt;After that, tail will not close its fd to the pipe which means the pipe instance
won&#39;t be destroyed, ... That read() will return with eof ... until some other
process opens the file again for writing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Another answer also by Stéphane is at
&lt;a href=&quot;https://unix.stackexchange.com/a/522881/38968&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. This one let me realize
that &lt;code&gt;dd&lt;/code&gt; can also be used for reading fifos (more flexible):&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dd bs=64k if=&amp;quot;$my_named_pipe&amp;quot; iflag=nonblock status=noxfer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Another flexible reading approach is socat.&lt;/p&gt;
&lt;p&gt;Side note - someone else mentioned that UDP can be used for &amp;quot;non-blocking&amp;quot;
data transfer: one end can send/receive data without the other end present. This
could be quite convenient/easy to work
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Setting up environment to play Chinese MUD on MacOS (with Tintin++)</title>
    <link href="http://kflu.github.io/2020/09/05/2020-09-05-macos-chinese-mud/"/>
    <id>http://kflu.github.io/2020/09/05/2020-09-05-macos-chinese-mud/</id>
    <published>2020-09-05T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;em&gt;Update: See bottom for an update&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Old Chinese MUDs uses BG* charsets, e.g., GBK, GB2312. Both Terminal app and
iTerm2 can be configured and used to play. To set up the terminal:&lt;/p&gt;
&lt;p&gt;Hint: Create a dedicated profile for MUD playing, call it &amp;quot;CN MUD&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To properly display GBK characters&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Change terminal app character encoding to BGK (in &amp;quot;advanced&amp;quot;)&lt;/li&gt;
&lt;li&gt;Check the box &amp;quot;Unicode East Asian Ambiguous characters are wide&amp;quot; (in
&amp;quot;advanced&amp;quot;). With this, the ASCII arts in the game (e.g. maps) will have
misalignment.&lt;/li&gt;
&lt;li&gt;After that, the font can be &lt;strong&gt;left&lt;/strong&gt; unchanged, as the English, mono font&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;To input GBK characters in shell&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# zsh autocompletion helps prompting the values&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export LC_ALL=zh_CN.GBK&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# or, make a function to fire up tintin++:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;LC_ALL=zh_CN.GBK tt++&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;To input GBK characters in Tintin++&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When tt++ is launched, type in:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;#config CHARSET GBK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This config is only documented &lt;a href=&quot;https://tintin.sourceforge.io/board/viewtopic.php?p=5795&amp;amp;sid=f408c5eb7c78012d690369390b84458d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. It also didn&#39;t mention &lt;code&gt;GBK&lt;/code&gt; as a
valid value, but it seems so.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Without this step, typing GBK characters would freeze tt++ application and
you&#39;ll have to kill it from another tty.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Update: Tue Sep 22 23:42:37 PDT 2020&lt;/h2&gt;
&lt;p&gt;I found tmux doesn&#39;t work with above solution. Because tmux doesn&#39;t support
non-UTF8 locales:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; LC_CTYPE  The character encoding locale(1).  It is used for two separate
           purposes.  For output to the terminal, UTF-8 is used if the -u
           option is given or if LC_CTYPE contains &amp;quot;UTF-8&amp;quot; or &amp;quot;UTF8&amp;quot;.
           Otherwise, only ASCII characters are written and non-ASCII
           characters are replaced with underscores (`_&#39;)...
                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luckily I found another more elegant way to solve the problem without changing
terminal locale - using &lt;code&gt;luit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;luit&lt;/code&gt; can convert a single non-UTF8 program&#39;s input and output between UTF8 and
a specified locale. Since tmux doesn&#39;t non-UTF8, so it is NOT useful to attempt
&lt;code&gt;luit -encoding GBK tmux&lt;/code&gt;. However, within a tmux pane, it is useful to do:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;luit -encoding GBK tt++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# within tt++ do:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#config CHARSET GBK&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In another tmux pane for displaying logging:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;luit -encoding tail -f chat.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;TMUX setup&lt;/h2&gt;
&lt;p&gt;No matter luit or not, the terminal app needs to display east asian wide
characters wide. However, once it&#39;s enabled, tmux&#39;s pane splitter would look
strange. The vertical splitter would be invisible most of the time.&lt;/p&gt;
&lt;p&gt;To fix this, tmux 3.2 introduced a setting &lt;code&gt;pane-boarder-lines&lt;/code&gt; that allows use
only ASCII characters for the splitters.&lt;/p&gt;
&lt;p&gt;I was able to build tmux 3.2rc from source tarball easily on MacOS:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./configure &amp;amp;&amp;amp; make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Once that, start the tmux and set:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;set pane-boarder-lines simple&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Would solve the problem.&lt;/p&gt;
&lt;h2&gt;Thu Aug 18 23:29:08 PDT 2022&lt;/h2&gt;
&lt;p&gt;I found easiest way is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use native terminal without using tmux
&lt;ol&gt;
&lt;li&gt;set terminal encoding to gbk&lt;/li&gt;
&lt;li&gt;enable &amp;quot;ambiguous characters are double-width&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;in tt++, use &lt;code&gt;#config CHARSET GBK&lt;/code&gt; to type chinese characters
&lt;ol&gt;
&lt;li&gt;tt++ also supports GBK to UTF conversion (&lt;code&gt;#config charset GBK1TOUTF8&lt;/code&gt;). See &lt;a href=&quot;https://tintin.mudhalla.net/faq.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tt++
        
      
    
    </summary>
    
    
      <category term="mud" scheme="http://kflu.github.io/tags/mud/"/>
    
      <category term="macos" scheme="http://kflu.github.io/tags/macos/"/>
    
  </entry>
  
  <entry>
    <title>Proof of concept - Minimalistic IRC bot via AWK</title>
    <link href="http://kflu.github.io/2020/08/15/2020-08-15-awk-irc-bot/"/>
    <id>http://kflu.github.io/2020/08/15/2020-08-15-awk-irc-bot/</id>
    <published>2020-08-15T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I realized that awk is ideal for expect-like automation. The difficulty I faced
was how can awk &amp;quot;control&amp;quot; another program&#39;s (in this case, an irc client) both
stdin and stdout, i.e., awk would need to both read from the program&#39;s stdout
and write to its stdin. I solved this program by creating a FIFO for taking
inputs, and hook the program to it. Below is the detail:&lt;/p&gt;
&lt;p&gt;First, let&#39;s set up our system:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; mkfifo ups    &lt;span class=&quot;comment&quot;&gt;# FIFO for taking inputs to IRC (upstream)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Connect to IRC server. The &amp;lt;&amp;gt; style redirection ensures the &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# EOF sent from other processes to the fifo doesn&#39;t cause this&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# pipeline to terminate. It also ensures non-buffering mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# so outputs are piped through without delay.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; nc chat.freenode.org 6667 &amp;lt;&amp;gt;ups  | awk &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;$(cat &amp;lt;&amp;lt;&#39;EOF&#39;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;variable&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;variable&quot;&gt;    print &quot;[received] &quot; $0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;variable&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;variable&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;variable&quot;&gt;/kfkfkf/ &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;variable&quot;&gt;    print &quot;+++++ I saw &quot;kfkfkf! +++++&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;variable&quot;&gt;    print &quot;hooohaaa&quot; &amp;gt; &quot;ups&quot;;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;variable&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;variable&quot;&gt;EOF&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;variable&quot;&gt;)&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now this bot is up and running without human intervention. In case you want to
interact with this IRC session, you could access the intput using &lt;code&gt;cat&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt;&amp;gt; cat &amp;gt; ups&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;nick foobar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user foobar _ _ foobar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;privmsg nickserv :identify &amp;lt;password&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;privmsg &amp;lt;nick&amp;gt; :&amp;lt;msg&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;privmsg &amp;lt;#channel&amp;gt; :&amp;lt;msg&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The system looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;+---------------------------+
|                           |
|           cat             |
|                           |
+------------+--------------+
             |
             |
             v
          +--+--+
          | ups +&amp;lt;---------------+
          +--+--+                |
             |                   |
             |                   |
             v                   |
+------------+--------------+    |
|                           |    |
| nc chat.freenode.org 6667 |    |
|                           |    |
+------------+--------------+    |
             |                   |
             |                   |
             v                   |
+------------+--------------+    |
|                           |    |
|           awk             +----+
|                           |
+---------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One can connect to Freenode IRC using SSL instead, either one of below works:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl s_client -quiet -connect chat.freenode.org:6697
socat stdio openssl-connect:chat.freenode.org:6697
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Taking it further&lt;/h1&gt;
&lt;p&gt;A pattern can be observed here - the main program is the IRC session, where its
outputs are streaming through a pipeline unmodified. A set of bot programs takes
IRC output as stdin, and their outputs are the bot command that should be sent
back to the IRC. Then, we can use a utility tee program (&lt;a href=&quot;https://github.com/kflu/proctee&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;proctee&lt;/code&gt;&lt;/a&gt;) to
chain those bots together.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkfifo ups  &lt;span class=&quot;comment&quot;&gt;# input to IRC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkfifo display  &lt;span class=&quot;comment&quot;&gt;# &quot;display&quot; window &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# read user and password&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&#39;user: &#39;&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; user; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;string&quot;&gt;&#39;pass: &#39;&lt;/span&gt;; stty -&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt;; &lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt; pass; stty &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&amp;gt;ups socat stdio openssl-connect:chat.freenode.org:6697          &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| &amp;#123; proctee -o display        -- awk &lt;span class=&quot;string&quot;&gt;&#39;&amp;#123;print&amp;#125;&#39;&lt;/span&gt;   ;: logging bot &amp;#125; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| &amp;#123; proctee -o display -o ups -- bots/user.awk                    &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                 -v user=&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;                   &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    pass=&lt;span class=&quot;string&quot;&gt;&quot;pass&quot;&lt;/span&gt;  ;: user bot    &amp;#125; &#92; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| &amp;#123; proctee -o display -o ups -- bots/weather    ;: weather bot &amp;#125; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| &amp;#123; proctee -o display -o ups -- bots/time       ;: time bot   
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="irc" scheme="http://kflu.github.io/tags/irc/"/>
    
      <category term="shell" scheme="http://kflu.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Nginx notes</title>
    <link href="http://kflu.github.io/2020/05/09/2020-05-09-nginx-notes/"/>
    <id>http://kflu.github.io/2020/05/09/2020-05-09-nginx-notes/</id>
    <published>2020-05-09T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h3&gt;Running in daemon-less (foreground) mode&lt;/h3&gt;
&lt;p&gt;Create a config with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# filename: server.conf
daemon off;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx -c &amp;quot;server.conf&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Minimum Config&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;daemon off;  # only for dev mode&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;events &amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    server &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        listen       8888;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        location / &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            proxy_pass http://localhost:3000;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
    
      <category term="nginx" scheme="http://kflu.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>React and Typescript notes</title>
    <link href="http://kflu.github.io/2020/04/27/2020-04-27-react-typescript/"/>
    <id>http://kflu.github.io/2020/04/27/2020-04-27-react-typescript/</id>
    <published>2020-04-27T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://create-react-app.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Create React App&lt;/a&gt; is React + Webpack. It scaffolds projects.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npx create-react-app myapp --template=typescript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;React components:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// functional component:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function Foo(x: SomeType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return (&amp;lt;div&amp;gt; ... &amp;lt;/div&amp;gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// class component:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class Bar extends Component &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render() &amp;#123; return (&amp;lt;div&amp;gt;...&amp;lt;/div&amp;gt;); &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    async componentDidMount() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let data = await fetch(&amp;quot;http://...&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Use in JSX:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&amp;lt;Foo &amp;#123;...x&amp;#125; /&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://create-react-app.dev/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Create React App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/basic-types.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typescript handbook&lt;/a&gt; is simple and clear&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/better-programming/building-basic-react-authentication-e20a574d5e71&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React Authentication&lt;/a&gt; - token
        
      
    
    </summary>
    
    
      <category term="typescript" scheme="http://kflu.github.io/tags/typescript/"/>
    
      <category term="react" scheme="http://kflu.github.io/tags/react/"/>
    
      <category term="frontend" scheme="http://kflu.github.io/tags/frontend/"/>
    
  </entry>
  
  <entry>
    <title>Zoneminder setup guide</title>
    <link href="http://kflu.github.io/2020/04/16/2020-04-16-zoneminder/"/>
    <id>http://kflu.github.io/2020/04/16/2020-04-16-zoneminder/</id>
    <published>2020-04-16T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Installing Zoneminder is not straightforward at all. You need to set up all the dependencies and configure them: e.g., PHP, Apache, MySQL.&lt;/p&gt;
&lt;p&gt;A easier way is to use &lt;a href=&quot;https://github.com/dlandon/zoneminder&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the ZM docker image&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However FreeBSD doesn&#39;t support Docker. So I installed a Ubuntu Server guest on my FreeBSD, and install docker on the Ubuntu Server instead. I followed &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this guide&lt;/a&gt; to install Docker on Ubuntu. Basically just setup Docker&#39;s repository for &lt;code&gt;apt&lt;/code&gt;. Then simply &lt;code&gt;apt install docker-ce&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once docker is ready, use follow commands to install and start the ZM service. Note that first time it takes a while to start up. You can check the log with &lt;code&gt;docker container log Zoneminder&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once ZM starts up, point your browser to &lt;code&gt;http://ip:8080/zm&lt;/code&gt; you should see ZM the landing page.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull dlandon/zoneminder&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo docker run -d --name=&amp;quot;Zoneminder&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--restart=always &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--net=&amp;quot;bridge&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--privileged=&amp;quot;true&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-p 8080:80/tcp &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-p 9000:9000/tcp &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e TZ=&amp;quot;America/Los_Angeles&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e SHMEM=&amp;quot;50%&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e PUID=&amp;quot;99&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e PGID=&amp;quot;100&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e INSTALL_HOOK=&amp;quot;0&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e INSTALL_FACE=&amp;quot;0&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e INSTALL_TINY_YOLO=&amp;quot;0&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e INSTALL_YOLO=&amp;quot;0&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e MULTI_PORT_START=&amp;quot;0&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-e MULTI_PORT_END=&amp;quot;0&amp;quot; &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v &amp;quot;/mnt/Zoneminder&amp;quot;:&amp;quot;/config&amp;quot;:rw &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v &amp;quot;/mnt/Zoneminder/data&amp;quot;:&amp;quot;/var/cache/zoneminder&amp;quot;:rw &#92;&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="freebsd" scheme="http://kflu.github.io/tags/freebsd/"/>
    
      <category term="docker" scheme="http://kflu.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>FreeBSD BHyve Setup Note</title>
    <link href="http://kflu.github.io/2020/04/08/2020-04-08-freebsd-bhyve/"/>
    <id>http://kflu.github.io/2020/04/08/2020-04-08-freebsd-bhyve/</id>
    <published>2020-04-08T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.674Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;bhyve is FreeBSD&#39;s hypervisor. The native setup guide is at &lt;a href=&quot;https://www.freebsd.org/doc/handbook/virtualization-host-bhyve.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.
However, there exists a higher level wrapper called &lt;a href=&quot;https://github.com/churchers/vm-bhyve&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vm-bhyve&lt;/a&gt;
available. I&#39;m using that.&lt;/p&gt;
&lt;p&gt;I&#39;m following the installation guide in &lt;a href=&quot;https://github.com/churchers/vm-bhyve/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;README&lt;/a&gt;. In a summary:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pkg install vm-bhyve&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pkg install grub2-bhyve  # for linux guests&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pkg install bhyve-firmware  # for UEFI support&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zfs create zroot/vm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# update /etc/rc.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysrc vm_enable=&amp;quot;YES&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sysrc vm_dir=&amp;quot;zfs:zroot/vm&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp /usr/local/share/examples/vm-bhyve/* /zroot/vm/.templates/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# This creates network interface `vm-public`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm switch create public&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm switch add public em0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm iso http://repo1.sea.innoscale.net/centos/8.1.1911/isos/x86_64/CentOS-8.1.1911-x86_64-dvd1.iso&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm iso http://releases.ubuntu.com/18.04.4/ubuntu-18.04.4-live-server-amd64.iso&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;A few notes:&lt;/p&gt;
&lt;p&gt;I created a zfs dataset &lt;code&gt;zroot/vm&lt;/code&gt; for storing the vms, and set &lt;code&gt;vm_dir&lt;/code&gt; to &lt;code&gt;zfs:zroot/vm&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I followed the guide to name the vm switch &lt;code&gt;public&lt;/code&gt;. And I can see a network
interface &lt;code&gt;vm-public&lt;/code&gt; was created for me:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vm-public: flags=8843&amp;lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&amp;gt; metric 0 mtu 1500&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ether 06:b3:5f:a8:b6:2c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nd6 options=1&amp;lt;PERFORMNUD&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        groups: bridge vm-switch viid-4c918@&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        id 00:00:00:00:00:00 priority 32768 hellotime 2 fwddelay 15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        maxage 20 holdcnt 6 proto rstp maxaddr 2000 timeout 1200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        root id 00:00:00:00:00:00 priority 32768 ifcost 0 port 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        member: em0 flags=143&amp;lt;LEARNING,DISCOVER,AUTOEDGE,AUTOPTP&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ifmaxaddr 0 port 1 priority 128 path cost 200000&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Choice of Linux distro and ISO&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I initially want to use CentOS. However CentOS by default uses graphic
installation, but I wasn&#39;t able to get that working (bhyeve seems to support VNC
for UEFI graphic but I didn&#39;t get that working).&lt;/p&gt;
&lt;p&gt;I had better luck with Ubuntu server. It offers text mode installation. And I
was able to start and install it:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vm iso http://releases.ubuntu.com/18.04.4/ubuntu-18.04.4-live-server-amd64.iso&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm create -t ubuntu ub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm install ub ubuntu-18.04.4-live-server-amd64.iso&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm console ub  # attaches to the guest OS console&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ... in a few moment Ubuntu ISO started and installation proceeded normally ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The security update at the end of Ubuntu installation did fail, so I chose
&amp;quot;cancel update and reboot&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fixing Grub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;After reboot, Ubuntu server booted into grub prompt. &lt;a href=&quot;https://unix.stackexchange.com/a/330852/38968&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This SO post&lt;/a&gt; is helpful. It means grub can&#39;t find root partition. So in grub prompt:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;set prefix=(hd0,gpt2)/boot/grub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set root=(hd0,gpt2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;insmod linux&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;insmod normal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;normal&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This started ubuntu normally. Then issue command to fix grub:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo update-grub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;However after reboot, it stuck in grub prompt again...&lt;/strong&gt;*&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[WORKING SOLUTION]&lt;/strong&gt; it was due to Ubuntu Server installs boot to 2nd
partition, but with default bhyve grub looks for boot in 1st partition. See
&lt;a href=&quot;https://github.com/churchers/vm-bhyve/wiki/Configuring-Grub-Guests&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The fix is to add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grub_run_partition=&amp;quot;2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into the VM&#39;s conf (&lt;code&gt;/zroot/vm/ub/ub.conf&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Now the VM can start normally.&lt;/p&gt;
&lt;p&gt;Here&#39;s the VM config that works for Ubuntu Server 18.04.4:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;loader=&amp;quot;uefi&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# ubuntu server installs boot to 2nd partition&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grub_run_partition=&amp;quot;2&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cpu=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;memory=512M&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;network0_type=&amp;quot;virtio-net&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;network0_switch=&amp;quot;public&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;disk0_type=&amp;quot;virtio-blk&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;disk0_name=&amp;quot;disk0.img&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;Cloud images&lt;/h2&gt;
&lt;p&gt;Trying out using cloud images. The ubuntu server minimal is only 100MB+&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pkg install qemu-utils  # needed for using cloud images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm img https://cloud-images.ubuntu.com/minimal/releases/bionic/release-20200318/ubuntu-18.04-minimal-cloudimg-amd64.img&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Cloud image doesn&#39;t allow password login. Luckily vm-bhyve also supports &lt;a href=&quot;https://github.com/churchers/vm-bhyve#using-cloud-init&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;cloud
init&lt;/a&gt;. So you can inject
SSH public keys:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pkg install cdrkit-genisoimage  # required by cloud init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vm create -t ubuntu_server -i ubuntu-18.04-minimal-cloudimg-amd64.img -C -k ~/.ssh/id_rsa.pub ub2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;Cloud init&lt;/h2&gt;
&lt;p&gt;Cloud init is two part:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the cloud-init service running inside the guest machine, reading data sources
(e.g., from a mounted ISO system &amp;quot;seed.iso&amp;quot; to read init config.&lt;/li&gt;
&lt;li&gt;the preparation of the &amp;quot;seed.iso&amp;quot; to &amp;quot;inject&amp;quot; the init config. This is done
on the host, before booting the guest VM for the first time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At the moment, vm-bhyve doesn&#39;t support all the cloud-init functions. Its
support is basically upon &lt;code&gt;vm create&lt;/code&gt; command:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;it reads the cloud-init related configs it understands (very limited)&lt;/li&gt;
&lt;li&gt;dump them into &lt;code&gt;&amp;lt;vm&amp;gt;/.cloud-init&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;create the &lt;code&gt;seed.iso&lt;/code&gt; by invoking &lt;code&gt;genisoimage -output ./seed.iso -volid cidata -joliet -rock .cloud-init/*&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And cloud-init will be triggered the first time the VM is booted.&lt;/p&gt;
&lt;p&gt;So to circumvent vm-bhyve&#39;s limitation, I:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a new VM&lt;/li&gt;
&lt;li&gt;create a &lt;code&gt;.cloud-init&lt;/code&gt; folder with proper config files as I desire&lt;/li&gt;
&lt;li&gt;create the
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="freebsd" scheme="http://kflu.github.io/tags/freebsd/"/>
    
      <category term="bhyve" scheme="http://kflu.github.io/tags/bhyve/"/>
    
  </entry>
  
  <entry>
    <title>Notes About ONVIF IP Camera</title>
    <link href="http://kflu.github.io/2020/04/04/2020-04-04-onvif-ip-cam/"/>
    <id>http://kflu.github.io/2020/04/04/2020-04-04-onvif-ip-cam/</id>
    <published>2020-04-04T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.673Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2&gt;CONNECTING THE CAMERA TO NETWORK&lt;/h2&gt;
&lt;p&gt;Getting the camera to connect to the network is still a device-dependent task.
For my camera there&#39;s no ethernet port for configuration, so it relies on
onboard microphone as I/O:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;connect to iOS app&lt;/li&gt;
&lt;li&gt;Specify WIFI connection info in the app&lt;/li&gt;
&lt;li&gt;The app modulates the info in audio wave and use phone&#39;s microphone to send
the info to the camera&lt;/li&gt;
&lt;li&gt;Camera now connects to LAN&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;GETTING INFORMATION ABOUT THE CAMERA&lt;/h2&gt;
&lt;p&gt;Now this is where ONVIF shines. It defines a set of standard web services. The
specs are &lt;a href=&quot;https://www.onvif.org/profiles/specifications/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. Those services are in WSDL, so using .NET core to
generate client code is really each:&lt;/p&gt;
&lt;h3&gt;Finding the device IP&lt;/h3&gt;
&lt;p&gt;I found the device IP by going into my router and searching by MAC (MAC is printed on a label on the camera). Alternatively, device IP can be obtained from the app.&lt;/p&gt;
&lt;h3&gt;Finding servive endpoints&lt;/h3&gt;
&lt;p&gt;The ONVIF core spec states that the device management (&lt;code&gt;devicemgmt.wsdl&lt;/code&gt;)
endpoint is fixed to &lt;code&gt;http://onvif_host/onvif/device_service&lt;/code&gt; (section 5.1.1).&lt;/p&gt;
&lt;p&gt;One useful tool is &lt;a href=&quot;https://github.com/patrickmichalina/camera-probe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;camera-probe&lt;/code&gt;&lt;/a&gt;. It&#39;s a NPM CLI that discovers
devices on LAN. It was able to detect my camera.&lt;/p&gt;
&lt;h3&gt;Using WSDL clients&lt;/h3&gt;
&lt;p&gt;.NET Core has tool to generate WSDL client given WSDL documents. The two web services that&#39;re particularly useful are &lt;code&gt;device.wsdl&lt;/code&gt; (or confusingly &lt;code&gt;devicemgmt.wsdl&lt;/code&gt;) and &lt;code&gt;media.wsdl&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dotnet tool install --global dotnet-svcutil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir onvif &amp;amp;&amp;amp; cd onvif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dotnet new console&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dotnet-svcutil https://www.onvif.org/ver10/device/wsdl/devicemgmt.wsdl -n &amp;apos;*,mgmt&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dotnet-svcutil https://www.onvif.org/ver10/media/wsdl/media.wsdl -n &amp;apos;*,media&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To use WSDL clients, the most important namespace is
&lt;code&gt;System.ServiceModel.*&lt;/code&gt;. Creating service clients requires specifying a binding
(&lt;code&gt;BasicHttpBinding&lt;/code&gt;), and the servicec endpoint:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var client = new DeviceClient(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    new System.ServiceModel.BasicHttpBinding(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    new System.ServiceModel.EndpointAddress(&amp;quot;http://192.168.0.19:80/onvif/device_service&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var mediaClient = new MediaClient(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    new System.ServiceModel.BasicHttpBinding(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    new System.ServiceModel.EndpointAddress(&amp;quot;http://192.168.0.19:80/onvif/device_service&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I used below code to get various information about the device, the streams, and
the detail for each stream:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;System.Console.WriteLine(js(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    await client.GetCapabilitiesAsync(new CapabilityCategory[] &amp;#123;CapabilityCategory.All&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.Console.WriteLine(js(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    await mediaClient.GetServiceCapabilitiesAsync()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.Console.WriteLine(js(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    await mediaClient.GetProfilesAsync()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.Console.WriteLine(js( &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    await mediaClient.GetVideoSourceConfigurationAsync(&amp;quot;stream0&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.Console.WriteLine(js(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    await mediaClient.GetStreamUriAsync(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        new StreamSetup()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Stream = StreamType.RTPUnicast,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Transport = new Transport&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Protocol = TransportProtocol.HTTP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;quot;profile_VideoSource_1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;GetStreamUriAsync&lt;/code&gt; call gives the RTSP stream address for stream profile
&lt;code&gt;profile_VideoSource_1&lt;/code&gt;: &lt;code&gt;rtsp://192.168.0.xx:2600/stream0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that this stream needs authentication. The user and password is,
unfortunately, device-dependent. For my device, the instrucment is mentioned at
Amiccom website under NVR section. It basically says the username is &lt;code&gt;admin&lt;/code&gt;,
the password must be obtained from the app. I do see a generated password in the
app.&lt;/p&gt;
&lt;p&gt;So I was able to connect to the stream in VLC using the following URI:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rtsp://&amp;lt;username&amp;gt;:&amp;lt;password&amp;gt;@&amp;lt;device_addr&amp;gt;:2600/stream0`
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.onvif.org/profiles/specifications/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;specs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.onvif.org/wp-content/uploads/2016/12/ONVIF_WG-APG-Application_Programmers_Guide-1.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;programers_guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.onvif.org/resources/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;programming_resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/patrickmichalina/camera-probe&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;camera_probe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://amiccomcam.com/nvr-instructions/&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="onvif" scheme="http://kflu.github.io/tags/onvif/"/>
    
      <category term="ip-camera" scheme="http://kflu.github.io/tags/ip-camera/"/>
    
  </entry>
  
  <entry>
    <title>Setting up Monogame Development on Mac</title>
    <link href="http://kflu.github.io/2020/01/12/2020-01-12-monogame-on-mac/"/>
    <id>http://kflu.github.io/2020/01/12/2020-01-12-monogame-on-mac/</id>
    <published>2020-01-12T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.673Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;It is not easy to set up monogame dev on Mac. It officially supports mono +
visual studio for mac + monogame extension. However, there were several issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;monogame extension does not support the new VS for Mac 2019, but only vs4mac
2017 . However, the 2017 download isn&#39;t available from Microsoft anymore (I
had to download it from &lt;a href=&quot;https://dl.xamarin.com/VsMac/VisualStudioForMac-7.5.4.3.dmg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;I cannot scaffold projects with &amp;quot;Monogame Mac Application&amp;quot; (error: &amp;quot;Exception
has been thrown by the target of an invocation.&amp;quot;)&lt;/li&gt;
&lt;li&gt;I was able to scaffold &amp;quot;Monogame Windows Application&amp;quot; or &amp;quot;iPad/iOs&amp;quot;, but I
couldn&#39;t build and run the projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Monogame on .Net core on Mac&lt;/h2&gt;
&lt;p&gt;I was able to scaffold and run using this setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install .Net Core&lt;/li&gt;
&lt;li&gt;Install vscode&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&quot;http://community.monogame.net/t/monogame-3-7-1-release/11173&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the standalone monogame pipeline application&lt;/a&gt; (follow the official
mac installation doc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now following &lt;a href=&quot;http://blog.dylanwilson.net/posts/monogame-on-dotnet-core/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this blog&lt;/a&gt;, firstly install the Monogame project template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet new -i &amp;quot;MonoGame.Template.CSharp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In a working directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet new mgdesktopgl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With the basic setup, you should be able to run the blank game with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now let&#39;s follow &lt;a href=&quot;http://www.monogame.net/documentation/?page=adding_content&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;official guide&lt;/a&gt; to add a ball sprite to the canvas.&lt;/p&gt;
&lt;p&gt;Add a content by opening the Monogame Pipeline tool, add the &lt;code&gt;ball.png&lt;/code&gt; to the
&lt;code&gt;Content&lt;/code&gt; project. Then make changes accordingly to the guide.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Fix monogame freeimage issue:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The pipeline tool modifies &lt;code&gt;Content.mgcb&lt;/code&gt; to include some msbuild operations for
&lt;code&gt;ball.png&lt;/code&gt;. Specifically, the &lt;code&gt;TextureImporter&lt;/code&gt;. Under the hood, it interopts
with &lt;code&gt;libfreeimage.dylib&lt;/code&gt;, which by some monogame bug, isn&#39;t shipped with the
&lt;code&gt;monogame.content.builder&lt;/code&gt; nuget package. To fix this issue:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brew install freeimage&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# find the installed `libfreeimage.dylib`:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;brew ls freeimage | grep -e &amp;apos;libfreeimage&#92;..*&#92;.dylib&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# link it into the MG builder build tool folder:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ln -s &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /usr/local/Cellar/freeimage/3.18.0/lib/libfreeimage.3.18.0.dylib &#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ~/.nuget/packages/monogame.content.builder/3.7.0.4/build/MGCB/build/libfreeimage.dylib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
&lt;p&gt;Now we are ready to build and run the game and see the ball image:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet run
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The complete working code is at https://github.com/kflu/monogame-setup&lt;/p&gt;
&lt;h2&gt;2020-01-31 Some more learnings (quick note)&lt;/h2&gt;
&lt;p&gt;Pipeline tool is just a GUI helping you to construct the &lt;code&gt;Content.mgcb&lt;/code&gt; file.
The content building actually happens at build time, the &lt;code&gt;Content.mgcb&lt;/code&gt; file is
actually the command line parameters for calling &lt;code&gt;MGCB&lt;/code&gt; command. In this sense,
the pipeline tool is not necessary - why I don&#39;t want to use it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 1: Pipeline tool crashed when adding reference&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I try to add Tiled map to content - they require additonal reference assembly
for &lt;code&gt;MGCB&lt;/code&gt; to build. Pipeline can add reference. But it has a bug crashing
when adding references.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 2: Difficult to add dependencies of the reference manually in MGCB
file&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s not easy to add reference to MGCB file. Because you not only add the
reference, but also all its dependencies. Something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/reference:PATH1/MonoGame.Extended.Content.Pipeline.dll
/reference:PATH2/MonoGame.Extended.dll
/reference:PATH3/MonoGame.Extended.Tiled.dll
/reference:PATH4/Newtonsoft.Json.dll
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don&#39;t know if Pipeline tool help you add all dependencies, if you add a
reference assembly via Pipeline tool. But since it&#39;s broken I don&#39;t have this
help. And manually figuring out all dependencies and type their physical paths
are infeasible.&lt;/p&gt;
&lt;p&gt;What I did was creating another .net core classlib (netstandard2.2). Adding the
top level reference via &lt;code&gt;dotnet add package ...&lt;/code&gt;. Then &lt;code&gt;dotnet publish&lt;/code&gt;. I got
the reference assembly and its dependencies all flattened in the &lt;code&gt;publish&lt;/code&gt;
folder. Then I was add all of them as reference in MGCB file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/reference:../../pipeline_libs/bin/Debug/netstandard2.0/publish/MonoGame.Extended.Content.Pipeline.dll
/reference:../../pipeline_libs/bin/Debug/netstandard2.0/publish/MonoGame.Extended.dll
/reference:../../pipeline_libs/bin/Debug/netstandard2.0/publish/MonoGame.Extended.Tiled.dll
/reference:../../pipeline_libs/bin/Debug/netstandard2.0/publish/Newtonsoft.Json.dll
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Problem 3: relative paths between content files&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The relative paths between the tiled map (tmx), tilesets (tsx), the raw assets
(png) are inconsistent when they are copied or imported to the game project
directory. So often &lt;code&gt;dotnet build&lt;/code&gt; (or just &lt;code&gt;mgcb&lt;/code&gt;) complained the file could
not be found.&lt;/p&gt;
&lt;p&gt;This is a process issue, I&#39;d feel more comfortable once a pattern is found.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Problem 4: &lt;code&gt;/build&lt;/code&gt; command with source &amp;amp; destination doesn&#39;t work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Form &lt;code&gt;/build:&amp;lt;src&amp;gt;:&amp;lt;dest&amp;gt;&lt;/code&gt; doesn&#39;t work. While according to MGCB document, it
should work. It says file path &lt;code&gt;&amp;lt;src&amp;gt;:&amp;lt;desst&amp;gt;&lt;/code&gt; not found, as if it doesn&#39;t
understand this
        
      
    
    </summary>
    
    
      <category term="csharp" scheme="http://kflu.github.io/tags/csharp/"/>
    
      <category term="game" scheme="http://kflu.github.io/tags/game/"/>
    
  </entry>
  
  <entry>
    <title>Writing PyCharm Plugin</title>
    <link href="http://kflu.github.io/2019/08/24/2019-08-24-writing-pycharm-plugin/"/>
    <id>http://kflu.github.io/2019/08/24/2019-08-24-writing-pycharm-plugin/</id>
    <published>2019-08-24T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.673Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;strong&gt;the complete plugin project is hosted &lt;a href=&quot;https://github.com/kflu/pyprop3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spent days to get this working, so documenting it here. I reported &lt;a href=&quot;https://youtrack.jetbrains.com/issue/PY-35838&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;a PyCharm
issue&lt;/a&gt; where I want &lt;code&gt;__property__&lt;/code&gt; to be recognized as &lt;code&gt;property&lt;/code&gt;. The
developer recommend me to write a plugin to fix that. PyCharm plugin must be
written in Java (my choice) or Kotlin in IntelliJ. The official document
&lt;a href=&quot;https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;recommend using Gradle&lt;/a&gt;. However &lt;a href=&quot;https://youtrack.jetbrains.com/issue/PY-35838&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;I can&#39;t get it
working&lt;/a&gt;. Beside what I reported there, I&#39;ve also bumped into
below difficulties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On my work laptop (MacOS), IDEA struggled to find the right JDK to use. I&#39;ve
to download and install JDK 12. This maybe due to JAVA_HOME settings or some
sort. Also Gradle struggled to import and build.&lt;/li&gt;
&lt;li&gt;On my personal laptop, IDEA prompt to fix Windows Defender. Gradle also hang at
importing.&lt;/li&gt;
&lt;li&gt;In &lt;code&gt;plugin.xml&lt;/code&gt;, &lt;code&gt;&amp;lt;depends&amp;gt;&lt;/code&gt; complained &lt;code&gt;com.intellij.modules.python&lt;/code&gt; cannot
be resolved.&lt;/li&gt;
&lt;li&gt;Installed PyCharm locally and in IDEA set JDK to PyCharm&#39;s to solve
&lt;code&gt;com.intellij.modules.python&lt;/code&gt;, but build fails to find
&lt;code&gt;PyKnownDecoratorProvider&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&#39;s what works for me and all the tricks.&lt;/p&gt;
&lt;p&gt;First install PyCharm locally, so its JDK can be used later in IDEA, which has
&lt;code&gt;PyKnownDecoratorProvider&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Second, configure project JDKs and libraries to add PyCharm JDK.&lt;/p&gt;
&lt;p&gt;In IDEA, create a new project. Select &amp;quot;IntelliJ Platform Plugin&amp;quot; from &lt;strong&gt;project
templates&lt;/strong&gt;. &lt;strong&gt;NOT&lt;/strong&gt; the one from &amp;quot;Gradle&amp;quot;. I think this is what the official
document refers to as &amp;quot;DevKit&amp;quot;, which JetBrain does not prefer (but worked for
me).&lt;/p&gt;
&lt;p&gt;In Project SDK, make sure the PyCharm JDK is selected.&lt;/p&gt;
&lt;p&gt;Once project is opened, in &lt;code&gt;plugin.xml&lt;/code&gt;, insert:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;depends&amp;gt;com.intellij.modules.python&amp;lt;/depends&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has auto-complete. If IDEA complained &lt;code&gt;...modules.python&lt;/code&gt; can&#39;t be found,
it means the JDK isn&#39;t set up correctly. Once &lt;code&gt;&amp;lt;depends&amp;gt;&lt;/code&gt; is specified
correctly, add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;extensions defaultExtensionNs=&amp;quot;Pythonid&amp;quot;&amp;gt;
    &amp;lt;knownDecoratorProvider implementation=&amp;quot;pyprop&amp;quot; /&amp;gt;
&amp;lt;/extensions&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Relevant official doc is &lt;a href=&quot;https://www.jetbrains.org/intellij/sdk/docs/basics/plugin_structure/plugin_extensions_and_extension_points.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. However, pay attension to change
&lt;code&gt;defaultExtensionNs&lt;/code&gt; to &lt;code&gt;Pythonid&lt;/code&gt;. Otherwise you don&#39;t get autocomplete for
&lt;code&gt;knownDecoratorProvider&lt;/code&gt; and IDEA complains, although later build will pass, PyCharm
will load the plugin, it will NOT instantiate your plugin implementation class.
When you get autocomplete for &lt;code&gt;knownDecoratorProvider&lt;/code&gt; you know you get it
right.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;knownDecoratorProvider&lt;/code&gt; is declared in
&lt;a href=&quot;https://github.com/JetBrains/intellij-community/blob/master/python/src/META-INF/python-core-common.xml&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;python-core-common.xml&lt;/code&gt;&lt;/a&gt;. Note it&#39;s qualified name
begins with &lt;code&gt;Pythonid&lt;/code&gt; that&#39;s what we put in &lt;code&gt;defaultExtensionNs&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now create the class &lt;code&gt;pyprop&lt;/code&gt; under &lt;code&gt;src&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import com.jetbrains.python.psi.PyKnownDecoratorProvider;
import org.jetbrains.annotations.Nullable;

public class pyprop implements PyKnownDecoratorProvider {
    @Nullable
    @Override
    public String toKnownDecorator(String decoratorName) {
        return decoratorName.equals(&amp;quot;__property__&amp;quot;) ? &amp;quot;property&amp;quot; : null;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build and it show succeed.&lt;/p&gt;
&lt;h2&gt;Debugging&lt;/h2&gt;
&lt;p&gt;IntelliJ provides good PyCharm plugin debugging. Just hit &amp;quot;debug plugin&amp;quot;, it&#39;ll
bring up a PyCharm instance with the plugin loaded. You can set breakpoints in
plugin implementation to make sure they got hit. If so, you know you get it
right.&lt;/p&gt;
&lt;h2&gt;Deploy&lt;/h2&gt;
&lt;p&gt;Hit &amp;quot;Build&amp;quot; -&amp;gt; &amp;quot;prepare plgin module for deployment&amp;quot;. This will package plugin
in a &amp;quot;jar&amp;quot; file which can be installed by PyCharm locally.&lt;/p&gt;
&lt;p&gt;Finally, the complete plugin is &lt;a href=&quot;https://github.com/kflu/pyprop3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;on
        
      
    
    </summary>
    
    
      <category term="python" scheme="http://kflu.github.io/tags/python/"/>
    
      <category term="java" scheme="http://kflu.github.io/tags/java/"/>
    
      <category term="pycharm" scheme="http://kflu.github.io/tags/pycharm/"/>
    
      <category term="intellij" scheme="http://kflu.github.io/tags/intellij/"/>
    
  </entry>
  
  <entry>
    <title>Python await inside context manager</title>
    <link href="http://kflu.github.io/2019/06/10/2019-06-10-python-await-in-context-manager/"/>
    <id>http://kflu.github.io/2019/06/10/2019-06-10-python-await-in-context-manager/</id>
    <published>2019-06-10T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.673Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Question: for below code, will the context gets closed correctly when
&lt;code&gt;async_task()&lt;/code&gt; finishes?&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; get_context():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; async_task()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; asyncio &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; aio&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Ctx&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__enter__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;enter&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__exit__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self, exc_type, exc_val, exc_tb)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;exit&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; Ctx() &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; ctx:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        print(&lt;span class=&quot;string&quot;&gt;&quot;sleeping&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; aio.sleep(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loop = aio.get_event_loop()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;loop.run_until_complete(main())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This test produces:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;enter
sleeping
exit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;So yes - context manager does work with await operation inside
        
      
    
    </summary>
    
    
      <category term="python" scheme="http://kflu.github.io/tags/python/"/>
    
      <category term="language" scheme="http://kflu.github.io/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>How to write a Scheme interpreter</title>
    <link href="http://kflu.github.io/2018/04/15/2018-04-15-implement-scheme/"/>
    <id>http://kflu.github.io/2018/04/15/2018-04-15-implement-scheme/</id>
    <published>2018-04-15T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.673Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This article describes the design and implementation of the &lt;a href=&quot;https://github.com/Microsoft/schemy&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Schemy&lt;/a&gt; interpreter.
Note that the design and implementation of schemy is heavily inspired by Peter Norvig&#39;s
&lt;a href=&quot;http://norvig.com/lispy2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;tl;dr - here&#39;s a flowchart summarizing an implementation of a scheme interpreter:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;flowchart.png&quot; alt=&quot;flowchart&quot;&gt;&lt;/p&gt;
&lt;h2&gt;S-Expression&lt;/h2&gt;
&lt;p&gt;S-expression is the central construct of a Scheme program. An S-expression can be in the
form of any of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a value, e.g., &lt;code&gt;3.14&lt;/code&gt;, &lt;code&gt;&amp;quot;some text&amp;quot;&lt;/code&gt;, or any other values that your runtime supports
(in the case of schemy, this could be any .NET object we exposed).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a symbol, e.g., &lt;code&gt;count&lt;/code&gt; (a variable), &lt;code&gt;sum&lt;/code&gt; (a function).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a list of s-expressions, e.g., &lt;code&gt;(sum (+ 1 x) y (get-value &amp;quot;total&amp;quot;))&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Formally:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Expression := Symbol | (Expression ...) | Value
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;S-Expression representation&lt;/h3&gt;
&lt;p&gt;In Schemy, we simply represent an expression as an &lt;code&gt;object&lt;/code&gt;, which could be either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;an instance of a &lt;code&gt;Symbol&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a list of objects&lt;/li&gt;
&lt;li&gt;any .NET object&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In a language that supports discriminated union, it could be more elegantly modeled. But
that&#39;s not in the scope of this discussion.&lt;/p&gt;
&lt;p&gt;One may also note that in above representation, #2 and #3 could overlap - a .NET object
(#3) could be a list of objects that could be treated by the interpreter as an expression
(#2). This is as expected, and a powerful feature - in Scheme, a program (s-expression) can be treated as data - and
be processed, transformed! This is called &lt;a href=&quot;https://en.wikipedia.org/wiki/Homoiconicity&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Homoiconicity&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Evaluation&lt;/h2&gt;
&lt;p&gt;Now, S-expression alone is not very useful alone. For example, for a symbol
s-expression &lt;code&gt;count&lt;/code&gt;, it doesn&#39;t make much sense without knowing what information &lt;code&gt;count&lt;/code&gt;
holds. This leads to the concept of &lt;strong&gt;evaluating&lt;/strong&gt; an s-expression.&lt;/p&gt;
&lt;p&gt;S-expression is evaluated in a context, or &amp;quot;environment&amp;quot;, which is nothing but a mapping
from symbols to values. Therefore we could define a &lt;code&gt;EvaluateExpression&lt;/code&gt; function:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eval(expr: Expression, env: Environment) -&amp;gt; object
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;expr&lt;/code&gt; is already a value, simply return it&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;expr&lt;/code&gt; is a symbol, we just look up that symbol in &lt;code&gt;env&lt;/code&gt; and return the value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;expr&lt;/code&gt; is a list of s-expressions - this could be a syntax form evaluation or
function invocation. In the simplest idea, we first evaluate each element expression
of the list recursively, then depending on the meaning of the first value (a function,
or a syntax form indicator, e.g, &lt;code&gt;if&lt;/code&gt;), we handle them differently. Below gives some
examples on how to handle them naively, just for illustration, we&#39;ll cover
optimizations later.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for &lt;code&gt;(if test conseq alt)&lt;/code&gt;, we evaluate &lt;code&gt;test&lt;/code&gt;, if true, we evaluate and return
&lt;code&gt;conseq&lt;/code&gt;, otherwise, &lt;code&gt;alt&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for &lt;code&gt;(define id expr)&lt;/code&gt;, we evaluate &lt;code&gt;expr&lt;/code&gt;, and update the environment to
associate symbol &lt;code&gt;id&lt;/code&gt; to value of &lt;code&gt;expr&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for &lt;code&gt;(func expr1 expr2 expr3)&lt;/code&gt;, this is function invocation. We drill into the
detail in the following section.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Function&lt;/h2&gt;
&lt;p&gt;What is a function and how to invoke a function? A function is made of the following parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a list of parameters - this is a list of symbols which should be bound to some value
at invocation time.&lt;/li&gt;
&lt;li&gt;an environment under which the body expression should be evaluated&lt;/li&gt;
&lt;li&gt;an s-expression representing the body (or implementation) of the function. This
s-expression usually references some symbols whose definitions reside either in the
parameters (defined at invocation time) or in the environment (defined at definition
time - lexical scoping (see below))&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now for a function defined as:&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; f (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (x y) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; x y)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And when we evaluate &lt;code&gt;(f 1 2)&lt;/code&gt;, we first make an environment containing the mapping &lt;code&gt;x=1, y=2&lt;/code&gt;, and evaluate the body &lt;code&gt;(+ x y)&lt;/code&gt; by using the parameters environment.&lt;/p&gt;
&lt;p&gt;But that&#39;s not really what happens. What if the body of &lt;code&gt;f&lt;/code&gt; references symbols which are
not as the parameters, e.g.:&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; x &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; f (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;lambda&lt;/span&gt;&lt;/span&gt; (y) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; x y)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;When invoking &lt;code&gt;(f 3)&lt;/code&gt;, we would bind &lt;code&gt;y=3&lt;/code&gt;. But where to get value for &lt;code&gt;x&lt;/code&gt;? When we
define &lt;code&gt;f&lt;/code&gt;, its environment contains the definition for &lt;code&gt;x&lt;/code&gt;. So when we construct the
parameter environment for the invocation, we &lt;strong&gt;link&lt;/strong&gt; it to an outer environment that contains
&lt;code&gt;x=2&lt;/code&gt;. And the lookup logic for a key in a environment is this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Try to look up the key in current environment&#39;s symbol table. If found, return it.&lt;/li&gt;
&lt;li&gt;If not found in current environment, go to the parent (outer) environment and attemp
lookup there.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There can be many layers of environemnts. If none of the environment contains the mapping
for key, an error is thrown.&lt;/p&gt;
&lt;p&gt;This is a core concept and language feature called &lt;strong&gt;lexical scoping&lt;/strong&gt;, or &lt;strong&gt;closure&lt;/strong&gt;.
Many more advanced language features can be implemented based up on this, including
classes, but we&#39;ll not go into the detail.&lt;/p&gt;
&lt;p&gt;Wrapping up, we now know how to evaluate an s-expression or a function. An interesting
observation we should make now is that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Evaluating an S-expression and a function is quite similar - both requires an expression
and an environment. And we evaluate the expression using the symbol definition in the
environment.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Tail call optimization&lt;/h2&gt;
&lt;p&gt;With the above description, the function evaluation looks like the following in the &lt;code&gt;eval&lt;/code&gt;
function:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;define eval(expr, env):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (is_invocation(expr)): &lt;span class=&quot;comment&quot;&gt;# function call (func x y z ...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (func, args) = (expr[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], expr[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,:])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        func_env = make_env(func.params, args).link(func.env)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        func_body = func.body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; eval(func_body, func_env)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;However, this implementation involves a recursive call (more specifically, a tail call)
into the &lt;code&gt;eval&lt;/code&gt; function. And for implementation language like C# or Python which doesn&#39;t
support tail call optimization, that means if we evaluate a recursive function, the
evaluation itself is a recursion in the implementation language, and is subject to stack
overflow:&lt;/p&gt;
&lt;figure class=&quot;highlight scheme&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;define&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;sum-to&lt;/span&gt; n acc)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;if&lt;/span&gt;&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;=&lt;/span&gt;&lt;/span&gt; n &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) acc &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (&lt;span class=&quot;name&quot;&gt;sum-to&lt;/span&gt; (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;-&lt;/span&gt;&lt;/span&gt; n &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) (&lt;span class=&quot;name&quot;&gt;&lt;span class=&quot;builtin-name&quot;&gt;+&lt;/span&gt;&lt;/span&gt; acc n))))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This would cause &lt;code&gt;eval&lt;/code&gt; to be called each time we encounter &lt;code&gt;(sum-to ...)&lt;/code&gt; and the stack
size is O(n).&lt;/p&gt;
&lt;p&gt;How can we optimize this case? If, when evaluating &lt;code&gt;eval(expr, env)&lt;/code&gt;, we know &lt;code&gt;expr&lt;/code&gt; is a
function call: &lt;code&gt;(f x y ...)&lt;/code&gt;, then instead of calling &lt;code&gt;eval&lt;/code&gt; recursively, we could &lt;strong&gt;swap
out&lt;/strong&gt; &lt;code&gt;expr&lt;/code&gt; with &lt;code&gt;f.body&lt;/code&gt; (which is also an expression), and swap out &lt;code&gt;env&lt;/code&gt; with
&lt;code&gt;make_env(func.params, args).link(env)&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
        
      
    
    </summary>
    
    
      <category term="csharp" scheme="http://kflu.github.io/tags/csharp/"/>
    
      <category term="language" scheme="http://kflu.github.io/tags/language/"/>
    
  </entry>
  
  <entry>
    <title>Setup sshguard and pf to block brute-forcers</title>
    <link href="http://kflu.github.io/2018/02/11/2018-02-11-sshguard/"/>
    <id>http://kflu.github.io/2018/02/11/2018-02-11-sshguard/</id>
    <published>2018-02-11T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.673Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;sshguard is much more reliable and easier to setup than python-based fail2ban.
The &lt;a href=&quot;https://www.sshguard.net/docs/setup/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;manpage&lt;/code&gt;&lt;/a&gt; is very helpful guiding you through setup: &lt;code&gt;man 7 sshguard-setup&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ pkg install sshguard
$ vim /usr/local/etc/sshguard.conf   # conf file is self-explaining

$ cat &amp;gt;&amp;gt; /etc/pf.conf
    table &amp;lt;sshguard&amp;gt; persist
    block in proto tcp from &amp;lt;sshguard&amp;gt;

$ cat &amp;gt;&amp;gt; /etc/rc.conf
    sshguard_enable=&amp;quot;YES&amp;quot;

$ service pf restart
$ service sshguard restart

$ pfctl -t sshguard -T show     # show sshguard table content
$ pfctl -vvsTables              # show all pf tables
$ grep sshguard /var/log/auth   # show sshguard blocking IPs in
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="ssh" scheme="http://kflu.github.io/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>Log-Structured Merge (LSM) Tree and SSTable</title>
    <link href="http://kflu.github.io/2018/02/09/2018-02-09-lsm-tree/"/>
    <id>http://kflu.github.io/2018/02/09/2018-02-09-lsm-tree/</id>
    <published>2018-02-09T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;img src=&quot;lsm.png&quot;
        
      
    
    </summary>
    
    
      <category term="datastructure" scheme="http://kflu.github.io/tags/datastructure/"/>
    
      <category term="storage" scheme="http://kflu.github.io/tags/storage/"/>
    
  </entry>
  
  <entry>
    <title>Nginx as media server</title>
    <link href="http://kflu.github.io/2018/02/04/2018-02-04-nginx-as-media-server/"/>
    <id>http://kflu.github.io/2018/02/04/2018-02-04-nginx-as-media-server/</id>
    <published>2018-02-04T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This is based on this simple &lt;a href=&quot;https://aaronhorler.com/articles/nginx-browser-media-server.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;guid&lt;/a&gt;.  It is a much easier media solution
than &lt;a href=&quot;2018-02-04-freebsd-minidlna.md&quot;&gt;DLNA&lt;/a&gt;. jailed nginx configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen       80;

    location / {
        root   /media;
        autoindex on;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add user &lt;code&gt;www&lt;/code&gt; to the group that can access the media folder:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pw groupmod media -m www
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Preferrably &lt;code&gt;media&lt;/code&gt; group should only have readonly access to &lt;code&gt;media/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now set up &lt;code&gt;pf&lt;/code&gt; in host:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rdr proto tcp from any to any port &amp;lt;external_access_port&amp;gt; -&amp;gt; &amp;lt;jail_ip&amp;gt; port
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>Setting up miniDLNA on FreeBSD</title>
    <link href="http://kflu.github.io/2018/02/04/2018-02-04-freebsd-minidlna/"/>
    <id>http://kflu.github.io/2018/02/04/2018-02-04-freebsd-minidlna/</id>
    <published>2018-02-04T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I&#39;m still having difficulty running it in jail, likely to be related to
how my jail networking is set up (&lt;a href=&quot;https://forums.freebsd.org/threads/13530/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;But I can successfully set it up in the host. Steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;pkg install minidlna&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Configure &lt;code&gt;minidlna.conf&lt;/code&gt;, &lt;code&gt;network_interface=em0&lt;/code&gt; (NOT &lt;code&gt;eth0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;echo &#39;minidlna_enable=&amp;quot;YES&amp;quot;&#39; &amp;gt;&amp;gt; /etc/rc.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service minidlna start&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Some facts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uPNP protocol uses UDP 1900&lt;/li&gt;
&lt;li&gt;miniDLNA uses TCP 8200 for status web page&lt;/li&gt;
&lt;li&gt;miniDLNA on FreeBSD:
&lt;ul&gt;
&lt;li&gt;service is &lt;code&gt;minidlna&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;process is &lt;code&gt;minidlnad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;configuration is &lt;code&gt;/usr/local/etc/minidlna.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;log file (default) is &lt;code&gt;/var/log/minidlna.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;db directory (default) is &lt;code&gt;/var/db/minidlna/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minidlnad -R&lt;/code&gt; to rescan&lt;/li&gt;
&lt;li&gt;VLC can be used as DLNA client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a jail, I tried config &lt;code&gt;pf&lt;/code&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rdr proto tcp from any to any port 8200 -&amp;gt; &amp;lt;jail_IP&amp;gt;
rdr proto udp from any to any port 1900 -&amp;gt; &amp;lt;jail_IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I can access http://&amp;lt;jail_IP&amp;gt;:8200 from LAN. I can also talk to
udp://&amp;lt;jail_IP&amp;gt;:1900 from LAN using &lt;code&gt;ncat&lt;/code&gt;. But VLC does not recognize the
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>Mounting NTFS on FreeBSD</title>
    <link href="http://kflu.github.io/2018/02/03/2018-02-03-freebsd-ntfs/"/>
    <id>http://kflu.github.io/2018/02/03/2018-02-03-freebsd-ntfs/</id>
    <published>2018-02-03T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://forums.freebsd.org/threads/62888/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This post&lt;/a&gt; helped me figure all this out.&lt;/p&gt;
&lt;p&gt;I need to access a USB hard drive in NTFS on FreeBSD. In order to mount NTFS partitions, FreeBSD
uses &lt;code&gt;ntfs-3g&lt;/code&gt; FUSE module.&lt;/p&gt;
&lt;p&gt;First, make sure the fuse kernel module is loaded. This can be done adhoc with
&lt;code&gt;kldload fuse&lt;/code&gt;. But to have it loaded at boot time, add the following line in
&lt;code&gt;/boot/loader.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fuse_load=&amp;quot;YES&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, install &lt;code&gt;fusefs-ntfs&lt;/code&gt; package:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pkg install fusefs-ntfs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the OS supports NTFS, you can plugin the device. Use &lt;code&gt;dmesg&lt;/code&gt; to figure out the device ID (&lt;code&gt;d0&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;da0 at umass-sim0 bus 0 scbus4 target 0 lun 0
da0: &amp;lt;WD Ext HDD 1021 2021&amp;gt; Fixed Direct Access SPC-2 SCSI device
da0: Serial Number 574D415A4135333836313839
da0: 40.000MB/s transfers
da0: 1907727MB (3907024896 512 byte sectors)
da0: quirks=0x2&amp;lt;NO_6_BYTE&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use &lt;code&gt;gpart&lt;/code&gt; to show its partitions:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; ~ gpart show /dev/da0
=&amp;gt;        63  3907024833  da0  MBR  (1.8T)
          63        1985       - free -  (993K)
        2048  3907022848    1  ntfs  (1.8T)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also find the device node for the partition under &lt;code&gt;/dev&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;➜  ~ ls -l /dev/da0*
crw-r-----  1 root  operator  0x72 Feb  3 12:07 /dev/da0
crw-r-----  1 root  operator  0x73 Feb  3 12:07 /dev/da0s1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are ready to mount it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ntfs-3g /dev/da0s1 /mnt -o ro
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-o ro&lt;/code&gt; makes sure it&#39;s mounted read-only. You can remove it to mount it read-write.&lt;/p&gt;
&lt;p&gt;Note that I tried to use &lt;code&gt;mount&lt;/code&gt; hoping there is a consolidated command for mounting
different kinds of file systems. But it wasn&#39;t successful:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;➜  ~ mount -t ntfs-3g /dev/da0s1 /mnt
mount: /dev/da0s1: Operation not supported by device

➜  ~ mount -t ntfs /dev/da0s1 /mnt
mount: /dev/da0s1: Operation not supported by device
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also note that usually mounting a partition can only be done by &lt;code&gt;root&lt;/code&gt;, or
using &lt;code&gt;sudo&lt;/code&gt;, which result in the mounted path is owned by &lt;code&gt;root:wheel&lt;/code&gt;.
However you can mount the partition as a specified user and group using
&lt;code&gt;uid&lt;/code&gt; and &lt;code&gt;gid&lt;/code&gt; options.&lt;/p&gt;
&lt;p&gt;First, find out the user and group IDs of the preferred user:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# id john
uid=1001(john) gid=1001(john) groups=1001(john),0(wheel)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run following command to mount:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ntfs-3g /dev/da0s1 /mnt -o ro,uid=1001,gid=1001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now &lt;code&gt;/mnt&lt;/code&gt; is owned by
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>.NET stack size &amp; recursion</title>
    <link href="http://kflu.github.io/2018/01/17/2018-01-17-net-stacksize-recursion/"/>
    <id>http://kflu.github.io/2018/01/17/2018-01-17-net-stacksize-recursion/</id>
    <published>2018-01-17T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;According to &lt;a href=&quot;https://stackoverflow.com/a/28658130/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;, the Windows x64 program should have default stack size
4MB. So I wrote a program to see how many levels of recursion can a typical
function support before getting stack overflow.&lt;/p&gt;
&lt;p&gt;Here&#39;s the program:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;class Program
{
    static void Main(string[] args)
    {
        Rec(0);
    }

    static void Rec(int x)
    {
        int y0 = x;
        int y1 = y0 + x;
        int y2 = y1 + x;
        int y3 = y2 + x;
        int y4 = y3 + x;
        int y5 = y4 + x;
        int y6 = y5 + x;
        int y7 = y6 + x;
        int y8 = y7 + x;
        int y9 = y8 + x;
        int y10 = y9 + x;
        int y11 = y10 + x;
        int y12 = y11 + x;
        int y13 = y12 + x;
        int y14 = y13 + x;
        int y15 = y14 + x;
        int y16 = y15 + x;
        int y17 = y16 + x;
        int y18 = y17 + x;
        int y19 = y18 + x;
        int y20 = y19 + x;

        Console.WriteLine($&amp;quot;depth: {x}, local size: {22} &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; {y20}&amp;quot;);
        Rec(x + 1);
        Console.WriteLine($&amp;quot;depth: {x}, local size: {22} &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; {y20}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I configured it to build in &lt;code&gt;release&lt;/code&gt; and &lt;code&gt;x64&lt;/code&gt;. The output is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;depth: 17170, local size: 2 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 17170
depth: 16125, local size: 10 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 145125
depth: 16101, local size: 22 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; 338121
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That looks like the stack size is roughly 600KB. I took a &lt;code&gt;dumpbin&lt;/code&gt;, which
gives me below output. &lt;code&gt;stack reverse&lt;/code&gt; is 100000. 100KB? WTF? But basically,
&lt;strong&gt;a function with ~20 local variables + arguments can recurse 16,000 times.&lt;/strong&gt;
Not a lot.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PE signature found

File Type: EXECUTABLE IMAGE

FILE HEADER VALUES
             14C machine (x86)
               3 number of sections
        5A5F9A97 time date stamp Wed Jan 17 10:48:55 2018
               0 file pointer to symbol table
               0 number of symbols
              E0 size of optional header
              22 characteristics
                   Executable
                   Application can handle large (&amp;gt;2GB) addresses

OPTIONAL HEADER VALUES
             10B magic # (PE32)
           48.00 linker version
             A00 size of code
             800 size of initialized data
               0 size of uninitialized data
            293E entry point (0040293E)
            2000 base of code
            4000 base of data
          400000 image base (00400000 to 00407FFF)
            2000 section alignment
             200 file alignment
            4.00 operating system version
            0.00 image version
            6.00 subsystem version
               0 Win32 version
            8000 size of image
             200 size of headers
               0 checksum
               3 subsystem (Windows CUI)
            8560 DLL characteristics
                   High Entropy Virtual Addresses
                   Dynamic base
                   NX compatible
                   No structured exception handler
                   Terminal Server Aware
          100000 size of stack reserve
            1000 size of stack commit
          100000 size of heap reserve
            1000 size of heap commit
               0 loader flags
              10 number of directories
               0 [       0] RVA [size] of Export Directory
            28EC [      4F] RVA [size] of Import Directory
            4000 [     5BC] RVA [size] of Resource Directory
               0 [       0] RVA [size] of Exception Directory
               0 [       0] RVA [size] of Certificates Directory
            6000 [       C] RVA [size] of Base Relocation Directory
            27B4 [      1C] RVA [size] of Debug Directory
               0 [       0] RVA [size] of Architecture Directory
               0 [       0] RVA [size] of Global Pointer Directory
               0 [       0] RVA [size] of Thread Storage Directory
               0 [       0] RVA [size] of Load Configuration Directory
               0 [       0] RVA [size] of Bound Import Directory
            2000 [       8] RVA [size] of Import Address Table Directory
               0 [       0] RVA [size] of Delay Import Directory
            2008 [      48] RVA [size] of COM Descriptor Directory
               0 [       0] RVA [size] of Reserved Directory


SECTION HEADER #1
   .text name
     944 virtual size
    2000 virtual address (00402000 to 00402943)
     A00 size of raw data
     200 file pointer to raw data (00000200 to 00000BFF)
       0 file pointer to relocation table
       0 file pointer to line numbers
       0 number of relocations
       0 number of line numbers
60000020 flags
         Code
         Execute Read

RAW DATA #1

  Debug Directories

        Time Type        Size      RVA  Pointer
    -------- ------- -------- -------- --------
    5A5F9A97 cv           11C 000027D0      9D0    Format: RSDS, {8C1B2824-CBBA-483B-B4E1-18BBA4A2FEAC}, 1, c:&#92;users&#92;ConsoleApp2&#92;ConsoleApp2&#92;obj&#92;Release&#92;ConsoleApp2.pdb

  clr Header:

              48 cb
            2.05 runtime version
            20E4 [     6D0] RVA [size] of MetaData Directory
           20003 flags
                   IL Only
                   32-Bit Required
                   32-Bit Preferred
         6000001 entry point token
               0 [       0] RVA [size] of Resources Directory
               0 [       0] RVA [size] of StrongNameSignature Directory
               0 [       0] RVA [size] of CodeManagerTable Directory
               0 [       0] RVA [size] of VTableFixups Directory
               0 [       0] RVA [size] of ExportAddressTableJumps Directory
               0 [       0] RVA [size] of ManagedNativeHeader Directory


  Section contains the following imports:

    mscoree.dll
                402000 Import Address Table
                402914 Import Name Table
                     0 time date stamp
                     0 Index of first forwarder reference

                    0 _CorExeMain

SECTION HEADER #2
   .rsrc name
     5BC virtual size
    4000 virtual address (00404000 to 004045BB)
     600 size of raw data
     C00 file pointer to raw data (00000C00 to 000011FF)
       0 file pointer to relocation table
       0 file pointer to line numbers
       0 number of relocations
       0 number of line numbers
40000040 flags
         Initialized Data
         Read Only

RAW DATA #2

SECTION HEADER #3
  .reloc name
       C virtual size
    6000 virtual address (00406000 to 0040600B)
     200 size of raw data
    1200 file pointer to raw data (00001200 to 000013FF)
       0 file pointer to relocation table
       0 file pointer to line numbers
       0 number of relocations
       0 number of line numbers
42000040 flags
         Initialized Data
         Discardable
         Read Only

RAW DATA #3

BASE RELOCATIONS #3
    2000 RVA,        C SizeOfBlock
     940  HIGHLOW            00402000
       0  ABS                        

  Summary

        2000 .reloc
        2000 .rsrc
        2000
        
      
    
    </summary>
    
    
      <category term="c#" scheme="http://kflu.github.io/tags/c/"/>
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term=".net" scheme="http://kflu.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>Video Editing Tips</title>
    <link href="http://kflu.github.io/2017/12/25/2017-12-25-video-editing-tips/"/>
    <id>http://kflu.github.io/2017/12/25/2017-12-25-video-editing-tips/</id>
    <published>2017-12-25T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.shotcut.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Shortcut&lt;/a&gt; for video editing. Awesome tool. Responsive and has most basic features I need. It crashes occationally, so rebemeber to save project whenever you can.&lt;/li&gt;
&lt;li&gt;Gimp for image processing (it can read HEIC images from iOS)&lt;/li&gt;
&lt;li&gt;OpenShot is buggy (2.4) and unresponsive. Nearly unusable.&lt;/li&gt;
&lt;li&gt;Blender has a video editor, but it&#39;s not its primary
        
      
    
    </summary>
    
    
      <category term="misc" scheme="http://kflu.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>Setup PostgreSQL on FreeBSD Jail</title>
    <link href="http://kflu.github.io/2017/11/28/2017-11-28-postgresql-freebsd/"/>
    <id>http://kflu.github.io/2017/11/28/2017-11-28-postgresql-freebsd/</id>
    <published>2017-11-28T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Install postgres:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pkg install postgresql10-server-10.1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enable service:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sysrc postgresql_enable=&amp;quot;YES&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If postgreSQL is installed within a jail, enable SysV IPC for that Jail
(this &lt;a href=&quot;http://www.clausconrad.com/blog/running-postgresql-9-3-in-an-ezjail&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;echo &#39;security.jail.sysvipc_allowed=1&#39; &amp;gt;&amp;gt; /etc/sysctl.conf
echo &#39;jail_sysvipc_allow=&amp;quot;YES&amp;quot;&#39; &amp;gt;&amp;gt; /etc/rc.conf 

# in /usr/local/etc/ezjail/JAILNAME, update:
# export jail_JAILNAME_parameters=”allow.sysvipc=1″

# restart jail
ezjail-admin restart JAILNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initialize DB (I don&#39;t know what this is). This would &lt;em&gt;fail&lt;/em&gt; if postgresQL
is installed in a jail and SysV IPC is not allowed for the jail.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service postgresql initdb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now start the service:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service postgresql start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There was a failure regarding SysV IPC during &lt;code&gt;initdb&lt;/code&gt;, it looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~ service postgresql initdb
The files belonging to this database system will be owned by user &amp;quot;postgres&amp;quot;.
This user must also own the server process.

The database cluster will be initialized with locale &amp;quot;C&amp;quot;.
The default text search configuration will be set to &amp;quot;english&amp;quot;.

Data page checksums are disabled.

creating directory /var/db/postgres/data10 ... ok
creating subdirectories ... ok
selecting default max_connections ... 10
selecting default shared_buffers ... 400kB
selecting dynamic shared memory implementation ... posix
creating configuration files ... ok
running bootstrap script ... 2017-11-28 18:23:03.857 UTC [72052] FATAL:  could not create shared memory segment: Function not implemented
2017-11-28 18:23:03.857 UTC [72052] DETAIL:  Failed system call was shmget(key=1, size=48, 03600).
child process exited with exit code 1
initdb: removing data directory &amp;quot;/var/db/postgres/data10&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Create users and databases&lt;/h2&gt;
&lt;p&gt;You would need to create a PostgreSQL &lt;em&gt;user&lt;/em&gt; or &lt;em&gt;role&lt;/em&gt; that matches the name
of the primary system account that will use the database. For example, I
would use it in a jail, with the root account. So I need to create a PSQL
role matching that account:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; su postgres         # switch to account `postgres`
&amp;gt; createuser root
&amp;gt; createdb test_db
&amp;gt; exit                # quit being `postgres`

# now as `root`:
&amp;gt; psql test_db
psql (10.1)
Type &amp;quot;help&amp;quot; for
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="postgresql" scheme="http://kflu.github.io/tags/postgresql/"/>
    
  </entry>
  
  <entry>
    <title>Use SmartCard over Remote Desktop Session</title>
    <link href="http://kflu.github.io/2017/10/20/2017-10-20-smartcard-remotedesktop/"/>
    <id>http://kflu.github.io/2017/10/20/2017-10-20-smartcard-remotedesktop/</id>
    <published>2017-10-20T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I see this issue when trying to use smart card in remote desktop session:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The smart card requires drivers that are not present on this system&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The fix is documented &lt;a href=&quot;https://stackoverflow.com/a/22975986/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt; - you need to install smart card (not reader) driver on the remote machine.&lt;/p&gt;
&lt;p&gt;My smart card is a &amp;quot;Gemalto IDPrime .Net&amp;quot;. So I grab the latest from &lt;a href=&quot;http://www.catalog.update.microsoft.com/Search.aspx?q=.NET%20Gemalto&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. I grabbed both:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gemalto - Other hardware, Smart Cards - Gemalto IDPrime .NET Smart Card (win7, server 2008)&lt;/li&gt;
&lt;li&gt;Gemalto - Input - Gemalto IDPrime .NET Smart Card (win server 2008)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are cab files. Unzip them, right click the &lt;code&gt;.inf&lt;/code&gt; file and select &amp;quot;install&amp;quot;.&lt;/p&gt;
&lt;p&gt;It worked for me after
        
      
    
    </summary>
    
    
      <category term="windows" scheme="http://kflu.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Fixing Domain Trust Relationship Failed Issue</title>
    <link href="http://kflu.github.io/2017/10/19/2017-10-19-fixing-domain-trust-relationship/"/>
    <id>http://kflu.github.io/2017/10/19/2017-10-19-fixing-domain-trust-relationship/</id>
    <published>2017-10-19T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;There&#39;s a Windows issue made me performing a System Restore to a 1.5 month
old restoration point. But that leads to the below issue when I attempted to
log in with my latest domain credential:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the trust relationship between this workstation and the primary domain failed&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;To fix this issue, you must first be able to log in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you have a local administrator account you type in &lt;code&gt;.&#92;administrator&lt;/code&gt;
and the password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you don&#39;t have local admin account enabled or don&#39;t remember the
password. You can still log on by using the old domain credential when
the restoration point was created. To use this credential, first unplug
any network connection (Ethernet &amp;amp; Wifi) and restart.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you&#39;re in, open a elevated PowerShell session and do the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Reset-ComputerMachinePassword -Server &amp;lt;domain server&amp;gt; -Credential (get-credential)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;get-credential&lt;/code&gt; prompt for a credential, use your &lt;strong&gt;latest&lt;/strong&gt; domain
credential. You should be good now.&lt;/p&gt;
&lt;p&gt;Lastly, always activate your local admin account and remember the
password!!!&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://community.spiceworks.com/how_to/108912-fix-the-trust-relationship-between-this-workstation-and-the-primary-domain-failed&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://implbits.com/active-directory/2012/04/13/dont-rejoin-to-fix.html&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="windows" scheme="http://kflu.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Setting up latex on Windows</title>
    <link href="http://kflu.github.io/2017/08/03/2017-08-03-latex-windows/"/>
    <id>http://kflu.github.io/2017/08/03/2017-08-03-latex-windows/</id>
    <published>2017-08-03T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Two major LaTex distribution - TexLive and MikTex. The former is
crossplatform and &amp;quot;official&amp;quot; that it comes from TUG. However, its Windows
support really sucks it&#39;s hard to even get the basic installation work for a
power user like me. Instead, I found MikTex really user friendly to work
with, maybe because it&#39;s built for Windows.&lt;/p&gt;
&lt;p&gt;Download the &lt;a href=&quot;https://miktex.org/portable&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;portable version&lt;/a&gt;. Unzip to &lt;code&gt;C:&#92;miktex&lt;/code&gt;. Follow the
instruction there to use it.&lt;/p&gt;
&lt;p&gt;Instead, you can also add the following to &lt;code&gt;PATH&lt;/code&gt; and work in that command
line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS&amp;gt; $env:path += &#39;;C:&#92;miktex&#92;texmfs&#92;install&#92;miktex&#92;bin&#92;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MikTex comes with an IDE called TexWorks so that&#39;s nice.&lt;/p&gt;
&lt;h1&gt;Working with Latex&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.maths.tcd.ie/~dwilkins/LaTeXPrimer/GSWLaTeX.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Getting started with LaTex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A minimal working LaTex document:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#92;documentclass{article}
&#92;title{Hello World!}

&#92;begin{document}

&#92;maketitle

&#92;section{Section 1}

Hello
        
      
    
    </summary>
    
    
      <category term="latex" scheme="http://kflu.github.io/tags/latex/"/>
    
      <category term="windows" scheme="http://kflu.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>F# works on FreeBSD (jailed)</title>
    <link href="http://kflu.github.io/2017/08/03/2017-08-03-fsharp-freebsd/"/>
    <id>http://kflu.github.io/2017/08/03/2017-08-03-fsharp-freebsd/</id>
    <published>2017-08-03T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.671Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Mono-based F# works on FreeBSD in a jail. There isn&#39;t
a port for .NET core yet. So I don&#39;t want to try it yet.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pkg install mono-4.8.1.0_1
pkg install fsharp-4.1.18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here&#39;s a summary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;run with &lt;code&gt;mono &amp;lt;app.exe&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;build with &lt;code&gt;xbuild&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nuget&lt;/code&gt; and &lt;code&gt;paket&lt;/code&gt; works after &lt;code&gt;mozroot --import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;there isn&#39;t an official port for .NET core yet&lt;/li&gt;
&lt;li&gt;there isn&#39;t an official port for vscode yet&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Building projects and running executables&lt;/h1&gt;
&lt;p&gt;Use &lt;code&gt;xbuild&lt;/code&gt; to build. Use &lt;code&gt;mono &amp;lt;app.exe&amp;gt;&lt;/code&gt; to run.&lt;/p&gt;
&lt;h1&gt;Package Management&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;nuget&lt;/code&gt; and &lt;code&gt;packet&lt;/code&gt; &lt;em&gt;binaries&lt;/em&gt; work directly.&lt;/p&gt;
&lt;h2&gt;Certificate Issue&lt;/h2&gt;
&lt;p&gt;However you need to import root certificates to avoid encryption/decryption
error while downloading from SSL enabled sites. See &lt;a href=&quot;https://github.com/fsharp/fsharp/issues/616#issuecomment-320170277&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this issue&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mozroot --import  # and type &amp;quot;yes&amp;quot; MANY MANY times
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Nuget&lt;/h2&gt;
&lt;p&gt;For &lt;code&gt;nuget&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
mono ./nuget install NewtonSoft.Json
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Paket&lt;/h2&gt;
&lt;p&gt;For &lt;code&gt;paket&lt;/code&gt;, follow &lt;a href=&quot;https://fsprojects.github.io/Paket/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;paket guide&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd &amp;lt;repo&amp;gt;/.paket
wget https://github.com/fsprojects/Paket/releases/download/3.31.0/paket.bootstrapper.exe
mv paket.bootstrapper.exe paket.exe  # enable &amp;quot;magic&amp;quot; mode
cd ..
mono ./.paket/paket.exe install      # install all dependencies
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Package Information&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;➜  ~ pkg info mono
mono-4.8.1.0_1
Name           : mono
Version        : 4.8.1.0_1
Installed on   : Fri Aug  4 05:53:48 2017 UTC
Origin         : lang/mono
Architecture   : FreeBSD:11:amd64
Prefix         : /usr/local
Categories     : lang
Licenses       : MIT
Maintainer     : mono@FreeBSD.org
WWW            : http://www.mono-project.com/
Comment        : Open source implementation of .NET Development Framework
Options        :
        ACCEPTANCE_TESTS: off
Shared Libs required:
        libinotify.so.0
Shared Libs provided:
        libmonosgen-2.0.so.1
        libmonoboehm-2.0.so.1
        libikvm-native.so
        libmono-profiler-iomap.so.0
        libmono-profiler-aot.so.0
        libmono-profiler-log.so.0
        libMonoSupportW.so
        libMonoPosixHelper.so
Annotations    :
        cpe            : cpe:2.3:a:mono:mono:4.8.1.0:::::freebsd11:x64:1
        repo_type      : binary
        repository     : FreeBSD
Flat size      : 183MiB
Description    :
Mono is an open source implementation of .NET Development Framework. Its
objective is to enable UNIX developers to build and deploy cross-platform
.NET Applications. The project implements various technologies developed by
Microsoft that have now been submitted to the ECMA for standardization.

Mono provides the necessary software to develop and run .NET client and
server applications on BSD, Linux, Solaris, Mac OS X, Windows, and Unix.

WWW: http://www.mono-project.com/

➜  ~ pkg info fsharp
fsharp-4.1.18
Name           : fsharp
Version        : 4.1.18
Installed on   : Fri Aug  4 05:56:19 2017 UTC
Origin         : lang/fsharp
Architecture   : FreeBSD:11:*
Prefix         : /usr/local
Categories     : lang
Licenses       : APACHE20
Maintainer     : mono@FreeBSD.org
WWW            : http://fsharp.org/
Comment        : Functional and object-oriented language for the .NET platform
Annotations    :
        repo_type      : binary
        repository     : FreeBSD
Flat size      : 92.3MiB
Description    :
F# is an open-source, strongly typed, multi-paradigm programming
language encompassing functional, imperative and object-oriented
programming techniques.  F# is most often used as a cross-platform CLI
language, but can also be used to generate JavaScript and GPU code.

F# is developed by The F# Software Foundation and Microsoft.  An open
source, cross-platform edition of F# is available from the F# Software
Foundation.  F# is also a fully supported language in Visual Studio.
Other tools supporting F# development include Mono, MonoDevelop,
SharpDevelop and the WebSharper tools for JavaScript and HTML5 web
programming.

F# originated as a variant of ML and has been influenced by OCaml, C#,
Python, Haskell, Scala and Erlang.

WWW:
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="f#" scheme="http://kflu.github.io/tags/f/"/>
    
  </entry>
  
  <entry>
    <title>WinDBG Quick Reference</title>
    <link href="http://kflu.github.io/2017/07/30/2017-07-30-windbg/"/>
    <id>http://kflu.github.io/2017/07/30/2017-07-30-windbg/</id>
    <published>2017-07-30T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.670Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SOS (.NET) debugging document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/controlling-exceptions-and-events&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Controlling Exceptions and Events&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Tasks&lt;/h1&gt;
&lt;p&gt;Debuggee control:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;go: &lt;code&gt;g&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;detach: &lt;code&gt;.detach&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;break: press &lt;code&gt;&amp;lt;ctrl-break/pause&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Load sos extension&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.loadby sos clr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For details about loading SOS, refer &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugging-managed-code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt; and the following section on
failure to load SOS.&lt;/p&gt;
&lt;p&gt;List CLR stack&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!CLRStack
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inspect objects (&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sos&lt;/a&gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;!DumpHeap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!DumpObj&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!DumpArray&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;!DumpClass&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Break on (first chance) exceptions. See &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/controlling-exceptions-and-events&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sxe doc&lt;/a&gt;, &amp;quot;Event Definitions and
Defaults&amp;quot;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sxe &amp;lt;eh|clr|...&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Inspect an exception (&lt;a href=&quot;https://docs.microsoft.com/en-us/dotnet/framework/tools/sos-dll-sos-debugging-extension&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sos&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!PrintException &amp;lt;exception_address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/-dump--create-dump-file-&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Collect a mini dump&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.dump /mA
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Symbol debugging:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;!sym noisy
.reload
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Failure Loading SOS&lt;/h1&gt;
&lt;p&gt;Sometimes loading SOS can fail when debugging dumps:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0:009&amp;gt; .cordll -ve -u -l
CLRDLL: C:&#92;Windows&#92;Microsoft.NET&#92;Framework64&#92;v4.0.30319&#92;mscordacwks.dll:4.7.2115.00 f:8
doesn&#39;t match desired version 4.7.2117.00 f:8
CLRDLL: Unable to find mscordacwks_AMD64_AMD64_4.7.2117.00.dll by mscorwks search
CLRDLL: Unable to find &#39;mscordacwks_AMD64_AMD64_4.7.2117.00.dll&#39; on the path
CLRDLL: Unable to find clr.dll by search
Cannot Automatically load SOS
CLRDLL: ERROR: Unable to load DLL mscordacwks_AMD64_AMD64_4.7.2117.00.dll, Win32 error 0n2
CLRDLL: Consider using &amp;quot;.cordll -lp &amp;lt;path&amp;gt;&amp;quot; command to specify .NET runtime directory.
CLR DLL status: ERROR: Unable to load DLL mscordacwks_AMD64_AMD64_4.7.2117.00.dll, Win32 error 0n2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s because the dump is collected from a machine that has different CLR
version. The best way to solve this is to copy the following DLLs from the
target machine and use them to load SOS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C:&#92;Windows&#92;Microsoft.NET&#92;Framework&#92;v4.0.30319&#92;clr.dll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:&#92;Windows&#92;Microsoft.NET&#92;Framework&#92;v4.0.30319&#92;mscordacwks.dll&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C:&#92;Windows&#92;Microsoft.NET&#92;Framework&#92;v4.0.30319&#92;sos.dll&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Put them under &lt;code&gt;d:&#92;share&lt;/code&gt;, and in WinDbg load with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0:009&amp;gt; .cordll -lp d:&#92;share
CLRDLL: Loaded DLL d:&#92;share&#92;mscordacwks.dll
Automatically loaded SOS Extension
CLR DLL status: Loaded DLL d:&#92;share&#92;mscordacwks.dll
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are some useful doc:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/debugging-managed-code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;loading SOS&lt;/a&gt;: diagnostic loading SOS&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/10194213/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;loading SOS for different CLR version (SO)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- ====================== REFERENCES ========================= --&gt;
&lt;!-- vim: set tw=76 spell:
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="debugging" scheme="http://kflu.github.io/tags/debugging/"/>
    
      <category term="windbg" scheme="http://kflu.github.io/tags/windbg/"/>
    
  </entry>
  
  <entry>
    <title>SSH Reverse Port Forwarding With Untrusted Remote Host</title>
    <link href="http://kflu.github.io/2017/07/30/2017-07-30-tunnel-only-ssh-user/"/>
    <id>http://kflu.github.io/2017/07/30/2017-07-30-tunnel-only-ssh-user/</id>
    <published>2017-07-30T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.670Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;tl;dr - safety is provided by setting up a non-priviledged tunnel only user&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Discussions
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://forums.freebsd.org/threads/61682/#post-355591&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;My post on FreeBSD forum: Best way to allow ssh connection just for
reverse port forwarding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://serverfault.com/a/56581/309638&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ssh tunneling only access (SO answer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://serverfault.com/a/119381/309638&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sshd restriction per user basis (SO answer)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://therub.org/2011/08/24/minimal-ssh-chroot-in-freebsd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Minimal SSH Chroot in FreeBSD&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;man pages
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?sshd_config(5)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sshd_config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=sshd&amp;amp;sektion=8&amp;amp;apropos=0&amp;amp;manpath=FreeBSD+11.1-RELEASE+and+Ports#AUTHORIZED_KEYS%09FILE_FORMAT&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;authorized_keys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://unix.stackexchange.com/q/46235/38968&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSH reverse port forwarding explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.harding.motd.ca/autossh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;autossh - Automatically restart SSH sessions and tunnels&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://therub.org/2011/08/24/minimal-ssh-chroot-in-freebsd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the use of &lt;code&gt;nologin&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Problem&lt;/h1&gt;
&lt;p&gt;Here&#39;s my scenario:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;diagram.png&quot; alt=&quot;diagram&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I have a home server (HostB) which is completely within my control.&lt;/li&gt;
&lt;li&gt;I have an off-site machine that can potentially be physically accessed by
other people I don&#39;t trust (HostA).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I want to do off-site backups (encrypted of course) via &lt;code&gt;duplicity&lt;/code&gt; from
HostB to HostA. Because HostA is behind firewall, it can&#39;t provide direct
ssh access. So I&#39;ll have to do a &lt;a href=&quot;https://unix.stackexchange.com/q/46235/38968&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;reverse port
forwarding&lt;/a&gt; to expose HostA:22.  In order to
reliably do the reverse port forwarding without password, I will add HostA&#39;s
public key to HostB&#39;s authorized_keys file. Now that can potentially be bad,
because the pub key could be stolen.&lt;/p&gt;
&lt;p&gt;However, since the ssh login from HostA -&amp;gt; HostB is &lt;strong&gt;only&lt;/strong&gt; to establish
the port forwarding tunnel so HostB can access HostA:22, is there any good
way I can restrict the HostA -&amp;gt; HostB ssh connection to &lt;strong&gt;only&lt;/strong&gt; provide the
tunnel and nothing else?&lt;/p&gt;
&lt;h1&gt;Setting Up User For Tunnel Only&lt;/h1&gt;
&lt;p&gt;After &lt;a href=&quot;https://forums.freebsd.org/threads/61682/#post-355591&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;discussing online&lt;/a&gt;, I&#39;m aware of the following
solution:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a non-priviledged user without login shell
(&lt;a href=&quot;https://therub.org/2011/08/24/minimal-ssh-chroot-in-freebsd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nologin&lt;/a&gt;). Set user home to &lt;code&gt;/var/...&lt;/code&gt; and make it
readonly (suggested by obsigna &amp;amp; Jov):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pw useradd -n tunnel -c &amp;quot;SSH Tunnel User&amp;quot; -u 9999 -d /var/tunnel -s /usr/sbin/nologin
mkdir -m 0500 -p /var/tunnel/.ssh
chown -R tunnel:nogroup /var/tunnel
chflags -R schg /var/tunnel
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do a &lt;code&gt;ChrootDirectory&lt;/code&gt; using &lt;code&gt;MATCH USER&lt;/code&gt; in
&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?sshd_config(5)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;sshd_config&lt;/code&gt;&lt;/a&gt; for extra safety. See &lt;a href=&quot;https://therub.org/2011/08/24/minimal-ssh-chroot-in-freebsd/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this
post&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=sshd&amp;amp;sektion=8&amp;amp;apropos=0&amp;amp;manpath=FreeBSD+11.1-RELEASE+and+Ports#AUTHORIZED_KEYS%09FILE_FORMAT&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;authorized_keys&lt;/a&gt; to further restrict the public key:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;command=&amp;quot;command&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;no-X11-forwarding&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;permitopen=&amp;quot;host:port&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Tricks &amp;amp; Tools for Port Forwarding&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.harding.motd.ca/autossh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;autossh&lt;/a&gt; can be used to create reliable tunnel&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- vim: set tw=75 spell:
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="ssh" scheme="http://kflu.github.io/tags/ssh/"/>
    
      <category term="safety" scheme="http://kflu.github.io/tags/safety/"/>
    
  </entry>
  
  <entry>
    <title>Msys2 - Cleanest Unix Subsystem on Windows</title>
    <link href="http://kflu.github.io/2017/07/18/2017-07-18-msys2/"/>
    <id>http://kflu.github.io/2017/07/18/2017-07-18-msys2/</id>
    <published>2017-07-18T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.670Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;msys2 is the easiest and cleanest unix sub-system on Windows. It&#39;s based on
Cygwin. It&#39;s tools are built on Mingw64. It provides build toolchain for
Mingw64. It provides a nice package manager the &lt;code&gt;pacman&lt;/code&gt; from ArchLinux.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/msys2/msys2/wiki/MSYS2-installation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/msys2/msys2/wiki/Using-packages&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Using packages&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;search package &lt;code&gt;pacman -Ss &amp;lt;partial_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;install package &lt;code&gt;pacman -S &amp;lt;pkg_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With my experience so far, it makes an ideal Window utility toolbox for
administration tasks. It&#39;s worth to be a default installation for every
Windows machine.&lt;/p&gt;
&lt;h3&gt;Setting Home Directory to &lt;code&gt;USERPROFILE&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;2018-8-30 note: it seems using msys2.exe with the original nsswitch.conf
is enough, which has &lt;code&gt;db_home windows cygwin desc&lt;/code&gt;. I guess the problem was
it didn&#39;t work with domain joined computer. If you&#39;re not domain joined, this
section isn&#39;t needed.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Do this through &lt;code&gt;etc/nsswitch.conf&lt;/code&gt;. Set:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;db_home: windows /c/Users/%U
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;/c/Users/%U&lt;/code&gt; is to &lt;a href=&quot;https://github.com/Alexpux/MSYS2-packages/issues/1167#issuecomment-366485916&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;workaround an issue&lt;/a&gt; that &lt;code&gt;db_home: windows&lt;/code&gt; has no effect on my domain joined machine. For detail, refer to
&lt;a href=&quot;https://cygwin.com/cygwin-ug-net/ntsec.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cygwin nsswitch.conf doc&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Making portable applications&lt;/h3&gt;
&lt;p&gt;Note that &lt;code&gt;nsswitch.conf&lt;/code&gt; is read relative to the executable path. So to
make a portable executable be aware of &lt;code&gt;nsswitch.conf&lt;/code&gt; settings, have a
structure like below. If you invoke &lt;code&gt;ssh.exe&lt;/code&gt; from &lt;em&gt;anywhere&lt;/em&gt;, the
&lt;code&gt;nsswitch.conf&lt;/code&gt; is respected.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh.bat   # wraps ssh.exe
msys/
    usr/
        bin/
            ssh.exe
            &amp;lt;dependency DLLs&amp;gt;
    etc/
        nsswitch.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Shell Initialization&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;2018-8-30 note: it seems using msys2.exe is enough - but don&#39;t use the &lt;code&gt;.bat&lt;/code&gt; shortcuts
from the start menu - for some reason they don&#39;t respect user &lt;code&gt;rc&lt;/code&gt; scripts&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Depending on the &amp;quot;launcher&amp;quot; you use. Nowadays, it has &lt;code&gt;msys2.exe&lt;/code&gt; which takes &lt;code&gt;msys2.ini&lt;/code&gt;
containing env vars. But that&#39;s not user specific. I build a &lt;code&gt;msys2.ps1&lt;/code&gt; that sets
env vars and launches &lt;code&gt;msys2.exe&lt;/code&gt;. Use this and leave the &lt;code&gt;ini&lt;/code&gt; unchanged.&lt;/p&gt;
&lt;p&gt;For example you can set the default shell by &lt;code&gt;SHELL=/usr/bin/zsh&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Figuring Executable Dependencies&lt;/h3&gt;
&lt;p&gt;To make a portable executable distribution, you need to copy not only
the executable, but all its dependencies. You can do so with &lt;code&gt;ldd&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ldd /usr/bin/rsync.exe
        ntdll.dll =&amp;gt; /c/WINDOWS/SYSTEM32/ntdll.dll (0x778c0000)
        KERNEL32.DLL =&amp;gt; /c/WINDOWS/System32/KERNEL32.DLL (0x769b0000)
        KERNEL32.DLL =&amp;gt; /c/WINDOWS/System32/KERNEL32.DLL (0x769b0000)
        KERNELBASE.dll =&amp;gt; /c/WINDOWS/System32/KERNELBASE.dll (0x77620000)
        msys-gcc_s-1.dll =&amp;gt; /usr/bin/msys-gcc_s-1.dll (0x6ac00000)
        msys-iconv-2.dll =&amp;gt; /usr/bin/msys-iconv-2.dll (0x6ee80000)
        msys-2.0.dll =&amp;gt; /usr/bin/msys-2.0.dll (0x61000000)
        msys-z.dll =&amp;gt; /usr/bin/msys-z.dll (0x644c0000)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that all the DLLs located inside the msys root &lt;code&gt;/usr/bin&lt;/code&gt; are the
dependencies that need to be packed alongside the executable.&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/msys2/msys2/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Msys2 Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/msys2/msys2/wiki/MSYS2-installation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/msys2/msys2/wiki/Using-packages&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Using package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cygwin.com/cygwin-ug-net/ntsec.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cygwin
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>FreeBSD ZFS</title>
    <link href="http://kflu.github.io/2017/07/17/2017-07-17-freebsd-zfs/"/>
    <id>http://kflu.github.io/2017/07/17/2017-07-17-freebsd-zfs/</id>
    <published>2017-07-17T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.670Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.michaelwlucas.com/os/fmzfs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FreeBSD Mastery: ZFS&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Chapter 3: Creating Pools and VDEVs&lt;/li&gt;
&lt;li&gt;Chapter 4: Mounting ZFS Filesystems&lt;/li&gt;
&lt;li&gt;Chapter 5: Replacing Mirror Providers&lt;/li&gt;
&lt;li&gt;Chapter 8: Custom ZFS Installation Partitioning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.michaelwlucas.com/os/fmse&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FreeBSD Mastery: Storage Essential&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Relevant man pages
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?gpart(8)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gpart&lt;/a&gt;: this contains OS boot up logic&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?zpool(8)&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zpool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=zfs&amp;amp;sektion=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zfs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/cgi/man.cgi?query=geom&amp;amp;sektion=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;geom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.freebsd.org/RootOnZFS/GPTZFSBoot/Mirror&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Installing FreeBSD Root on ZFS (Mirror) using GPT (FreeBSD wiki)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Working with storage and file system&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;See BSD repository &lt;code&gt;README.md&lt;/code&gt; for updated version.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lists all disks recognized by the OS: &lt;code&gt;geom disk list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;working with partitions
&lt;ul&gt;
&lt;li&gt;lists all partitions: &lt;code&gt;gpart &amp;lt;show|list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;create partition scheme for disk: &lt;code&gt;gpart create -s gpt &amp;lt;device&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;destroy partition for disk: &lt;code&gt;gpart destroy [-F] &amp;lt;device&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;add new partition to device: &lt;code&gt;gpart add -t &amp;lt;fs_type&amp;gt; -a 1m &amp;lt;device&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;write boot code to disk: &lt;code&gt;gpart bootcode -b boot/pmbr -p boot/gptzfsboot -i &amp;lt;part#&amp;gt; &amp;lt;device&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;devices and partitions are at &lt;code&gt;/dev/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GPT labels are at &lt;code&gt;/dev/gpt&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Understanding and Working with ZFS&lt;/h1&gt;
&lt;p&gt;I&#39;ve a very successful weekend learning and adopting ZFS on my home server.
As an end result, I&#39;m running a ZFS pool on a single mirrow VDEV composed
of two disks.&lt;/p&gt;
&lt;p&gt;On a high level, an ZFS system looks like below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;arch.png&quot; alt=&quot;zfs architecture&quot;&gt;&lt;/p&gt;
&lt;p&gt;There can be multiple ZFS pools present on the system. Each pool consists
of multiple VDEVs. Each VDEV consists of multiple disks. Then on top of
each pool, a tree structure of &amp;quot;datasets&amp;quot; can be created to organize file
systems. Datasets is there mainly for management purposes.&lt;/p&gt;
&lt;p&gt;A VDEV is a cluster of disks. VDEV implements software RAID. VDEV manages
redundency - if a portion of the disks inside a VDEV fail, that might be
OK. But if a VDEV fail inside of a pool, the entire pool is broken. The
VDEV can take either an entire, raw disk, or take disk partitions. I opt
for disk partitions because this way you can make sure all providers in the
VDEV has the same sector size.&lt;/p&gt;
&lt;p&gt;There&#39;re multiple types of VDEVs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stripe (single disks composed together)&lt;/li&gt;
&lt;li&gt;mirror (N:1 mirroring)&lt;/li&gt;
&lt;li&gt;RAIDZ-1, RAIDZ-2, RAIDZ-3 (more advanced types of RAID)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&#39;s a quite general purpose way to prepare (e.g., partitioning) a disk
for use in ZFS. The partition looks like:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;a freebsd-boot partitioin, 512k&lt;/li&gt;
&lt;li&gt;a freebsd-swap partition, 2GB&lt;/li&gt;
&lt;li&gt;a freebsd-zfs partiion, the rest of the entire disk&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For a disk &lt;code&gt;ada1&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# CREATE GPT PARTITION SCHEME:
gpart create -s gpt ada1   

gpart add -t freebsd-boot -a 1m -b 40 -s 512k ada1
gpart add -t freebsd-swap -a 1m       -s 2G   ada1
gpart add -t freebsd-zfs  -a 1m               ada1

# WRITES BOOT CODE TO MBR AND TO BOOT PARTITION: 
gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;-a 1m&lt;/code&gt; to make sure the sector size aligns regardless of disk
differences. See &lt;a href=&quot;https://www.michaelwlucas.com/os/fmzfs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fmzfs&lt;/a&gt;, section &amp;quot;Pools Alignment and Disk Sector
Size&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;-b 40&lt;/code&gt; to begin the boot partition at 40B.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I don&#39;t use GPT labels, as opposed to &lt;a href=&quot;https://www.michaelwlucas.com/os/fmzfs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fmzfs&lt;/a&gt;. Later pool
manipulations all use partition names directly (e.g., &lt;code&gt;ada1p3&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now to add the disk to a mirrow VDEV in &lt;code&gt;zroot&lt;/code&gt; pool:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;zpool attach zroot ada0p3 ada1p3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we attach &lt;code&gt;ada1p3&lt;/code&gt; to poll &lt;code&gt;zroot&lt;/code&gt;, and ask it to mirror the existing
provider &lt;code&gt;ada0p3&lt;/code&gt;. Now &lt;code&gt;zpool status&lt;/code&gt; should show the newly added disk is
&amp;quot;resilvering&amp;quot;.&lt;/p&gt;
&lt;p&gt;The result of the above command is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Make sure to wait until resilver is done before rebooting.

If you boot from pool &#39;zroot&#39;, you may need to update
boot code on newly attached disk &#39;ada1p3&#39;.

Assuming you use GPT partitioning and &#39;da0&#39; is your new boot disk
you may use the following command:

        gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 da0
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Replacing Disks in ZFS Pool&lt;/h1&gt;
&lt;p&gt;Today (2021-01-25) one of the mirrored disk is failing so I had to replace it.
On high level, it involved:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;remove the old disk&lt;/li&gt;
&lt;li&gt;connect new disk&lt;/li&gt;
&lt;li&gt;format new disk&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zpool replace &amp;lt;pool&amp;gt; &amp;lt;old&amp;gt; &amp;lt;new_partition&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;write boot code to new disk&lt;/li&gt;
&lt;li&gt;wait for resilvering done&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://farrokhi.net/posts/2020/05/replacing-a-faulty-disk-in-zfs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This article&lt;/a&gt; describes almost the exact steps I followed.&lt;/p&gt;
&lt;p&gt;For formating new disk, one can copy partition from old disk:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gpart backup ada0 &amp;gt; ada0.parts&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat ada0.parts | gpart restore -F ada1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If ada1 is larger and the zfs partition is at the end, one can resize (grow)
the zfs partition with below. Note that leaving out &lt;code&gt;-s&lt;/code&gt; would set size to all
the rest of the disk space.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gpart resize -i 3 -a 1m ada1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I had hard time booting into the zfs pool and had the system detect the new
disk. Troubles are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;my failed disk is connected to the 1st boot SATA cable. If I connect it to
the new disk, system insisted to boot from it, even though my 2nd (good old)
disk is bootable.&lt;/li&gt;
&lt;li&gt;if I unplug 1st SATA then system booted successfully, but hot-plug new device
won&#39;t get recognized - didn&#39;t show in &lt;code&gt;geom disk list&lt;/code&gt;, &lt;code&gt;dmesg&lt;/code&gt; or
&lt;code&gt;/var/log/messages&lt;/code&gt;; &lt;code&gt;camcontrol rescan&lt;/code&gt; didn&#39;t help.&lt;/li&gt;
&lt;li&gt;what worked is I manually swapped the SATA cables so my good old disk is now
the 1st SATA disk, and the new disk is the 2nd. This way, the system boots,
and the new disk is recognized in &lt;code&gt;geom&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Writing boot code is as usual:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gpart bootcode -b /boot/pmbr -p /boot/gptzfsboot -i 1 ada1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3&gt;IMPORTANT NOTE ON ZPOOL REPLACE&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt; when issue:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# zpool replace &amp;lt;pool&amp;gt; &amp;lt;old_id&amp;gt; &amp;lt;new_partition&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pool replace zroot 372837423423409823 ada1p3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That is the &lt;strong&gt;new partition&lt;/strong&gt; (e.g. ada1p3), NOT new disk. If you put disk
(&lt;code&gt;ada1&lt;/code&gt;) it will still work (use the whole disk as raw for mirrowing) but you
lost the partition schemes on the disk, so you won&#39;t be able to boot from it,
in case your other disk in the mirrow fail.&lt;/p&gt;
&lt;h1&gt;CREATING ZVOL, UFS PARTITION ON ZFS&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.freebsd.org/en/books/handbook/zfs/#zfs-zfs-volume&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Main doc&lt;/a&gt;. zvol is like zfs dataset, but exposed as raw block device. So
it is useful, e.g, for creating filesystems on top.&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;zfs create -V 2g -o compression=on zroot/ufs_part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newfs -O2 /dev/zvol/zroot/ufs_part&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mount /dev/zvol/zroot/ufs_part
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="zfs" scheme="http://kflu.github.io/tags/zfs/"/>
    
      <category term="nas" scheme="http://kflu.github.io/tags/nas/"/>
    
      <category term="partition" scheme="http://kflu.github.io/tags/partition/"/>
    
      <category term="filesystem" scheme="http://kflu.github.io/tags/filesystem/"/>
    
  </entry>
  
  <entry>
    <title>SOCKS proxy via SSH</title>
    <link href="http://kflu.github.io/2017/07/15/2017-07-15-SOCKS-proxy/"/>
    <id>http://kflu.github.io/2017/07/15/2017-07-15-SOCKS-proxy/</id>
    <published>2017-07-15T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.669Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.ocf.berkeley.edu/~xuanluo/sshproxywin.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How to tunnel Internet traffic over SSH in Windows (the guide that finally works for me)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-route-web-traffic-securely-without-a-vpn-using-a-socks-tunnel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;How To Route Web Traffic Securely Without a VPN Using a SOCKS Tunnel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tunneling_protocol#Secure_Shell_tunneling&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tunneling protocols Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;For proxy/tunneling, there&#39;re several options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Per-application based, there&#39;s &lt;a href=&quot;https://en.wikipedia.org/wiki/Tunneling_protocol#Secure_Shell_tunneling&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SSH port forwarding&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Server setup is easy. You only need the regular configured SSHD. This is
the easiest to setup and use. Just fire the proper SSH command and point
your application to the locally bind port.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next is the SOCKS proxy - this works at the web application level so any
application (mostly browsers) that supports SOCKS can use it.&lt;/p&gt;
&lt;p&gt;Server setup is still easy. You only need the regularly configured SSHD.
Client setup is also easy, fire up the command but compared to portforwarding
you&#39;ll also setup proxy settings. This setting is usually in OS or app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;VPN server&lt;/p&gt;
&lt;p&gt;Hardest to setup on the server side. There&#39;re two types - OpenVPN, SSH layer 3
tunneling.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here we are going to talk about #2.&lt;/p&gt;
&lt;h2&gt;SOCKS Server Side&lt;/h2&gt;
&lt;p&gt;Server side, you only need regularly configured SSHD. Whenver SSH can connect, SOCKS should work.&lt;/p&gt;
&lt;h2&gt;SOCKS Client Side - Enabling SOCKS&lt;/h2&gt;
&lt;p&gt;On client side, to enable SOCKS proxy, issue this command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -D &amp;lt;socks_port&amp;gt; &amp;lt;user@remote_host&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives you an SSH session to the remote host AND also enables SOCKS on local machine. If you don&#39;t want to access the SSH
session interactively and would rather prefer it to stay in the background (i.e., hidden from UI), use the following command
which has extra arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -D &amp;lt;socks_port&amp;gt; -f -C -q -N &amp;lt;user@remote_host&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;socks_port&lt;/code&gt; is the local port of the SOCKS proxy.&lt;/p&gt;
&lt;p&gt;You can also use putty:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;putty.png&quot; alt=&quot;putty&quot;&gt;&lt;/p&gt;
&lt;h2&gt;SOCKS Client Side - Configuring Applications&lt;/h2&gt;
&lt;p&gt;Then to configure application to use SOCKS, in Windows, you can configure via
&amp;quot;internet options&amp;quot; -&amp;gt; &amp;quot;connection&amp;quot; tab -&amp;gt; &amp;quot;proxy server&amp;quot; -&amp;gt; &amp;quot;advanced&amp;quot;. Here&#39;s
it:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;socks_win.png&quot; alt=&quot;options&quot;&gt;&lt;/p&gt;
&lt;p&gt;Note that you need to &lt;strong&gt;uncheck &amp;quot;use the same proxy server for all protocols&amp;quot;&lt;/strong&gt;, clear HTTP, Secure, FTP fields. And only fill Socks field.
&lt;a href=&quot;https://www.ocf.berkeley.edu/~xuanluo/sshproxywin.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This&lt;/a&gt; is the guide that works for me. &lt;a href=&quot;https://www.digitalocean.com/community/tutorials/how-to-route-web-traffic-securely-without-a-vpn-using-a-socks-tunnel&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This&lt;/a&gt; is thorough, but didn&#39;t mention the above critical
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="ssh" scheme="http://kflu.github.io/tags/ssh/"/>
    
      <category term="socks" scheme="http://kflu.github.io/tags/socks/"/>
    
  </entry>
  
  <entry>
    <title>strip BOM from files</title>
    <link href="http://kflu.github.io/2017/06/26/2017-06-26-strip-bom/"/>
    <id>http://kflu.github.io/2017/06/26/2017-06-26-strip-bom/</id>
    <published>2017-06-26T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.669Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Byte Order Mark (BOM) is problematic in many programming languages. For
example, in &lt;a href=&quot;https://groups.google.com/forum/#!topic/racket-users/yWxY2JjUles&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Racket&lt;/a&gt;. Python also has the same behavior. .NET IO functions
can correctly handle BOM.&lt;/p&gt;
&lt;p&gt;To ease the pain, one way is to ask your editor not to write BOM. Another way
would be to use a command line tool to strip it out. NPM has a &lt;code&gt;strip-bom-cli&lt;/code&gt;
package. However, in PowerShell, both stdout redirection and &lt;code&gt;out-file&lt;/code&gt; forces
BOM for UTF8 encoding.&lt;/p&gt;
&lt;p&gt;It turns out &lt;a href=&quot;https://stackoverflow.com/a/32951824/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;there&#39;s an easy way&lt;/a&gt; to strip BOM directly in PowerShell,
without any 3rd party tools, by using &lt;code&gt;[IO.File]::WriteAllLines()&lt;/code&gt;. For
example, to strip BOM for all files under a directory, do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS&amp;gt; ls *.cs | %{ $ls = (Get-Content $_); [IO.File]::WriteAllLines($_, $ls)
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>.NET CIL instructions performance</title>
    <link href="http://kflu.github.io/2017/06/09/2017-06-09-NET-CIL-instructions-perf/"/>
    <id>http://kflu.github.io/2017/06/09/2017-06-09-NET-CIL-instructions-perf/</id>
    <published>2017-06-09T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.669Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I&#39;m lucky to still be able to find this. &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms973852.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This link&lt;/a&gt; lists the performance of each CIL instructions
        
      
    
    </summary>
    
    
      <category term="c#" scheme="http://kflu.github.io/tags/c/"/>
    
      <category term=".net" scheme="http://kflu.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>Linux remote desktop via XMing</title>
    <link href="http://kflu.github.io/2017/05/14/2017-05-14-linux-remote-desktop/"/>
    <id>http://kflu.github.io/2017/05/14/2017-05-14-linux-remote-desktop/</id>
    <published>2017-05-14T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.669Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;In &lt;a href=&quot;http://kflu.github.io/2017/01/24/2017-01-24-win-x11-forward/&quot;&gt;this post&lt;/a&gt;, I talked about setting up X11 forwarding using Xming and
SSH. Today I was looking into forwarding an entire window manager via X11, but
wasn&#39;t able to.&lt;/p&gt;
&lt;h1&gt;XDMCP and Xming&lt;/h1&gt;
&lt;p&gt;However, I found another cool solution - XDMCP. XDMCP is like remote desktop
for linux. Xming is an XDMCP client. Once XDMCP is enabled on the remote
host&#39;s display manager, one can use Xming to connect to it. &lt;strong&gt;Note&lt;/strong&gt; that,
via this approach, the Xming is used in a completely different mode than in
X11 forwarding. Specifically, SSH didn&#39;t play any part in XDMCP (I heard XDMCP
is not a secure protocol).&lt;/p&gt;
&lt;h3&gt;Remote host setup&lt;/h3&gt;
&lt;p&gt;Ubuntu (and Xubuntu) 16.04 uses lightdm as its display manager. XDMCP isn&#39;t
enabled by default. To enabled it, edit &lt;code&gt;/etc/lightdm/lightdm.conf&lt;/code&gt; and add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[XDMCPServer]
enabled=true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now restart lightdm service (this is for Ubuntu 16.04):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; sudo systemctl restart lightdm.service
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more about Ubuntu and XDMCP, refer to &lt;a href=&quot;https://wiki.ubuntu.com/xdmcp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xdmcp ubuntu wiki&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Client connection&lt;/h3&gt;
&lt;p&gt;In order to connect, Xming must be started from command line. Run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS&amp;gt; &amp;amp; &#39;C:&#92;Program Files (x86)&#92;Xming&#92;Xming.exe&#39; -rootless -keyhook -query &amp;lt;remote_host&amp;gt; -clipboard -nowinkill
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the key part is &lt;code&gt;-query &amp;lt;remote_host&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-fullscreen&lt;/code&gt; can also be replaced with &lt;code&gt;-rootless&lt;/code&gt;, or, to be removed (so in
&amp;quot;single window mode&amp;quot;) and specify screen size: &lt;code&gt;-screen 0 1400 1000&lt;/code&gt;. &lt;strong&gt;Note&lt;/strong&gt;
that in &lt;code&gt;-fullscreen&lt;/code&gt;, &lt;code&gt;alt-tab&lt;/code&gt; is broken, and switching in/out of Xming in
this mode is very slow. On the contrary, &lt;code&gt;-rootless&lt;/code&gt; mode is awesome -
swiching in/out Xming is fast, &lt;code&gt;alt-tab&lt;/code&gt; works perfectly.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-keyhook&lt;/code&gt; is used to enable keyboard short. However, I found &lt;code&gt;alt-tab&lt;/code&gt; to be
still problematic. Windows keys seem to work: &lt;code&gt;win-e&lt;/code&gt; opened mouse pad on
Xubuntu. &lt;code&gt;-nowinkill&lt;/code&gt; is used so Xming doesn&#39;t eat &lt;code&gt;alt-F4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Refer to &lt;a href=&quot;http://www.straightrunning.com/xmingnotes/manual.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Xming man page&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Experience&lt;/h3&gt;
&lt;p&gt;Initial testing seems to be pretty fast for local Hyper-V Linux machine.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;I still want to investigate how to do X11 forwarding + window manager. See
&lt;a href=&quot;https://opensource.com/article/16/12/yearbook-best-couple-2016-display-manager-and-window-manager&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Display manager and window manager&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://wiki.ubuntu.com/xdmcp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xdmcp ubuntu wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.straightrunning.com/xmingnotes/manual.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xming man page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opensource.com/article/16/12/yearbook-best-couple-2016-display-manager-and-window-manager&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Display manager and window manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Window Manager via X11 forwarding&lt;/h1&gt;
&lt;p&gt;I can successully x11 forward entire window manager to local machine with
Ubuntu server. I choose Ubuntu server because it doesn&#39;t come with a desktop
environment pre-installed so it&#39;s more tweakable.&lt;/p&gt;
&lt;p&gt;This is inspired by &lt;a href=&quot;http://x.sodpit.com/remotex.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Xming setup&lt;/h3&gt;
&lt;p&gt;Launch Xming in the single window or fullscreen mode. Multiwindow mode will
cause window managers to fail to start.&lt;/p&gt;
&lt;p&gt;Single window mode with screen size:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp; &#39;C:&#92;Program Files (x86)&#92;Xming&#92;Xming.exe&#39; :0 -clipboard -screen 0 1400 1000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Fullscreen mode:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;amp; &#39;C:&#92;Program Files (x86)&#92;Xming&#92;Xming.exe&#39; :0 -clipboard -fullscreen
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In fullscreen mode, escape with &lt;code&gt;ctrl-esc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As described in &lt;a href=&quot;http://kflu.github.io/2017/01/24/2017-01-24-win-x11-forward/&quot;&gt;x11 forwarding&lt;/a&gt;, set the &lt;code&gt;DISPLAY&lt;/code&gt; env var in local
machine terminal before SSH (or in putty UI):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export DISPLAY=localhost:0.0
ssh -Y &amp;lt;user&amp;gt;@&amp;lt;remote_host&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Remote host (Ubuntu Server) setup&lt;/h3&gt;
&lt;p&gt;Refer to &lt;a href=&quot;https://help.ubuntu.com/community/ServerGUI#X11_Server_Installation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu Server GUI wiki X11 Server Installation&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install xorg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then install the choice of window manager. E.g., fluxbox:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install fluxbox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then start with &lt;code&gt;fluxbox&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Not all window manager work this way. Tested and worked are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fluxbox, openbox&lt;/li&gt;
&lt;li&gt;xfwm4 - WM for xfce - works but haven&#39;t figured out any app launcher to use&lt;/li&gt;
&lt;li&gt;xfce4 - works, pretty, seem to run pretty smoothly (first session might be
slow)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those don&#39;t work are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;awesome, enlightment,
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="x11" scheme="http://kflu.github.io/tags/x11/"/>
    
  </entry>
  
  <entry>
    <title>Archlinux installation, partition, EFI</title>
    <link href="http://kflu.github.io/2017/05/14/2017-05-14-archlinux-installation/"/>
    <id>http://kflu.github.io/2017/05/14/2017-05-14-archlinux-installation/</id>
    <published>2017-05-14T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.669Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This is not easy. Mostly followed &lt;a href=&quot;https://wiki.archlinux.org/index.php/Installation_guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Installation guide&lt;/a&gt;, on a Hyper-V v2 VM.
Hyper-V v2 has EFI enabled, so follow corresponding instructions.&lt;/p&gt;
&lt;h2&gt;Disk partitioning and mounting&lt;/h2&gt;
&lt;p&gt;Requires two partitions, an EFI partition and a main partition. EFI partiion
is a FAT32 partition. Used &lt;code&gt;parted&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href=&quot;https://wiki.archlinux.org/index.php/GNU_Parted#UEFI.2FGPT_examples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;UEFI/GPT example for parted&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(parted) mkpart ESP fat32 1MiB 513MiB
(parted) set 1 boot on
(parted) mkpart primary ext4 513MiB 100%
(parted) quit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See &lt;a href=&quot;#parted&quot;&gt;&lt;code&gt;parted&lt;/code&gt; tips&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From console:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkfs.ext4 /dev/sdxY
mkfs.fat -F32 /dev/sdxY
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then mount them:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mount /dev/sdxY /mnt          # this is the primary root
mkdir /mnt/boot
mount /dev/sdxY /mnt/boot     # this is the EFI partition
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Install the base packages&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;pacstrap /mnt base
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; this must be done after mounting &lt;code&gt;/mnt&lt;/code&gt; and &lt;code&gt;/mnt/boot&lt;/code&gt;, as it installs
essentials like &lt;code&gt;vmlinux&lt;/code&gt;, &lt;code&gt;initramfs&lt;/code&gt;, etc. into &lt;code&gt;/mnt/boot&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Boot Loader&lt;/h2&gt;
&lt;p&gt;This is hard. I tried GRUB with EFI first, it failed on me
&lt;sup&gt;&lt;a href=&quot;#grub&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.  I then used &lt;a href=&quot;https://wiki.archlinux.org/index.php/Systemd-boot#EFI_boot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;systemd-boot&lt;/code&gt;&lt;/a&gt; which worked
eventually.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: do all these &lt;strong&gt;before&lt;/strong&gt; chroot to &lt;code&gt;/mnt&lt;/code&gt;, otherwise you don&#39;t have
the necessary executables.&lt;/p&gt;
&lt;p&gt;First install binaries into EFI partition (&lt;code&gt;/mnt/boot&lt;/code&gt; folder):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bootctl --path=esp install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then add an entries to &lt;code&gt;/mnt/boot/loader/entries&lt;/code&gt;, and configure
&lt;code&gt;/mnt/boot/loader/loader.conf&lt;/code&gt; to point to the new entry.&lt;/p&gt;
&lt;p&gt;Add a new entry at &lt;code&gt;/mnt/boot/loader/entries/arch.conf&lt;/code&gt; with content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title          Arch Linux
linux          /vmlinuz-linux
initrd         /initramfs-linux.img
options        root=PARTUUID=14420948-2cea-4de7-b042-40f67c618660 rw
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace the &lt;code&gt;PARTUUID&lt;/code&gt; with the primary partition&#39;s GPT partition UUID. You
can find it with &lt;code&gt;blkid&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# blkid
/dev/sda1: UUID=&amp;quot;xxxx-xxxx&amp;quot; TYPE=&amp;quot;vfat&amp;quot; PARTUUID=&amp;quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxx...&amp;quot;
/dev/sda2: UUID=&amp;quot;333db32c-b91e-41da-86c7-801c88059660&amp;quot; TYPE=&amp;quot;ext4&amp;quot; PARTUUID=&amp;quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxx...&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: use &lt;code&gt;PARTUUID&lt;/code&gt;, NOT &lt;code&gt;UUID&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&quot;parted&quot;&gt;
&lt;h2&gt;&lt;code&gt;parted&lt;/code&gt; tips&lt;/h2&gt;
&lt;p&gt;Run &lt;code&gt;parted&lt;/code&gt; with &lt;code&gt;-a optimal&lt;/code&gt; so &lt;a href=&quot;https://wiki.archlinux.org/index.php/GNU_Parted#Alignment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;misalignment&lt;/a&gt; are warned. But I cannot get
partitions to properly aligned and used &amp;quot;Ignore&amp;quot; when creating partitions &lt;sup&gt;&lt;a href=&quot;#percentage&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;at command line use &lt;code&gt;fdisk -l&lt;/code&gt; to see all disks and partitions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;h &amp;lt;command&amp;gt;&lt;/code&gt; for help&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;p all&lt;/code&gt; to list partitions and disks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;mklabel&lt;/code&gt; to make a new partition table for a disk - this destroyes old
table. E.g., &lt;code&gt;mklabel gpt&lt;/code&gt; to create a GPT partition table. &lt;code&gt;mklabel msdos&lt;/code&gt; to create a msdos or (maybe) MBR partition table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;mkpart&lt;/code&gt; to make new partition on a disk with partition table.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the start/end supports unit postfix, like &lt;code&gt;MiB&lt;/code&gt;, &lt;code&gt;MB&lt;/code&gt;, etc. A negative
number counts from the end (&lt;code&gt;-120MiB&lt;/code&gt;). Also percentage can be used
(&lt;code&gt;100%&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use &lt;code&gt;resizepart&lt;/code&gt; to resize a partition&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; After running &lt;code&gt;parted&lt;/code&gt;, you&#39;ll need to run &lt;code&gt;mkfs.xxx&lt;/code&gt; to format the
newly created partitions.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a name=&quot;grub&quot;&gt;1&lt;/a&gt;: &lt;code&gt;grub-install&lt;/code&gt; failed with: &amp;quot;error: failed to get canonical path of &#39;airootfs&#39;&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a name=&quot;percentage&quot;&gt;2&lt;/a&gt;: per &lt;a href=&quot;https://wiki.archlinux.org/index.php/GNU_Parted#Alignment&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;doc&lt;/a&gt;, use percentage notation so it auto-align for
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>Making pets safer with Arduino</title>
    <link href="http://kflu.github.io/2017/04/29/2017-04-29-arduino-vehicle-environment-monitor/"/>
    <id>http://kflu.github.io/2017/04/29/2017-04-29-arduino-vehicle-environment-monitor/</id>
    <published>2017-04-29T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;em&gt;All source code and related information can be found on the
&lt;a href=&quot;https://github.com/kflu/vem&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;project&#39;s github repo&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is Max, a 6 year old Golden Retriever that I adopted when he was
a little puppy. He and I both love outdoors and we have such a close
binding that he&#39;d beg me to take him whenever I&#39;m going out. I try to
take him to wherever I go as much as possible - going on a hike,
paddle boarding on the water, shopping in the mall, etc. But the
reality is, in an area as pet friendly as Seattle, there&#39;re a lot of
places that don&#39;t welcome dogs, mostly the restaurants and the grocery
stores.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;pup.jpg&quot; alt=&quot;the pup&quot;&gt;&lt;/p&gt;
&lt;p&gt;If we go out for a day in urban area, he most likely will be staying
in the car during lunch time. When it comes to pet safety, I&#39;m a
little paranoid as most pet owner would be. When leaving him in the
car, I make sure to park in the shade, have the sunroof open, wind the
windows down, etc. But no matter how much I do, when I sit in the
restaurants I always worry about the temperature in the car.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Until one day I decided to do something about it - making a in-car,
wireless real-time temperature monitor, which transmits periodic
readings to the receiver that I carry with me. This gives me a piece
of mind knowing that my pup is staying safely and comfortably in the
car!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt; &lt;em&gt;Please be responsible when leaving your pet in the car.
Refer to &lt;a href=&quot;http://blog.gopetfriendly.com/is-it-illegal-to-leave-your-pet-alone-in-the-car/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;the laws&lt;/a&gt; in different states that allows or prohibits leaving
animal in motor vehicle in certain situations.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Before going into the details, here&#39;s what I built using several
weekends and less than $100:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;IMG_2523.JPG.small.jpg&quot; alt=&quot;device&quot;&gt;&lt;/p&gt;
&lt;p&gt;On the right is the transmitter. It stays in the car that
sends the temperature readings every 5 seconds. On the left is the
receiver, I take it when leaving my pup in the car. The receiver has a
little LED that blinks a certain number of times to indicate the
temperature in the car. Both devices run on battery and have a
transmission range of around 250m (820ft) in very complex building
environment (shopping mall), with primitive (poor man&#39;s) wire antenna.&lt;/p&gt;
&lt;h1&gt;High Level Design Decisions&lt;/h1&gt;
&lt;p&gt;The overall system design is based on &lt;a href=&quot;https://www.lora-alliance.org/What-Is-LoRa/Technology&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LoRa wireless technology&lt;/a&gt;.
It uses spread spectrum communication and has advanced technology to
combat channel fading and interference. In ideal situation it&#39;s
claimed to have miles of transmission range. Initially I was
considering Family Radio Service (FRS) (used by walkie talkie)
for its long communication range. But I couldn&#39;t find good
hardware and software support for it. &lt;a href=&quot;https://www.sparkfun.com/pages/xbee_guide&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XBee&lt;/a&gt; seems to be a good
alternative. With the &amp;quot;Pro&amp;quot; version, XBee claims to have miles of
transmission range. But the cost of XBee Pro chips seem to be much
higher than the Lora modules.&lt;/p&gt;
&lt;p&gt;Basically I need a system to perform measuring, transmitting,
receiving, and displaying the temperature data between 2 peers. I knew
I should choose Arduino boards over RaspberryPi, because the tasks are
simple and &lt;em&gt;the power consumption must be low&lt;/em&gt; in order to make at
least the receiver mobile.&lt;/p&gt;
&lt;p&gt;I had no previous experience with Arduino programming and soldering
circuits. My major was in wireless communication back in college and
had college level knowledge on circuits. Programming was trivial as
I&#39;m already a programmer:) And this was a pretty fun experience!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.adafruit.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Adafruit&lt;/a&gt; is an awesome website teaching how to do all sorts of
Arduino things and also sells the devices. What I like most is on each
product page it also offers the tutorial on how to assemble, wire, and
program it! It made my first hardware project much smoother than I&#39;d
imagined.&lt;/p&gt;
&lt;p&gt;Here&#39;s the list of things that I bought for this project.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Item&lt;/th&gt;
&lt;th&gt;Price&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/B00PD92EJ8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Arduino Mega 2560 R3 (OSOYOO)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;$13.99&lt;/td&gt;
&lt;td&gt;Transmitter board (awesome cheap &amp;quot;clone&amp;quot;&lt;sup&gt;&lt;a href=&quot;#clone&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; board)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.adafruit.com/product/3072&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Adafruit RFM95W LoRa Radio Transceiver Breakout - 868 or 915 MHz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;$19.95&lt;/td&gt;
&lt;td&gt;Transmitter communication module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.adafruit.com/products/165&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TMP36 - Analog Temperature sensor - TMP36&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;$1.5&lt;/td&gt;
&lt;td&gt;Transmitter temperature sensor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/B005X1Y7I2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Anker PowerCore+ mini 3350mAh&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;$13.99&lt;/td&gt;
&lt;td&gt;Transmitter power supply (USB)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.adafruit.com/products/2771&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Adafruit Feather 32u4 Basic Proto&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;$19.95&lt;/td&gt;
&lt;td&gt;Receiver board&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.adafruit.com/products/3231&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Adafruit LoRa Radio FeatherWing - RFM95W 900 MHz&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;$19.95&lt;/td&gt;
&lt;td&gt;Receiver communication module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&quot;https://www.adafruit.com/product/727&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;3 x AAA Battery Holder with On/Off Switch and 2-Pin JST&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;$1.95&lt;/td&gt;
&lt;td&gt;Receiver power supply (3 x AAA)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Note that:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When buying LoRa modules, please make sure to buy the frequency
according to the regulation of your country. In US, LoRa uses 915MHz.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The cost can be significantly cut down from this list. My
choice of the products were not solely for cutting down the price, but
more for better learning experience, community support, flexibility in
prototyping. For example, Adafruit has &lt;a href=&quot;https://www.adafruit.com/product/3178&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;feather board integrated with
LoRa chip&lt;/a&gt; (or &lt;a href=&quot;https://www.adafruit.com/product/3078&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this&lt;/a&gt;). They are cheaper than buying the board
and LoRa module separately. And it also eliminates almost all the
soldering work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The board and the LoRa module are wired together using SPI interface.
I&#39;m not going into the detail. Please refer to &lt;a href=&quot;https://learn.adafruit.com/adafruit-rfm69hcw-and-rfm96-rfm95-rfm98-lora-packet-padio-breakouts/wiring&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Adafruit tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Measuring the temperature&lt;/h1&gt;
&lt;p&gt;Using the TMP36 temperature sensor is extremely easy. It&#39;s done by
using the MCU to measure the output voltage of the sensor. Most
importantly, the input voltage to the sensor must be stable for the
measurement to be accurate. Since I&#39;ll be using USB power on the
transmitter side, and the USB power bank is stable at 5v, I don&#39;t have
difficulty here.&lt;/p&gt;
&lt;p&gt;For more information about using TMP36, refer to Adafruit &lt;a href=&quot;https://learn.adafruit.com/tmp36-temperature-sensor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TMP36 product
page&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Displaying the temperature&lt;/h1&gt;
&lt;p&gt;You may have noticed that the receiver doesn&#39;t have a display. Yes -
this was my first Arduino project and I didn&#39;t have time to learn and
investigate everything at one shot. I decided to go simple and hacky.
On every Arduino board, there is a tiny cute built-in LED that can be
programmed (I guess they have it because almost every beginner&#39;s first
project is to program the LED to blink). Using the built-in LED has
two advantages - it&#39;s simple to program, and uses minimum power than
almost any other fancier display.&lt;/p&gt;
&lt;p&gt;I quantize the temperature into 7 regions, each have a different
number of quick blinks every 5 seconds. So I can know the temperature region
in the car by observing the number of quick blinks.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int temp_to_comfort(float tempC) {
    if (               tempC &amp;lt; 0)  return 7;
    if ( 0 &amp;lt;= tempC &amp;amp;&amp;amp; tempC &amp;lt; 20) return 1;
    if (20 &amp;lt;= tempC &amp;amp;&amp;amp; tempC &amp;lt; 25) return 2;
    if (25 &amp;lt;= tempC &amp;amp;&amp;amp; tempC &amp;lt; 30) return 3;
    if (30 &amp;lt;= tempC &amp;amp;&amp;amp; tempC &amp;lt; 35) return 4;
    if (35 &amp;lt;= tempC &amp;amp;&amp;amp; tempC &amp;lt; 40) return 5;
    if (40 &amp;lt;= tempC)               return 6;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I did took sometime tweaking the speed of each blink - initially it
blinks a little too fast and I couldn&#39;t tell if it blinked 3 or 4 or
more times. Once I slow it down a little, it works pleasantly well!&lt;/p&gt;
&lt;p&gt;I took this idea further and made my little LED a generic information
representation system. It can display all sorts of other information.
For example, a long, slow blink indicates no data is being received -
maybe the distance is too long, or the transmitter runs out of
battery.&lt;/p&gt;
&lt;p&gt;Below animation shows it&#39;s receiving temperature in the 20°C ~ 25°C
range (2 blinks):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;LED_receiving.gif&quot; alt=&quot;LED receiving&quot;&gt;&lt;/p&gt;
&lt;p&gt;Below animation shows it&#39;s not receiving any data (1 long slow blink):&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;LED_error.gif&quot; alt=&quot;LED error&quot;&gt;&lt;/p&gt;
&lt;h1&gt;Communication System&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.airspayce.com/mikem/arduino/RadioHead/classRH__RF95.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RadioHead&lt;/a&gt; has awesome support for driving the LoRa modules. LoRa
technology operates at the physical and MAC layer. Since I only need a
peer to peer channel, I only used the physical layer functionality.&lt;/p&gt;
&lt;p&gt;LoRa physical layer can be configured to use different frequency,
bandwidth, spreading factor, channel coding rate. These all affect the
data rate and
        
      
    
    </summary>
    
    
      <category term="arduino" scheme="http://kflu.github.io/tags/arduino/"/>
    
  </entry>
  
  <entry>
    <title>More about synchronization</title>
    <link href="http://kflu.github.io/2017/04/11/2017-04-11-more-synchronozation/"/>
    <id>http://kflu.github.io/2017/04/11/2017-04-11-more-synchronozation/</id>
    <published>2017-04-11T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://tomasp.net/blog/csharp-async-gotchas.aspx/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Async in C# and F# Asynchronous gotchas in C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/pfxteam/2012/06/15/executioncontext-vs-synchronizationcontext/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ExecutionContext vs SynchronizationContext&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;About async/await&lt;/h2&gt;
&lt;p&gt;Difference between running a &lt;code&gt;Func&amp;lt;Task&amp;gt;&lt;/code&gt; and &lt;code&gt;Task.Run()&lt;/code&gt;. See &lt;a href=&quot;http://tomasp.net/blog/csharp-async-gotchas.aspx/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Action&lt;/code&gt; vs &lt;code&gt;Func&amp;lt;Task&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Running a &lt;code&gt;Func&amp;lt;Task&amp;gt;&lt;/code&gt; runs the first part of its body &lt;strong&gt;synchronously&lt;/strong&gt; up
until the first &lt;code&gt;await&lt;/code&gt; statement. The rest part are run on a separate task.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Task.Run()&lt;/code&gt; puts its input to a separate task to run.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The below two snippets are trivially different. &lt;strong&gt;TODO&lt;/strong&gt; need elaborating.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var tasks = Enumerable.Range(0, 100).Select(async x =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	log(&amp;quot;step1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    await Task.Delay(1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log(&amp;quot;step2&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).ToArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&amp;quot;step3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task.WaitAll(tasks);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;compared to:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var tasks = Enumerable.Range(0, 100).Select(x =&amp;gt; Task.Run(async () =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	log(&amp;quot;step1&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    await Task.Delay(1000);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    log(&amp;quot;step2&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)).ToArray();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;log(&amp;quot;step3&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Task.WaitAll(tasks);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;About &lt;code&gt;SynchronizationContext&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;It&#39;s an abstraction interface whose implementations are used to dispatch
asynchronous tasks in some specific ways. See &lt;a href=&quot;https://blogs.msdn.microsoft.com/pfxteam/2012/06/15/executioncontext-vs-synchronizationcontext/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this
        
      
    
    </summary>
    
    
      <category term="c#" scheme="http://kflu.github.io/tags/c/"/>
    
      <category term="multi threading" scheme="http://kflu.github.io/tags/multi-threading/"/>
    
  </entry>
  
  <entry>
    <title>A survey of C# synchronization primitives</title>
    <link href="http://kflu.github.io/2017/04/04/2017-04-04-csharp-synchronization/"/>
    <id>http://kflu.github.io/2017/04/04/2017-04-04-csharp-synchronization/</id>
    <published>2017-04-04T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms228964(v=vs.110).aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This MSDN document&lt;/a&gt; gives a good survey on various synchronization
primitives in .NET. This article will follow how it categorizes the
synchronization primitives.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.albahari.com/threading/part2.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Threading in C#&lt;/a&gt; is a very good high level overview on synchronization.
It has a slightly different way of categorizing sync primitives. It also
offers a few ones that&#39;re not mentioned in the other doc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://download.microsoft.com/download/B/C/F/BCFD4868-1354-45E3-B71B-B851CD78733D/PerformanceCharacteristicsOfSyncPrimitives.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This paper&lt;/a&gt; describes some .NET 4.0 new primitives and provides insight
into their implementation and performance consideration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Synchronization is mostly about the mechanisms provided by the language to
perform waiting (aka blocking). Those mechanisms vary depending on how the
waiting is achieved, and by what criteria the waiting should finish (aka
released, or unblocked).&lt;/p&gt;
&lt;h1&gt;Exclusive Locks&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;lock&lt;/code&gt;, &lt;code&gt;Monitor&lt;/code&gt;, &lt;code&gt;Mutex&lt;/code&gt; are exclusive locks. &lt;code&gt;lock&lt;/code&gt; is the most convenient
to use. &lt;code&gt;Monitor&lt;/code&gt; provides richer options when waiting on the lock, e.g.,
timeout, etc. &lt;code&gt;Mutex&lt;/code&gt; provides inter-process locking but is more expensive to
use.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.albahari.com/threading/part2.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;lock&lt;/code&gt; vs &lt;code&gt;Mutex&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[...] Of the two (lock and Mutex), the lock construct is faster and more
convenient. Mutex, though, has a niche in that its lock can span applications
in different processes on the computer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Reader Writer Lock&lt;/h1&gt;
&lt;p&gt;The ReaderWriterLockSlim class addresses the case where a thread that changes
data, the writer, must have exclusive access to a resource. When the writer is
not active, any number of readers can access the resource (for example, by
calling the EnterReadLock method). When a thread requests exclusive access,
(for example, by calling the EnterWriteLock method), subsequent reader requests
block until all existing readers have exited the lock, and the writer has
entered and exited the lock.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.threading.readerwriterlockslim(v=vs.110).aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MSDN&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ReaderWriterLockSlim is similar to ReaderWriterLock, but it has simplified
rules for recursion and for upgrading and downgrading lock state.
ReaderWriterLockSlimavoids many cases of potential deadlock. In addition, the
performance of ReaderWriterLockSlim is significantly better than
ReaderWriterLock. ReaderWriterLockSlim is recommended for all new
development.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;Semaphore&lt;/h1&gt;
&lt;p&gt;Semaphore is more general than mutually exclusive locks by allowing a specified
number of threads to access a resource. Like &lt;code&gt;Mutex&lt;/code&gt;, it can be used across
process. &lt;code&gt;SemaphoreSlim&lt;/code&gt; is its local and more efficient version.&lt;/p&gt;
&lt;h1&gt;Wait Handles&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ksb7zs2x(v=vs.110).aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Conceptual overview: EventWaitHandle, AutoResetEvent, CountdownEvent,
ManualResetEvent&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                          WaitHandle (abstract)
                             |
                 +-----------+----------------+
                 |                 |          |
                 |                 |          |
                 v                 v          v
          EventWaitHandle      Semaphore    Mutex
          +           +
          |           |
          |           |
          v           v
 AutoResetEvent   ManualResetEvent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wait handles can be waited on. But what&#39;s more interesting is the events. An
event is a value with two states - &amp;quot;signaled&amp;quot; and &amp;quot;not-signaled&amp;quot;. When waiting
on it, a thread is only unblocked once the event is &amp;quot;signaled&amp;quot;. An event can be
signaled by calling its &lt;code&gt;.Set()&lt;/code&gt; method.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AutoResetEvent&lt;/code&gt; is auto reset to &amp;quot;not-signaled&amp;quot; state when one waiting
thread is unblocked, therefore continue to blocking the rest of the waiting
threads. Effectively, it lets only one thread to &amp;quot;pass through&amp;quot; at a time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ManualResetEvent&lt;/code&gt; does not auto reset so it lets all waiting threads to pass
through once signaled.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are lightweight counterparts of the above mentioned primitives that&#39;re
faster and doesn&#39;t work across process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;System.Threading.SemaphoreSlim&lt;/code&gt; is a lightweight version of
System.Threading.Semaphore.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Threading.ManualResetEventSlim&lt;/code&gt; is a lightweight version of
System.Threading.ManualResetEvent.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Threading.CountdownEvent&lt;/code&gt; represents an event that becomes signaled
when its count is zero.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Threading.Barrier&lt;/code&gt; enables multiple threads to synchronize with one
another without requiring control by a master thread. A barrier prevents each
thread from continuing until all threads have reached a specified point.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Spin based primitives&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;SpinWait&lt;/code&gt; can be used to wait for a condition &lt;code&gt;Func&amp;lt;bool&amp;gt;&lt;/code&gt; to meet. It uses a
good combination of spinning (initially) and blocking (yielding the thread,
after an excessive time spinning).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SpinLock&lt;/code&gt; is a lock based on spinning. It doesn&#39;t turn into blocking so care
must be taken when holding such a lock. Only for advanced and very performance
critical uses.&lt;/p&gt;
&lt;h1&gt;Interlocked Operations&lt;/h1&gt;
&lt;p&gt;Lastly, &lt;code&gt;Interlocked&lt;/code&gt; is not blocking at all. From &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/ms228964(v=vs.110).aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MSDN&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Interlocked operations are simple atomic operations performed on a memory
location by static methods of the Interlocked class. Those atomic operations
include addition, increment and decrement, exchange, conditional exchange
depending on a comparison, and read operations for 64-bit values on 32-bit
platforms.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1&gt;TaskCompletionSource&lt;t&gt;&lt;/t&gt;&lt;/h1&gt;
&lt;p&gt;This can be used to synchronize tasks the way events are used for threads.
Tasks and async/await is asynchronous computing on a higher level than threads.
And in addition to the built in constructs that one can await on,
&lt;code&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt; can be used to signal and synchronous anything among
tasks.&lt;/p&gt;
&lt;h1&gt;Thread Affinity and Its Issues When Used with Tasks&lt;/h1&gt;
&lt;p&gt;Some sync mechanisms described above has thread affinity and it has issues when
used with Tasks. For example, tasks do not work well with monitors. As monitors
have thread affinity, a task, resumed onto a different thread than its original
thread, can release the wrong monitor; vise versa, a task resumed to a thread
can aquire the monitor while it has already been aquired by a previously
blocked task.&lt;/p&gt;
&lt;p&gt;So it&#39;s important to think about thread affinity when picking a sync mechanism to work
with tasks. As a summary:&lt;/p&gt;
&lt;p&gt;These are thread affine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitors (and locks)&lt;/li&gt;
&lt;li&gt;Reader-writer locks&lt;/li&gt;
&lt;li&gt;Mutex&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These does not have thread affinity:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Semaphore (and SemaphoreSlim)&lt;/li&gt;
&lt;li&gt;Event wait
        
      
    
    </summary>
    
    
      <category term="c#" scheme="http://kflu.github.io/tags/c/"/>
    
      <category term="multi threading" scheme="http://kflu.github.io/tags/multi-threading/"/>
    
  </entry>
  
  <entry>
    <title>Native library dependencies - how to debug</title>
    <link href="http://kflu.github.io/2017/03/02/2017-03-02-native-library-dependencies/"/>
    <id>http://kflu.github.io/2017/03/02/2017-03-02-native-library-dependencies/</id>
    <published>2017-03-02T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Suppose you have a managed library &lt;code&gt;Foo.dll&lt;/code&gt;, which P/Invokes &lt;code&gt;DllImport(A.dll)&lt;/code&gt;. &lt;code&gt;A.dll&lt;/code&gt; in turn references &lt;code&gt;B.dll&lt;/code&gt;, &lt;code&gt;C.dll&lt;/code&gt;, and so on. There could be two types of errors.&lt;/p&gt;
&lt;p&gt;check for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bitness mistach?&lt;/li&gt;
&lt;li&gt;missing dependent libraries (e.p. msvc redistribution)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tools that might help:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dumpbin&lt;/li&gt;
&lt;li&gt;dependency walker&lt;/li&gt;
&lt;li&gt;corflags&lt;/li&gt;
&lt;li&gt;gflags&lt;/li&gt;
&lt;li&gt;procmon (sysinternals)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The below are the details.&lt;/p&gt;
&lt;h2&gt;Bitness mismatch&lt;/h2&gt;
&lt;p&gt;First, there could be a bitness mismatch between the native libraries and &lt;code&gt;Foo.dll&lt;/code&gt;. When this happens, you&#39;ll see&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Unhandled Exception: System.BadImageFormatException: An attempt was made to load a program with an incorrect format. (Exception from HRESULT: 0x8007000B)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Usually it happens when the native libraries are built for amd64/x64, but &lt;code&gt;foo.dll&lt;/code&gt; is for &lt;code&gt;AnyCPU&lt;/code&gt; or &lt;code&gt;x86&lt;/code&gt;. The &lt;code&gt;csproj&lt;/code&gt; file must add following lines:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;PropertyGroup Condition=&amp;quot;&amp;apos;$(Platform)&amp;apos; == &amp;apos;amd64&amp;apos;&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;PlatformTarget&amp;gt;x64&amp;lt;/PlatformTarget&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Several tools can be used to inspect a library&#39;s bitness.&lt;/p&gt;
&lt;p&gt;For managed library, use &lt;code&gt;corflags&lt;/code&gt;. Look for &lt;code&gt;PE&lt;/code&gt;, &lt;code&gt;ILONLY&lt;/code&gt;, and &lt;code&gt;32BIT&lt;/code&gt; fields:&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;amd64&lt;/code&gt; assembly:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; CorFlags.exe /nologo .&#92;CNTKLibraryManaged-2.0.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Version   : v4.0.30319&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLR Header: 2.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PE        : PE32+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CorFlags  : 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ILONLY    : 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32BIT     : 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Signed    : 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;An &lt;code&gt;AnyCPU&lt;/code&gt; assembly:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; CorFlags.exe /nologo .&#92;Newtonsoft.Json.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Version   : v2.0.50727&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLR Header: 2.5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PE        : PE32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CorFlags  : 9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ILONLY    : 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32BIT     : 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Signed    : 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;For managed &lt;strong&gt;and&lt;/strong&gt; native library, use &lt;code&gt;dumpbin /headers&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; dumpbin.exe /headers .&#92;CNTKLibraryManaged-2.0.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PE signature found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File Type: DLL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FILE HEADER VALUES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            8664 machine (x64)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			     ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            2022 characteristics&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   Executable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   Application can handle large (&amp;gt;2GB) addresses&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   DLL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OPTIONAL HEADER VALUES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             20B magic # (PE32+)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; dumpbin.exe /headers .&#92;Newtonsoft.Json.dll&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PE signature found&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;File Type: DLL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FILE HEADER VALUES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             14C machine (x86)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                 ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            2102 characteristics&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   Executable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   32 bit word machine&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                   DLL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;OPTIONAL HEADER VALUES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;             10B magic # (PE32)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;Missing Dependencies (somewhere deep down the tree)&lt;/h2&gt;
&lt;p&gt;tldr; check if you&#39;re missing the &lt;a href=&quot;http://stackoverflow.com/a/32998963/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Visual C++ Redistributable for Visual Studio XXXX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is much harder. You would get an exception:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;Message&amp;quot;:&amp;quot;An error has occurred.&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;ExceptionMessage&amp;quot;:&amp;quot;Unable to load DLL &amp;apos;CNTKLibraryCSBinding&amp;apos;: The specified module could not be found. (Exception from HRESULT: 0x8007007E)&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;ExceptionType&amp;quot;:&amp;quot;System.DllNotFoundException&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;StackTrace&amp;quot;:&amp;quot; : &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     CNTK.CNTKLibPINVOKE.SWIGExceptionHelper.SWIGRegisterExceptionCallbacks_CNTKLib(...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     CNTK.CNTKLibPINVOKE.SWIGExceptionHelper..cctor()&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It is as if &lt;code&gt;CNTKLibraryCSBinding.dll&lt;/code&gt; couldn&#39;t be found, but in fact it is some library that this native library depends.&lt;/p&gt;
&lt;p&gt;How do you find out what is missing? For managed assembly loading issue, one could use &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/e74a18c4(v=vs.110).aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fuslogvw.exe&lt;/a&gt;, however it doesn&#39;t work for &lt;code&gt;DllImport()&lt;/code&gt; issues. There are several solutions suggested on the web. You could try sysinternals &lt;code&gt;procmon&lt;/code&gt;. Or &lt;code&gt;gflags&lt;/code&gt;. But I have luck with &lt;a href=&quot;http://www.dependencywalker.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DependencyWalker&lt;/a&gt;. It can be used to &lt;strong&gt;statically&lt;/strong&gt; analyze the dependency tree. But in case of &lt;code&gt;DllImport()&lt;/code&gt;, which is runtime load, use the profiling feature. Give it the application, start profiling, run to the place it would throw the exception. Look for libraries that are missing.&lt;/p&gt;
&lt;p&gt;In my case, it happens to be the &lt;a href=&quot;http://stackoverflow.com/a/32998963/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Visual C++ Redistributable for Visual Studio 2015 (&lt;code&gt;msvcp140.dll&lt;/code&gt;)&lt;/a&gt; that&#39;s missing from my test server. That explains why I could run the same program on dev box without problem.&lt;/p&gt;
&lt;p&gt;Here&#39;re all the online articles that helped:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/3818482/dllimport-generates-system-dllnotfoundexception&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DllImport generates System.DllNotFoundException&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/10774250/dllnotfoundexception-with-hresult-0x8007007e-when-loading-64-bit-dll&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DllNotFoundException with HRESULT 0x8007007E when loading 64-bit dll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/269181/when-a-dll-is-not-found-while-p-invoking-how-can-i-get-a-message-about-the-spec&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;When a DLL is not found while P/Invoking, how can I get a message about the specific unmanaged DLL that is missing?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/2093485/system-dllnotfoundexception-unable-to-load-dll-on-window-2003&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;System.DllNotFoundException: Unable to load DLL on window 2003&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/39223976/dllnotfoundexception-pinvoke-issue&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DllNotFoundException PInvoke
        
      
    
    </summary>
    
    
      <category term="c#" scheme="http://kflu.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Chicken Scheme Notes</title>
    <link href="http://kflu.github.io/2017/02/22/2017-02-22-chicken-scheme-notes/"/>
    <id>http://kflu.github.io/2017/02/22/2017-02-22-chicken-scheme-notes/</id>
    <published>2017-02-22T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;There&#39;re many ways to install chicken scheme on Windows. I recommend compile it from source. It&#39;s because down the road you may need to compile an egg (like what I had to do with &lt;code&gt;openssl&lt;/code&gt; egg), you need a matching compiler that matches the one compiled chicken. This avoids a lot of the mystic problems down the road. And as of now, is the only way that worked for me. So here you go.&lt;/p&gt;
&lt;h1&gt;Compiling Chicken in Mingw&lt;/h1&gt;
&lt;p&gt;This guide shows how to compile chicken using msys. I recommend msys over vanilla mingw, since mostly the same msys will be needed in the future to compile egg dependencies.&lt;/p&gt;
&lt;p&gt;Download chicken source from &lt;a href=&quot;http://code.call-cc.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. In msys console, unzip to &lt;code&gt;~/work/chicken&lt;/code&gt;. Now determine where on the &lt;strong&gt;host&lt;/strong&gt; system you want to install chicken. I want to install it at &lt;code&gt;c:&#92;chicken&lt;/code&gt;, so in msys, do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir /c/chicken
make PLATFORM=mingw-msys PREFIX=/c/chicken
make PLATFORM=mingw-msys PREFIX=/c/chicken install
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once installed, add &lt;code&gt;&amp;lt;mingw&amp;gt;/bin&lt;/code&gt; to PATH so chicken executables knows where to find the gcc runtime (&lt;code&gt;libgcc_*&lt;/code&gt;). Otherwise, you&#39;ll see &lt;a href=&quot;http://stackoverflow.com/q/4702732/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this error&lt;/a&gt;. I tried to compile chicken with gcc option &lt;code&gt;-static-libgcc&lt;/code&gt; but the compilation would fail.&lt;/p&gt;
&lt;p&gt;And you may need to add the installation path (c:&#92;chicken) in this case to &lt;code&gt;CHICKEN_PREFIX&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tip&lt;/strong&gt; if you encounter problem with &lt;code&gt;csc&lt;/code&gt;, always check &lt;code&gt;CHECK_PREFIX&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Test it out&lt;/h2&gt;
&lt;p&gt;You can run post-install test according to the &lt;a href=&quot;https://code.call-cc.org/cgi-bin/gitweb.cgi?p=chicken-core.git;a=blob;f=README;h=97888053ca98704d761ac944ec555885391d7d9a;hb=6ea24b60e7ef93e2f7c668bdb0437c0189e47dcd&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;README&lt;/code&gt;&lt;/a&gt;, with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;make PLATFORM=mingw-msys PREFIX=/c/chicken check
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;run &lt;code&gt;csi&lt;/code&gt; to test the interpreter&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;csc&lt;/code&gt; to test the compiler&lt;/li&gt;
&lt;li&gt;try installing extensions with &lt;code&gt;chicken-install &amp;lt;egg&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Problem installing &lt;code&gt;openssl&lt;/code&gt; egg&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;openssl&lt;/code&gt; requires an installation of openssl libraries and the header files accessible by chicken compiler. The easiest way I found is to compile openssl (straightforward) and drop the header files (&lt;code&gt;include/openssl/*&lt;/code&gt;) and lib files (&lt;code&gt;libssl.a&lt;/code&gt;, &lt;code&gt;libcrypto.a&lt;/code&gt;) to chicken directories.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;headers are at &lt;code&gt;&amp;lt;chicken&amp;gt;/include&#92;chicken&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;libs are at &lt;code&gt;&amp;lt;chicken&amp;gt;/lib&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Compiling OpenSSL in Mingw&lt;/h2&gt;
&lt;p&gt;Download openssl source (v1.0.2k) from &lt;a href=&quot;https://www.openssl.org/source/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. Extract it to msys home directory. From msys console, follow instruction in &lt;code&gt;INSTALL&lt;/code&gt; file:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This compiles &lt;code&gt;libssl.a&lt;/code&gt; and &lt;code&gt;libcrypto.a&lt;/code&gt; at source root. All header files are copied to &lt;code&gt;include/openssl&lt;/code&gt;. They can then be copied to the corresponding chicken directories.&lt;/p&gt;
&lt;h1&gt;Pending Issues&lt;/h1&gt;
&lt;p&gt;Extensions cannot be statically linked, e.g., &lt;code&gt;http-client&lt;/code&gt;. See this &lt;a href=&quot;http://stackoverflow.com/q/38928186/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SO question&lt;/a&gt;. &lt;a href=&quot;http://www.foldling.org/scheme.html#compiling-statically-linked-chicken-scheme-programs-with-extensions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This blog post&lt;/a&gt; offers a way to do this by manually compiling the dependencies with &lt;code&gt;csc&lt;/code&gt;, might worth a try. &lt;a href=&quot;https://lists.nongnu.org/archive/html/chicken-users/2014-04/msg00000.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This thread&lt;/a&gt; reports a similar problem.&lt;/p&gt;
&lt;h1&gt;Relevant notes&lt;/h1&gt;
&lt;p&gt;The below are notes I took along fixing the issues, mostly building eggs. They were actions I took before fully compiling chicken from source. Might still offer some insights.&lt;/p&gt;
&lt;p&gt;The chicken binaries (especially &lt;code&gt;csc&lt;/code&gt;) is tightly related to the location of the C compiler that compiled it. I got a working copy of chicken and &lt;code&gt;csc&lt;/code&gt; by installing it and its depedency &lt;code&gt;mingw&lt;/code&gt; from Chocolatey. Chicken is installed at &lt;code&gt;c:&#92;chicken&lt;/code&gt;, &lt;code&gt;mingw&lt;/code&gt; is installed at &lt;code&gt;c:&#92;tools&#92;mingw&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, I have problem installing &lt;code&gt;openssl&lt;/code&gt; egg. Here documents the attempts to fix them.&lt;/p&gt;
&lt;h2&gt;Problem: cannot find openssl/rand.h&lt;/h2&gt;
&lt;p&gt;Initially solved with downloading openssl developer library and extracts headers from &lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/openssl.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;OpenSSL for Windows&lt;/a&gt; into chicken installation path.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tip&lt;/strong&gt; Chicken installation structure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;headers are at &lt;code&gt;&amp;lt;chicken&amp;gt;/include&#92;chicken&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;libs are at &lt;code&gt;&amp;lt;chicken&amp;gt;/lib&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This leads to the next problem. A proper fix for this would be to build openssl from mingw.&lt;/p&gt;
&lt;h2&gt;Problem: header naming clash**&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C:/chicken/include/chicken/openssl/ossl_typ.h:176:33: error: expected &amp;apos;)&amp;apos; before numeric constant&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; typedef struct ocsp_response_st OCSP_RESPONSE;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;There&#39;s header macro name clash (&lt;code&gt;OCSP_RESPONSE&lt;/code&gt;) in &lt;code&gt;wincrypto.h&lt;/code&gt; and &lt;code&gt;ossl-typ.h&lt;/code&gt;.  Inspired by this issue on SourceForge&lt;a href=&quot;https://sourceforge.net/p/podofo/mailman/message/35158528/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;1&lt;/a&gt; and its diff attachment, I came up with the following fix for &lt;code&gt;openssl.scm&lt;/code&gt; in the egg:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*** &amp;quot;openssl&#92;&#92;openssl.orig.scm&amp;quot;   Wed Feb 22 01:21:45 2017&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- &amp;quot;openssl&#92;&#92;openssl.scm&amp;quot;        Wed Feb 22 01:21:12 2017&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;***************&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*** 62,68 ****&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;--- 62,79 ----&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #ifdef _MSC_VER&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      #include &amp;lt;winsock2.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #else&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     #ifndef NOCRYPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     #define PODOFO_NO_WINCRYPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     #define NOCRYPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     #endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      #include &amp;lt;ws2tcpip.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     #ifdef PODOFO_NO_WINCRYPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     #undef NOCRYPT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+     #endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #endif&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    #include &amp;lt;openssl/rand.h&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; to debug chicken installation problem, use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chicken-install -k -debug &amp;lt;egg&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-k&lt;/code&gt; keeps the temporary working directory where the egg files are located. It is helpful for allowing subsequent installation from the locally fixed egg files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; to install egg from local directory:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chicken-install -transport local -location C:&#92;Users&#92;username&#92;AppData&#92;Local&#92;Temp&#92;tempd5e8.3100&#92; openssl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See &lt;a href=&quot;https://wiki.call-cc.org/man/4/Extensions#other-modes-of-installation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;quot;other modes of installation&amp;quot;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This leads to the next problem.&lt;/p&gt;
&lt;h2&gt;Problem: library incompatibility&lt;/h2&gt;
&lt;p&gt;Now that compilation is successful, the linker couldn&#39;t locate &lt;code&gt;libssl&lt;/code&gt; and &lt;code&gt;libcrypto&lt;/code&gt;. Still solved this issue by dropping these two files from &lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/openssl.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;openssl developer library&lt;/a&gt; into &lt;code&gt;&amp;lt;chicken&amp;gt;/lib&lt;/code&gt;. Now I got library incompatibility at linker stage:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C:/tools/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/5.3.0/../../../../x86_64-w64-mingw32/bin/ld.exe: skipping incompatible C:&#92;chicken&#92;lib&#92;/libssl.a when searching for -lssl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C:/tools/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/5.3.0/../../../../x86_64-w64-mingw32/bin/ld.exe: cannot find
        
      
    
    </summary>
    
    
      <category term="lisp" scheme="http://kflu.github.io/tags/lisp/"/>
    
  </entry>
  
  <entry>
    <title>How .NET runtime locates assemblies</title>
    <link href="http://kflu.github.io/2017/02/15/2017-02-15-dotnet-locating-assemblies/"/>
    <id>http://kflu.github.io/2017/02/15/2017-02-15-dotnet-locating-assemblies/</id>
    <published>2017-02-15T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/yx7xezcf(v=vs.110).aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This article&lt;/a&gt; talks about this topic in detail.&lt;/p&gt;
&lt;p&gt;Usually the assemblies are found in the same directory of the running process. But it can be extended by using the application config file or &lt;code&gt;web.config&lt;/code&gt; (same schema). The main configuration point is &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/twy1dw1e(v=vs.110).aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;&amp;lt;assemblyBinding&amp;gt;&lt;/code&gt;&lt;/a&gt; tag. There&#39;re two ways to it:&lt;/p&gt;
&lt;p&gt;In the first approach, you can specify each individual assembly with &lt;code&gt;&amp;lt;dependentAssembly&amp;gt;&lt;/code&gt; tag. It even allows you to specify version redirection:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependentAssembly&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;assemblyIdentity name=&amp;quot;Newtonsoft.Json&amp;quot; publicKeyToken=&amp;quot;...&amp;quot; culture=&amp;quot;neutral&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;codeBase version=&amp;quot;6.0.0.0&amp;quot; href=&amp;quot;file:///C:&#92;Program Files&#92;foo&#92;bar&#92;Newtonsoft.Json.dll&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;bindingRedirect oldVersion=&amp;quot;0.0.0.0-6.0.0.0&amp;quot; newVersion=&amp;quot;6.0.0.0&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependentAssembly&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In the second approach, you can specify a &amp;quot;probing&amp;quot; sub-directory with &lt;code&gt;&amp;lt;probing&amp;gt;&lt;/code&gt; tag. The limitation is that the probing location has to be a sub-directory of the process directory.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;configuration&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;runtime&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;assemblyBinding xmlns=&amp;quot;urn:schemas-microsoft-com:asm.v1&amp;quot;&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &amp;lt;probing privatePath=&amp;quot;bin;bin2&#92;subbin;bin3&amp;quot;/&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/assemblyBinding&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &amp;lt;/runtime&amp;gt;  &lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
    
      <category term=".net" scheme="http://kflu.github.io/tags/net/"/>
    
  </entry>
  
  <entry>
    <title>OWIN, Katana, ASP.NET Web API / MVC</title>
    <link href="http://kflu.github.io/2017/02/14/2017-02-14-owin-katana-aspnet/"/>
    <id>http://kflu.github.io/2017/02/14/2017-02-14-owin-katana-aspnet/</id>
    <published>2017-02-14T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;&lt;a href=&quot;https://www.asp.net/media/4071077/aspnet-web-api-poster.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This ASP.NET Web API poster&lt;/a&gt; is awesome!&lt;/p&gt;
&lt;p&gt;tl;dr - It is very easy to write self-hosting C#/F# ASP.NET MVC/Web API application, without using any Visual Studio non-sense (templates, plugins, etc.)&lt;/p&gt;
&lt;p&gt;Reading &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/aspnet/overview/owin-and-katana/an-overview-of-project-katana&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;An overview of Project Katana&lt;/a&gt; (A HIGHLY RECOMMENDED READ) helped a lot understanding the relationship between the Microsoft web stack. OWIN is the spec laying out how to build middleware and web app in a chainable fashion. This is very similar to the apps concept in Express.js. Everything as small as authentication to as large as a web framework can be defined as a middleware.&lt;/p&gt;
&lt;p&gt;Katana is an implementation of OWIN and related tools.&lt;/p&gt;
&lt;p&gt;On top of this, you can then write ASP.NET MVC/Web API and host them as OWIN apps.&lt;/p&gt;
&lt;p&gt;To self host a Web API app, there&#39;re two options,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;use OWIN selfhost (&lt;code&gt;Microsoft.Owin.SelfHost&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;use Web API home brew selfhoting (System.Web.Http.SelfHost)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If #2 is chosen, then it&#39;s completely separated from the OWIN stack.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The core OWIN nuget package is &lt;code&gt;OWIN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The core Katana nuget package is &lt;code&gt;Microsoft.Owin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The OWIN self host package is &lt;code&gt;Microsoft.Owin.SelfHost&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The core ASP.NET Web API package is &lt;code&gt;Microsoft.AspNet.WebApi.Core&lt;/code&gt;, but the assembly name is &lt;code&gt;System.Web.Http&lt;/code&gt; (so f**king confusing)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Useful documents for developing Web API and self hosting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To understand OWIN/Katana/ASP.NET: &lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/aspnet/overview/owin-and-katana/an-overview-of-project-katana&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;An overview of Project Katana&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/web-api-routing-and-actions/routing-and-action-selection&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Routing and Action Selection in ASP.NET Web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/advanced/configuring-aspnet-web-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Configuring ASP.NET Web API 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/older-versions/self-host-a-web-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Self-Host ASP.NET Web API 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/hosting-aspnet-web-api/use-owin-to-self-host-web-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Use OWIN to Self-Host ASP.NET Web API 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/media-formatters&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Media Formatters in ASP.NET Web API 2&lt;/a&gt; (&lt;a href=&quot;https://docs.microsoft.com/en-us/aspnet/web-api/overview/formats-and-model-binding/json-and-xml-serialization&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JSON&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&#39;s &lt;a href=&quot;https://gist.github.com/kflu/32e0ec23eb8a57294fa2ab1e5bd33869&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;a vanilla Wep API application&lt;/a&gt; without any Visual Studio non-sense:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;namespace Foo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    using System;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    using System.Net;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    using System.Threading;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    using System.Linq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    using System.Collections.Generic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    using System.Text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    using Newtonsoft.Json;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    using System.Web.Http;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    using System.Web.Http.SelfHost;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// Main class&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static class MainClass&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        static void Main(string[] args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var addr = new Uri(&amp;quot;http://localhost:8001&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            using (var config = new HttpSelfHostConfiguration(addr))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                config.Routes.MapHttpRoute(&amp;quot;default&amp;quot;, &amp;quot;api/&amp;#123;controller&amp;#125;&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                using (var srv = new HttpSelfHostServer(config))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    srv.OpenAsync().Wait();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Console.WriteLine(&amp;quot;Server started&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Console.ReadLine();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Console.WriteLine(&amp;quot;done&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public class ProductController : ApiController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public class Result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public int Code;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            public object Metadata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [HttpPost]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        public Result Post([FromBody]int[] data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            return new Result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Code = 1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Metadata = data,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
    
      <category term="c#" scheme="http://kflu.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Reverse Proxy, SSL</title>
    <link href="http://kflu.github.io/2017/02/09/2017-02-09-nginx-proxy-ssl/"/>
    <id>http://kflu.github.io/2017/02/09/2017-02-09-nginx-proxy-ssl/</id>
    <published>2017-02-09T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Nginx is awesome - awesomely simple! I set it up on my FreeBSD home server. I like the idea of reverse proxy. For any application that can service a local port via HTTP. Nginx is able to serve it publicly via proxy. Here&#39;s the scenario:&lt;/p&gt;
&lt;p&gt;I have a TiddlyWiki node.js app, which is ONLY capable of HTTP, but not HTTPS. That&#39;s dangerous with basic auth (which TIddlyWiki only supports). But no problem. Assuming the TiddlyWiki serves a local 8080 port. We can use Nginx to proxy that to a public facing 443 HTTPS port. Here&#39;s how.&lt;/p&gt;
&lt;h1&gt;Install Nginx on FreeBSD&lt;/h1&gt;
&lt;p&gt;This is as simple as&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pkg install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That&#39;s only ~1MB.&lt;/p&gt;
&lt;p&gt;Note that configurations are installed at &lt;code&gt;/usr/local/etc/&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Main configuration at &lt;code&gt;/usr/local/etc/nginx/nginx.conf&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Service script at &lt;code&gt;/usr/local/etc/rc.d/nginx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Setup Nginx&lt;/h1&gt;
&lt;p&gt;Enable the service in &lt;code&gt;/etc/rc.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nginx_enable=&amp;quot;YES&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start the service manually:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;service nginx start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Generate SSL certificate with (refer to &lt;a href=&quot;https://www.freebsd.org/doc/handbook/openssl.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;freebsd doc&lt;/a&gt;). And copy them to &lt;code&gt;/usr/local/etc/nginx/&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;openssl req -new -nodes -out cert.crt -keyout cert.key -sha256 -newkey rsa:2048
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Configure &lt;code&gt;/usr/local/etc/nginx/nginx.conf&lt;/code&gt; according to the nginx document (&lt;a href=&quot;http://nginx.org/en/docs/beginners_guide.html#control&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2&lt;/a&gt;,&lt;a href=&quot;https://www.nginx.com/resources/admin-guide/reverse-proxy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;3&lt;/a&gt;,&lt;a href=&quot;http://nginx.org/en/docs/http/configuring_https_servers.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;4&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;Disable the HTTP 80 section by commenting out the below section:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
	listen: 80;
	...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enable the HTTPS section likewise.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# HTTPS server
#
server {
    listen       443 ssl;
    server_name  localhost;
    ssl_certificate      cert.crt;
    ssl_certificate_key  cert.key;

    ...

    location / {
        proxy_pass  http://localhost:8080;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;proxy_pass&lt;/code&gt; line specifies to proxy local endpoint 8080.&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/en/docs/beginners_guide.html#control&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nginx newbie doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.nginx.com/resources/admin-guide/reverse-proxy/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nginx reverse proxy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/configuring_https_servers.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nginx https config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/doc/handbook/openssl.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;freebsd ssl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://security.stackexchange.com/questions/8110/what-are-the-risks-of-self-signing-a-certificate-for-ssl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;What are the risks of self signing a certificate for
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
      <category term="nginx" scheme="http://kflu.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>FreeBSD daemon</title>
    <link href="http://kflu.github.io/2017/02/09/2017-02-09-freebsd-daemon/"/>
    <id>http://kflu.github.io/2017/02/09/2017-02-09-freebsd-daemon/</id>
    <published>2017-02-09T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;The canonical way to create system services are using &lt;code&gt;rc.d&lt;/code&gt; system. While those scripts are easy to write, thanks to this &lt;a href=&quot;https://www.freebsd.org/doc/en_US.ISO8859-1/articles/rc-scripting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;guide&lt;/a&gt;, I&#39;ve run into several issues having my script to run correctly. That is although I can manually start the service (as root) with &lt;code&gt;/etc/rc.d/myservice start&lt;/code&gt; (&lt;em&gt;maybe I should try &lt;code&gt;service myservice start&lt;/code&gt; next time?&lt;/em&gt;), when the system boots, it fails to run, due to errors like, &lt;code&gt;bash&lt;/code&gt; couldn&#39;t be found, &lt;code&gt;node&lt;/code&gt; couldn&#39;t be found.&lt;/p&gt;
&lt;p&gt;I&#39;ve better luck with crontab though. The nice thing is I get to reuse the script I wrote for the rc.d. I just install a crontab line &lt;code&gt;@reboot path/to/script start&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[root@bsd /usr/jails/tiddly/var/cron/tabs]# cat root
# DO NOT EDIT THIS FILE - edit the master and reinstall.
# (/tmp/crontab.3lLCXYWdq3 installed on Thu Feb  9 21:07:27 2017)
# (Cron version -- $FreeBSD: releng/11.0/usr.sbin/cron/crontab/crontab.c 305427                                                                                                          2016-09-05 16:43:57Z emaste $)
@reboot /root/wiki/wiki start
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Normally a daemon can be created by putting this in shell script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(nohup /path/to/daemon.sh &amp;gt;&amp;gt; log_file 2&amp;gt;&amp;amp;1 &amp;amp;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Quoted from one of the comments:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The parentheses in (nohup sleep 20 &amp;amp;) do make a difference. They specify a sub-shell. Inside the sub-shell, the nohup command executes the sleep command in the background. When it returns, the sub-shell exits, so the sleep is orphaned, no longer &#39;owned&#39; by the current shell.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Refer to this &lt;a href=&quot;http://stackoverflow.com/questions/958249/whats-the-difference-between-nohup-and-a-daemon&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;awesome SO post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another way that&#39;s more awesome is to use &lt;code&gt;screen&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;screen -d -m /path/to/daemon.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;screen&lt;/code&gt; runs the script and then &lt;strong&gt;detaches&lt;/strong&gt;. What&#39;s cool about this approach is that at any time, you can reattach to the &lt;code&gt;screen&lt;/code&gt; session and interact with the daemon! I need to figure out a way make &lt;code&gt;daemon.sh&lt;/code&gt; also produces
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>FreeBSD jails configuration</title>
    <link href="http://kflu.github.io/2017/02/06/2017-02-06-freebsd-jails/"/>
    <id>http://kflu.github.io/2017/02/06/2017-02-06-freebsd-jails/</id>
    <published>2017-02-06T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1&gt;Set up &lt;code&gt;ezjail&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;Follow this &lt;a href=&quot;https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/jails-ezjail.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;doc&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;clone &lt;code&gt;lo0&lt;/code&gt; to &lt;code&gt;lo1&lt;/code&gt; in &lt;code&gt;/etc/rc.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cloned_interfaces=&amp;quot;lo1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To create it without reboot: &lt;code&gt;service netif cloneup&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Install &lt;code&gt;ezjail&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd /usr/ports/sysutils/ezjail &amp;amp; make install clean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Enable &lt;code&gt;ezjail&lt;/code&gt; in &lt;code&gt;rc.conf&lt;/code&gt;: &lt;code&gt;ezjail_enable=&amp;quot;YES&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Start &lt;code&gt;ezjail&lt;/code&gt;: &lt;code&gt;service ezjail start&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To setup the base environment: &lt;code&gt;ezjail-admin install -p&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Copy host&#39;s &lt;code&gt;resolv.conf&lt;/code&gt; to jail&#39;s template so each newly created jail
is able to resolve domain names:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;host&amp;gt; cp /etc/resolv.conf /usr/jails/newjail/etc/
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Networking&lt;/h1&gt;
&lt;h2&gt;Conventional way&lt;/h2&gt;
&lt;p&gt;Each jail must be asigned an IP. Traditionally in &lt;code&gt;ezjail&lt;/code&gt;, this is done
as part of jail creation:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ezjail-admin create dnsjail &#39;lo1|127.0.1.1,em0|192.168.1.50&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This would assign &lt;code&gt;dnsjail&lt;/code&gt; a private IP &lt;code&gt;127.0.1.1&lt;/code&gt; on lo1, and an aliased IP
&lt;code&gt;192.168.1.50&lt;/code&gt;. The latter is an alias IP the &lt;strong&gt;host&lt;/strong&gt; OS creates. You can see
it with &lt;code&gt;ifconfig em0&lt;/code&gt; in the host. Also the host is accessible via this IP
in its LAN. For more information about IP aliasing, see &lt;a href=&quot;https://www.freebsd.org/doc/handbook/configtuning-virtual-hosts.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;virtual host&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then in the jail, edit &lt;code&gt;hosts&lt;/code&gt; to change &lt;code&gt;127.0.0.1&lt;/code&gt; to &lt;code&gt;127.0.1.1&lt;/code&gt; and add
the jail&#39;s hostname to each entry. This is &lt;strong&gt;essential&lt;/strong&gt; for it to access
internet.&lt;/p&gt;
&lt;p&gt;But this is hard to manage, each network-talking jail needs an IP and you need to
configure router for each of these IPs. Rather, it would be good if the jails
can do networking through host&#39;s IP address. That&#39;s what the next section is about.&lt;/p&gt;
&lt;h2&gt;Networking through host&#39;s IP&lt;/h2&gt;
&lt;p&gt;Inspired by &lt;a href=&quot;https://www.davd.eu/posts-freebsd-jails-with-a-single-public-ip-address/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this post&lt;/a&gt;. It&#39;s done through NAT. You still need a pool
of IPs but they don&#39;t need to be aliases to host&#39;s IP.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;/etc/rc.conf&lt;/code&gt;, add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cloned_interfaces=&amp;quot;lo1&amp;quot;
ipv4_addrs_lo1=&amp;quot;192.168.60.1-9/29&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note the range &lt;code&gt;192.168.60.1 ~ 192.168.60.9&lt;/code&gt;. I previously used &lt;code&gt;192.168.0.1-9&lt;/code&gt; and I
lost network connection to my host.&lt;/p&gt;
&lt;p&gt;Now restart &lt;code&gt;netif&lt;/code&gt;: &lt;code&gt;host&amp;gt; service netif restart&lt;/code&gt;. And you should see the newly created
IPs.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;em0: flags=8843&amp;lt;UP,BROADCAST,RUNNING,SIMPLEX,MULTICAST&amp;gt; metric 0 mtu 1500
    options=4219b&amp;lt;RXCSUM,TXCSUM,VLAN_MTU,VLAN_HWTAGGING,VLAN_HWCSUM,TSO4,WOL_MAGIC,VLAN_HWTSO&amp;gt;
    ether ...
    inet 192.168.0.7 netmask 0xffffff00 broadcast 192.168.0.255 
    nd6 options=29&amp;lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL&amp;gt;
    media: Ethernet autoselect (100baseTX &amp;lt;full-duplex&amp;gt;)
    status: active
lo0: flags=8049&amp;lt;UP,LOOPBACK,RUNNING,MULTICAST&amp;gt; metric 0 mtu 16384
    options=600003&amp;lt;RXCSUM,TXCSUM,RXCSUM_IPV6,TXCSUM_IPV6&amp;gt;
    inet6 ::1 prefixlen 128 
    inet6 fe80::1%lo0 prefixlen 64 scopeid 0x2 
    inet 127.0.0.1 netmask 0xff000000 
    nd6 options=21&amp;lt;PERFORMNUD,AUTO_LINKLOCAL&amp;gt;
    groups: lo 
lo1: flags=8049&amp;lt;UP,LOOPBACK,RUNNING,MULTICAST&amp;gt; metric 0 mtu 16384
    options=600003&amp;lt;RXCSUM,TXCSUM,RXCSUM_IPV6,TXCSUM_IPV6&amp;gt;
    inet 192.168.60.1 netmask 0xfffffff8 
    inet 192.168.60.2 netmask 0xffffffff 
    inet 192.168.60.3 netmask 0xffffffff 
    inet 192.168.60.4 netmask 0xffffffff 
    inet 192.168.60.5 netmask 0xffffffff 
    inet 192.168.60.6 netmask 0xffffffff 
    inet 192.168.60.7 netmask 0xffffffff 
    inet 192.168.60.8 netmask 0xffffffff 
    inet 192.168.60.9 netmask 0xffffffff 
    nd6 options=29&amp;lt;PERFORMNUD,IFDISABLED,AUTO_LINKLOCAL&amp;gt;
    groups: lo 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we use &lt;code&gt;pf&lt;/code&gt; to map traffics to and from jails.&lt;/p&gt;
&lt;p&gt;Enable &lt;code&gt;pf&lt;/code&gt; by adding to &lt;code&gt;rc.conf&lt;/code&gt;: &lt;code&gt;pf_enable=&amp;quot;YES&amp;quot;&lt;/code&gt;. Edit &lt;code&gt;/etc/pf.conf&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Public IP address
IP_PUB=&amp;quot;&amp;lt;host&#39;s public IP&amp;gt;&amp;quot;

# Packet normalization
scrub in all

# Allow outbound connections from within the jails
nat on em0 from lo1:network to any -&amp;gt; (em0)

# webserver jail at 192.168.60.2
rdr on em0 proto tcp from any to $IP_PUB port 443 -&amp;gt; 192.168.60.2
rdr on em0 proto tcp from any to $IP_PUB port 80 -&amp;gt; 192.168.60.2
# .. or map jail&#39;s host&#39;s 80 to jail&#39;s 8080:
# rdr on em0 proto tcp from any to $IP_PUB port 80 -&amp;gt; 192.168.60.2 port 8080

# mailserver jail at 192.168.60.3
rdr on em0 proto tcp from any to $IP_PUB port 25 -&amp;gt; 192.168.60.3  
rdr on em0 proto tcp from any to $IP_PUB port 587 -&amp;gt; 192.168.60.3  
rdr on em0 proto tcp from any to $IP_PUB port 143 -&amp;gt; 192.168.60.3  
rdr on em0 proto tcp from any to $IP_PUB port 993 -&amp;gt; 192.168.60.3  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Start &lt;code&gt;pf&lt;/code&gt;: &lt;code&gt;host&amp;gt; service pf start&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now creating a jail is simply:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ezjail-admin create &amp;lt;jail_name&amp;gt; &amp;lt;IP&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;where &lt;code&gt;IP&lt;/code&gt; is one of those of &lt;code&gt;lo1&lt;/code&gt;&#39;s newly created, e.g., &lt;code&gt;192.168.60.2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can set up another interface &lt;code&gt;lo2&lt;/code&gt; but without configuring NAT for its network, in that case
the jail is restricted to LAN access only:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cloned_interfaces=&amp;quot;lo1 lo2&amp;quot;
ipv4_addrs_lo1=&amp;quot;192.168.60.1-9/29&amp;quot;  # Set up NAT for them
ipv4_addrs_lo2=&amp;quot;192.168.70.1-9/29&amp;quot;  # Don&#39;t set up NAT for them
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I observed start of jail with LAN-only access is slower, maybe due to services
requiring internet timed out during start.&lt;/p&gt;
&lt;h1&gt;Jail accessing file system outside of jail&lt;/h1&gt;
&lt;p&gt;This can be done by &lt;code&gt;nullfs_mount&lt;/code&gt;. Basically by mounting a part of the host file system
under the jail&#39;s root:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir /usr/jails/&amp;lt;jail_name&amp;gt;/data
mount -t nullfs -o ro /data /usr/jails/&amp;lt;jail_name&amp;gt;/data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternatively, add this to the jail-specific &lt;code&gt;fstab&lt;/code&gt; at: &lt;code&gt;/etc/fstab.&amp;lt;jail_name&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/data /usr/jails/&amp;lt;jail_name&amp;gt;/data nullfs ro
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However there&#39;s a [bug I&#39;m currently investigating][nullfs_issue], where the
mount yields inconsistent subfolders.&lt;/p&gt;
&lt;h1&gt;Working with jails:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;List: &lt;code&gt;jls [-v]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start/stop: &lt;code&gt;ezjail-admin &amp;lt;start|stop|restart&amp;gt; &amp;lt;jail_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;delete: &lt;code&gt;ezjail-admin delete [-w] &amp;lt;jail_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ezjail&lt;/code&gt;&#39;s per-jail configuration is in directory &lt;code&gt;/usr/local/etc/ezjail&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ezjail&lt;/code&gt;&#39;s per-jail root is in &lt;code&gt;/usr/jails/&amp;lt;jail_name&amp;gt;&lt;/code&gt; directory. Here you
can modify jail&#39;s settings that&#39;s created at creation, e.g., the IP.&lt;/li&gt;
&lt;li&gt;In jails you can&#39;t use &lt;code&gt;ping&lt;/code&gt; to test network connection, instead, use
&lt;code&gt;telnet google.com 80&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Root of a jail is at &lt;code&gt;/usr/jails/&amp;lt;jail_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Jail-specific &lt;code&gt;fstab&lt;/code&gt; are at &lt;code&gt;/etc/fstab.&amp;lt;jail_name&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Accessing mounted file systems from inside jail&lt;/h1&gt;
&lt;p&gt;Host file system can be mounted to jail by modifying &lt;code&gt;/etc/fstab.&amp;lt;jail_name&amp;gt;&lt;/code&gt;.
Inside the jail, the mounted file system has the same ACL as in the host. But
the owner/group are shown as IDs. If a user inside jail (e.g., &lt;code&gt;www&lt;/code&gt;) wants to
access the file system, we must first create a user/group inside jail with the
corresponding owner/group ID. And give the target jail user the corresponding
ACL inside the jail. Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# /tmp/foo/ has 333:8000
jail&amp;gt; pw groupadd foo_group -g 8000  # create foo_group with ID 8000 inside jail
jail&amp;gt; pw groupmod www -m foo_group   # add jail user `www` to foo_group
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/jails-ezjail.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FreeBSD EZJail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.davd.eu/posts-freebsd-jails-with-a-single-public-ip-address/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Single IP jails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Networking troubleshooting&lt;/h1&gt;
&lt;h2&gt;Routing rable&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;host&amp;gt; netstat -r
Routing tables

Internet:
Destination        Gateway            Flags     Netif Expire
default            192.168.0.1        UGS         em0
hostname-bsd       link#2             UH          lo0
192.168.0.0/24     link#1             U           em0
192.168.0.7        link#1             UHS         lo0
192.168.60.1       link#3             UH          lo1
192.168.60.2       link#3             UH          lo1
192.168.60.3       link#3             UH          lo1
192.168.60.4       link#3             UH          lo1
192.168.60.5       link#3             UH          lo1
192.168.60.6       link#3             UH          lo1
192.168.60.7       link#3             UH          lo1
192.168.60.8       link#3             UH          lo1
192.168.60.9       link#3             UH          lo1

Internet6:
Destination        Gateway            Flags     Netif Expire
::/96              hostname-bsd       UGRS        lo0
hostname-bsd       link#2             UH          lo0
::ffff:0.0.0.0/96  hostname-bsd       UGRS        lo0
fe80::/10          hostname-bsd       UGRS        lo0
fe80::%lo0/64      link#2             U           lo0
fe80::1%lo0        link#2             UHS         lo0
ff02::/16          hostname-bsd       UGRS       
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>ASCII table (re)explained</title>
    <link href="http://kflu.github.io/2017/02/02/2017-02-02-ascii-table/"/>
    <id>http://kflu.github.io/2017/02/02/2017-02-02-ascii-table/</id>
    <published>2017-02-02T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.627Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This totally blew my mind. Look at the ASCII table, organized in 4 columns:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        00    01    10    11
00000   NUL  Spc     @     `
00001   SOH    !     A     a
00010   STX    &amp;quot;     B     b
00011   ETX    #     C     c
00100   EOT    $     D     d
00101   ENQ    %     E     e
00110   ACK    &amp;amp;     F     f
00111   BEL    &#39;     G     g
01000   BS     (     H     h
01001   TAB    )     I     i
01010   LF     *     J     j
01011   VT     +     K     k
01100   FF     ,     L     l
01101   CR     -     M     m
01110   SO     .     N     n
01111   SI     /     O     o
10000   DLE    0     P     p
10001   DC1    1     Q     q
10010   DC2    2     R     r
10011   DC3    3     S     s
10100   DC4    4     T     t
10101   NAK    5     U     u
10110   SYN    6     V     v
10111   ETB    7     W     w
11000   CAN    8     X     x
11001   EM     9     Y     y
11010   SUB    :     Z     z
11011   ESC    ;     [     {
11100   FS     &amp;lt;     &#92;     |
11101   GS     =     ]     }
11110   RS     &amp;gt;     ^     ~
11111   US     ?     _   DEL
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Observations&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://worldpowersystems.com/archives/codes/X3.4-1963/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This original paper&lt;/a&gt; lists the design considerations (gets
interesting at page 7). &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII#Internal_organization&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Wikipedia&lt;/a&gt; lists some interesting designs too.
Some are explained &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII#Internal_organization&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. Some are explained in the HN comments
&lt;a href=&quot;https://news.ycombinator.com/item?id=13539552&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/item?id=13499386&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. And this &lt;a href=&quot;http://trafficways.org/ascii/ascii.pdf&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pdf paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;But here are my observations:&lt;/p&gt;
&lt;p&gt;Grouped in 4 columns, each with 32 chars, from 00000 (0) - 11111 (31). Each col
has a different 2 bits prefix (00, 01, 10, 11).&lt;/p&gt;
&lt;p&gt;All control chars are in first column, except &lt;code&gt;DEL&lt;/code&gt;, which is 0111_1111.&lt;/p&gt;
&lt;p&gt;a-z and A-Z all begins with 00001 (1), ends at 11010 (26). The difference is the column
they are in. Lower cases in column 10, upper cases in column 11. That means:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Converting to upper case means setting 6th bit to 1 (&lt;code&gt;OR 0b00100000&lt;/code&gt;).
Converting to lower case means setting 6th bit to 0 (&lt;code&gt;AND 0b11011111&lt;/code&gt;).&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; toLower (c:char) = byte c ||| byte &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;b00100000 |&amp;gt; char&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; toUpper (c:char) = byte c &amp;amp;&amp;amp;&amp;amp; byte &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;b11011111 |&amp;gt; char&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Characters&lt;/strong&gt; 0-9 are their represented numberic values (0b0000 - 0b1001) prefixed
with 0b0011 (&lt;code&gt;OR 0b0011_0000&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Converting char digit to number can be efficiently done with masking out the higher 4 bits:&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; char_to_num (digit: char) = byte digit &amp;amp;&amp;amp;&amp;amp; byte &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;b00001111 |&amp;gt; int&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note how these characters aligned:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        10    11
11011    [    {
11100    &#92;    |
11101    ]   
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>X11 forwarding on Windows</title>
    <link href="http://kflu.github.io/2017/01/24/2017-01-24-win-x11-forward/"/>
    <id>http://kflu.github.io/2017/01/24/2017-01-24-win-x11-forward/</id>
    <published>2017-01-24T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.626Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This allows you to ssh from Windows machine and get two major benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Make use of X11 apps on the ssh server&lt;/li&gt;
&lt;li&gt;Make (primarily) remote vim to access system clipboard&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&#39;s how. This guide uses the following setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No need to install full Cygwin or MSYS&lt;/li&gt;
&lt;li&gt;Use Mintty/ssh that comes with &lt;a href=&quot;https://git-scm.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git on Windows&lt;/a&gt;, aka, git bash.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I mainly followed &lt;a href=&quot;https://ysgitdiary.blogspot.com/2014/04/how-to-configure-x11-port-forwarding.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Server setup&lt;/h2&gt;
&lt;p&gt;Ensure &lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;AllowAgentForwarding yes
AllowTcpForwarding yes
X11Forwarding yes
X11DisplayOffset 10
X11UseLocalhost no
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restart &lt;code&gt;sshd&lt;/code&gt; with &lt;code&gt;service ssh restart&lt;/code&gt; (Debian) or &lt;code&gt;service sshd restart&lt;/code&gt; (FreeBSD)&lt;/p&gt;
&lt;p&gt;Ensure &lt;code&gt;xauth&lt;/code&gt; is installed. On Debian use &lt;code&gt;dpkg -l | grep xauth&lt;/code&gt;. On
FreeBSD use &lt;code&gt;pkg info | grep xauth&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;FreeBSD specific setup&lt;/h3&gt;
&lt;p&gt;Install &lt;code&gt;xauth&lt;/code&gt; with &lt;code&gt;pkg install xauth&lt;/code&gt;. But this didn&#39;t properly setup everything. To complete the
configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch ~/.Xauthority   # xauth complaints if it&#39;s absent
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note down your &lt;code&gt;hostname&lt;/code&gt; from &lt;code&gt;/etc/rc.conf&lt;/code&gt;, add that to your &lt;code&gt;/etc/hosts&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::1                     &amp;lt;YOUR_HOST_HERE&amp;gt; localhost localhost.my.domain
127.0.0.1               &amp;lt;YOUR_HOST_HERE&amp;gt; localhost localhost.my.domain
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://forums.freebsd.org/threads/8003/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This post&lt;/a&gt; inspired me.&lt;/p&gt;
&lt;h2&gt;Client setup&lt;/h2&gt;
&lt;p&gt;Install &lt;a href=&quot;https://sourceforge.net/projects/xming/files/latest/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xming x server&lt;/a&gt; on Windows. Make sure the server is &lt;code&gt;:0.0&lt;/code&gt;. This can be told
by hovering mouse over the X icon in taskbar.&lt;/p&gt;
&lt;p&gt;Fire up mintty,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export DISPLAY=localhost:0.0
ssh -Y &amp;lt;ssh server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;The original post omitted &lt;code&gt;localhost&lt;/code&gt; and it didn&#39;t work for me.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In ssh session, test with &lt;code&gt;xclock&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Vim clipboard&lt;/h2&gt;
&lt;p&gt;First &lt;a href=&quot;http://vim.wikia.com/wiki/Accessing_the_system_clipboard#Checking_for_X11-clipboard_support_in_terminal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;check vim system clipboard support&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;vim --version | grep clipboard
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If for &lt;code&gt;clipboard&lt;/code&gt; and &lt;code&gt;xterm_clipboard&lt;/code&gt; there&#39;s a &lt;code&gt;-&lt;/code&gt; in front, then you are &lt;strong&gt;NOT&lt;/strong&gt; good. &lt;a href=&quot;http://askubuntu.com/a/613173/259343&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;For Ubuntu,
the base vim package is in this case&lt;/a&gt;. You&#39;ll need vim GUI packages like &lt;code&gt;vim-gtk&lt;/code&gt; for it to work:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apt-get install vim-gtk
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now in vim remote session, select some text type &lt;code&gt;&amp;quot;+y&lt;/code&gt;. Try to paste it in local notepad and make sure it works.&lt;/p&gt;
&lt;h2&gt;X11 with &lt;code&gt;su&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;x11&lt;/code&gt; won&#39;t work after &lt;code&gt;su&lt;/code&gt; - the cookies for X11 forwarding is stored in the user&#39;s &lt;code&gt;~/.Xauthority&lt;/code&gt;. For X11
to continue work after &lt;code&gt;su&lt;/code&gt;, make a symbolic link to the user which logs in remotely:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ln -s /home/&amp;lt;user&amp;gt;/.Xauthority /root/.Xauthority
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;X11 Clipboard with Tmux&lt;/h2&gt;
&lt;p&gt;It&#39;s hard to select and copy text from tmux if there&#39;s vertical splits - using terminals copy utility would
copy across panes. On the other hand, Tmux&#39;s copy does not integrate well with xclip (I found it works only
intermittently).&lt;/p&gt;
&lt;p&gt;The best solution I have so far is to rely on tmux&#39;s copy (not to x11). Then launch &lt;code&gt;xclip&lt;/code&gt;. While it&#39;s waiting
to take input from stdin, paste tmux&#39;s copy buffer by pressing &lt;code&gt;ctrl-b ]&lt;/code&gt;. Then press &lt;code&gt;ctrl-D&lt;/code&gt; (EOF) to commit
&lt;code&gt;xclip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This works for both &lt;code&gt;ctrl-b [&lt;/code&gt;, and tmux&#39;s support for mouse selection.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ysgitdiary.blogspot.com/2014/04/how-to-configure-x11-port-forwarding.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Accessing_the_system_clipboard#Checking_for_X11-clipboard_support_in_terminal&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vim support&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://askubuntu.com/a/613173/259343&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ubuntu
        
      
    
    </summary>
    
    
      <category term="x11" scheme="http://kflu.github.io/tags/x11/"/>
    
      <category term="ssh" scheme="http://kflu.github.io/tags/ssh/"/>
    
      <category term="vim" scheme="http://kflu.github.io/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>strange cmd/power quote escaping</title>
    <link href="http://kflu.github.io/2017/01/11/2017-01-11-strange-quote-escaping-cmd/"/>
    <id>http://kflu.github.io/2017/01/11/2017-01-11-strange-quote-escaping-cmd/</id>
    <published>2017-01-11T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.626Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;With this program (&lt;code&gt;cs.exe&lt;/code&gt;):&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class Program&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    static void Main(string[] args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        foreach (var item in args)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Console.WriteLine(item);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And the runs:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; cs.exe go&#92;to&#92;a_path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go&#92;to&#92;a_path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; cs.exe &amp;quot;go&#92;to&#92;a path&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go&#92;to&#92;a path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; cs.exe &amp;quot;go&#92;to&#92;a path&#92;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go&#92;to&#92;a path&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; cs.exe &amp;apos;go&#92;to&#92;a path&#92;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;go&#92;to&#92;a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;path&#92;&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That means if your path has a space so  you quote it, be very careful NOT to put a trailing &lt;code&gt;&#92;&lt;/code&gt; at the end, otherwise your program
might just not be able to handle it as it incorrectly contains a &lt;code&gt;&amp;quot;&lt;/code&gt; at the end. Single quote is even
        
      
    
    </summary>
    
    
      <category term="c#" scheme="http://kflu.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Working with LDAP/AD in .NET</title>
    <link href="http://kflu.github.io/2017/01/05/2017-01-05-working-with-ldap/"/>
    <id>http://kflu.github.io/2017/01/05/2017-01-05-working-with-ldap/</id>
    <published>2017-01-05T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.626Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Here&#39;s the code to access AD (latest at &lt;a href=&quot;https://gist.github.com/kflu/ea18e097427f3d458322011025583384&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;(* Accessing AD through LDAP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;Inspired by http://stackoverflow.com/a/14814508/695964 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;Need nuget package System.DirectoryServices&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#r &lt;span class=&quot;string&quot;&gt;@&quot;./packages/System.DirectoryServices/lib/System.DirectoryServices.dll&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; System&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; System.Collections&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; System.DirectoryServices&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; de = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DirectoryEntry() &lt;span class=&quot;comment&quot;&gt;// connects to the local domain controller&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// these two are optional&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;de.Path &amp;lt;- &lt;span class=&quot;string&quot;&gt;&quot;LDAP://OU=UserAccounts,DC=foo,DC=bar,DC=baidu,DC=com&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// This scopes the subsequence queries&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;de.AuthenticationType &amp;lt;- AuthenticationTypes.Secure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DirectorySearcher(de, Filter=&lt;span class=&quot;string&quot;&gt;&quot;(name=John Smith)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; res = s.FindOne()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res.Properties.[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// this is always a seq&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res.Properties.[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;].[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;// this is always a obj that needs to be casted at runtime&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res.Properties.[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;].[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] :?&amp;gt; string &lt;span class=&quot;comment&quot;&gt;// I know it&#39;s a string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; myMailboxGuid = Guid(res.Properties.[&lt;span class=&quot;string&quot;&gt;&quot;someBinaryField&quot;&lt;/span&gt;].[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] :?&amp;gt; byte array)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Display all fields (res.Properties implements IDictionary: http://stackoverflow.com/a/3267704/695964)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;res.Properties |&amp;gt; Seq.cast&amp;lt;DictionaryEntry&amp;gt; |&amp;gt; Seq.iter (&lt;span class=&quot;keyword&quot;&gt;fun&lt;/span&gt; x -&amp;gt; printfn &lt;span class=&quot;string&quot;&gt;&quot;%A&quot;&lt;/span&gt; (x.Key, x.Value))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/kflu/ea18e097427f3d458322011025583384&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;My gist to access AD in F#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/a/14814508/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SO post on connecting to LDAP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.codeproject.com/articles/18102/howto-almost-everything-in-active-directory-via-c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Howto: (Almost) Everything In Active Directory via C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ianatkinson.net/computing/adcsharp.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Active Directory With C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://technet.microsoft.com/en-us/sysinternals/adexplorer.aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GUI tool: AD explorer (very rough and
        
      
    
    </summary>
    
    
      <category term="f#" scheme="http://kflu.github.io/tags/f/"/>
    
      <category term=".net" scheme="http://kflu.github.io/tags/net/"/>
    
      <category term="ldap" scheme="http://kflu.github.io/tags/ldap/"/>
    
  </entry>
  
  <entry>
    <title>Auto Deploy Hexo.io to Github Pages With Travis CI</title>
    <link href="http://kflu.github.io/2017/01/03/2017-01-03-hexo-travis/"/>
    <id>http://kflu.github.io/2017/01/03/2017-01-03-hexo-travis/</id>
    <published>2017-01-03T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.626Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/settings/tokens&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github Access tokens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.staticgen.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Static site generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hexo
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/docs/setup.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;setup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/docs/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hexo.io/themes/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;themes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Travis
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.travis-ci.com/user/customizing-the-build/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Configure the build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.travis-ci.com/user/encryption-keys/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Encrypting data in &lt;code&gt;travis.yml&lt;/code&gt; (not used)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This article is inspired by &lt;a href=&quot;http://www.tuicool.com/articles/AZf2Yzb&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this&lt;/a&gt; and &lt;a href=&quot;https://xin053.github.io/2016/06/05/Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With Travis CI, every time new change is made to the site repo, a build will kick off
on Travis and deploy the updated site to Github pages. This is not a trivial process, so
this article describes the idea behind each piece and documents details.&lt;/p&gt;
&lt;h2&gt;Github Pages&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github pages&lt;/a&gt; is a github service to host static web sites. It works by rendering static
files (HTML, etc.) that are checked in as a github repo at a special URL (e.g, https://&lt;username&gt;.github.io/project).&lt;/username&gt;&lt;/p&gt;
&lt;p&gt;Nowadays people don&#39;t write static HTMLs manually, but rather writing articles/posts
in markdowns (or other markups) and relying on other tools to generate the HTMLs/stylesheets.&lt;/p&gt;
&lt;p&gt;There are many of those static site generators. &lt;a href=&quot;http://www.staticgen.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Here&#39;s a nice list of the most popular ones&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One problem using these tools with github pages is that you have to have a computer with the tool installed to generate
the site and then publish it. If you&#39;re somewhere with no access to the tool then you can&#39;t publish posts.&lt;/p&gt;
&lt;p&gt;With the help of Travis CI, this scenario becomes possible:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;create a post directly via Github repo web UI.&lt;/li&gt;
&lt;li&gt;Travis automatically invokes build process&lt;/li&gt;
&lt;li&gt;Travis deploys the updated site to Github pages&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Setup github repo&lt;/h2&gt;
&lt;p&gt;There&#39;re many ways to setup Github pages. I use the following setup:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;branch &lt;code&gt;master&lt;/code&gt; contains the generated site, which will be rendered directly&lt;/li&gt;
&lt;li&gt;branch &lt;code&gt;source&lt;/code&gt; contains the raw articles and files necessary to generate the site&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Follow &lt;a href=&quot;https://hexo.io/docs/setup.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;instruction for Hexo.io&lt;/a&gt; to scaffold the &lt;code&gt;source&lt;/code&gt; branch. Your &lt;code&gt;source&lt;/code&gt; branch should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.
|   .gitignore
|   .travis.yml
|   db.json
|   package.json
|   _config.yml
|   
+---scaffolds
|   &#92;--- ...
|       
+---source
|   &#92;---_posts
|           hello-world.md
|           
&#92;---themes
    &#92;--- ...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Hexo themes&lt;/h3&gt;
&lt;p&gt;[Hexo themes][themes] can be downloaded. But do not git clone into the repo as you can&#39;t udpate and commit the theme&#39;s &lt;code&gt;_config.yml&lt;/code&gt;
as it will be treated as a git submodule. Instead, download it and unzip into your repo.&lt;/p&gt;
&lt;h3&gt;Hexo configs&lt;/h3&gt;
&lt;p&gt;Both the site-level and theme-level &lt;code&gt;_config.yml&lt;/code&gt; needs to be updated. Refer to the &lt;a href=&quot;https://hexo.io/docs/configuration.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo doc&lt;/a&gt; and the theme doc on how to update them.&lt;/p&gt;
&lt;h3&gt;Hexo Workflow&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;hexo clean&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo generate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hexo deploy&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once that worked, you can start working on enabling travis.&lt;/p&gt;
&lt;h2&gt;Setup Travis CI&lt;/h2&gt;
&lt;p&gt;Travis listens to your repo&#39;s commit event and invokes build process specified in the repo&#39;s &lt;code&gt;.travis.yml&lt;/code&gt; file of the triggering branch.
travis script is run in a Linux environment so you can use shell commands.&lt;/p&gt;
&lt;p&gt;I put the actual site generating commands in &lt;code&gt;package.json&lt;/code&gt; so I can use npm to run them:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
  &amp;quot;build&amp;quot;: &amp;quot;hexo clean &amp;amp;&amp;amp; hexo generate &amp;amp;&amp;amp; hexo deploy&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then in &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;language: node_js
node_js:
- 6.0.0
branches:
  only:
  - source

install: npm install

before_script:
- git config --global user.name &amp;quot;KL&amp;quot;
- git config --global user.email &amp;quot;kfldev@outlook.com&amp;quot;
- sed -i &amp;quot;s/__GITHUB_TOKEN__/${__GITHUB_TOKEN__}/&amp;quot; _config.yml

script: npm run build
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that in order for Travis to deploy to github repo, it needs to have access. I got the github access token from &lt;a href=&quot;https://github.com/settings/tokens&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.
Then the repo can be accessed via URL &lt;code&gt;https://&amp;lt;TOKEN&amp;gt;@github.com/&amp;lt;user&amp;gt;/&amp;lt;repo&amp;gt;&lt;/code&gt;. For security reason this token should NOT be checked in but should be
specified in Travis repo settings as an environment variable. Then replace the URL in hexo config with this vairable at build time.&lt;/p&gt;
&lt;p&gt;In hexo &lt;code&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;deploy:
  type: git
  repo: https://__GITHUB_TOKEN__@github.com/user/blog.git
  branch: master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;__GITHUB_TOKEN__&lt;/code&gt; is replaced with &lt;code&gt;sed&lt;/code&gt; by travis
        
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://kflu.github.io/tags/hexo/"/>
    
      <category term="ci" scheme="http://kflu.github.io/tags/ci/"/>
    
  </entry>
  
  <entry>
    <title>Linux, Terminals, Windows</title>
    <link href="http://kflu.github.io/2016/12/20/2016-12-20-Linux-terminals-windows/"/>
    <id>http://kflu.github.io/2016/12/20/2016-12-20-Linux-terminals-windows/</id>
    <published>2016-12-20T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.626Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2&gt;Mintty&lt;/h2&gt;
&lt;p&gt;Mintty comes with git for windows. It comes with an ssh client so you don&#39;t need putty. I found mintty to be easier to work with.&lt;/p&gt;
&lt;h3&gt;TERM&lt;/h3&gt;
&lt;p&gt;Setting term to be &lt;code&gt;xterm-256color&lt;/code&gt; gives mouse support for vim, tmux, etc. Originally it was &lt;code&gt;xterm&lt;/code&gt; and it didn&#39;t work.&lt;/p&gt;
&lt;h2&gt;Tmux&lt;/h2&gt;
&lt;p&gt;In ~/.tmux.config set &lt;code&gt;set -g mouse on&lt;/code&gt; will enable mouse support for selecting pane, resizing, etc. See &lt;a href=&quot;http://stackoverflow.com/a/33336609/695964&quot; target=&quot;_blank&quot;
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu on Gen 2 Hyper-V</title>
    <link href="http://kflu.github.io/2016/12/19/2016-12-19-Ubuntu-HyperV/"/>
    <id>http://kflu.github.io/2016/12/19/2016-12-19-Ubuntu-HyperV/</id>
    <published>2016-12-19T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.626Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;All setup should be straightforward except getting the network to work. After spending a lot of time, &lt;a href=&quot;http://help.yoyogames.com/hc/en-us/articles/216754468-Setup-An-Ubuntu-Virtual-Machine-Using-Hyper-V&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this guide worked&lt;/a&gt;.
What&#39;s needed is an external virtual switch and enabling &amp;quot;Allow management operating system to share this network&amp;quot;. When creating the
switch, it asks to bind to a physical adapter. So I guess changing to using a different physical adapater in the host (e.g., laptop
swithed from Ethernet to WIFI) would make the network break in the
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>CNTK cheatsheet</title>
    <link href="http://kflu.github.io/2016/10/30/2016-10-30-CNTK-cheatsheet-Iris-Dataset-classifier/"/>
    <id>http://kflu.github.io/2016/10/30/2016-10-30-CNTK-cheatsheet-Iris-Dataset-classifier/</id>
    <published>2016-10-30T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.626Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;See &lt;a
        
      
    
    </summary>
    
    
      <category term="machinelearning" scheme="http://kflu.github.io/tags/machinelearning/"/>
    
      <category term="cntk" scheme="http://kflu.github.io/tags/cntk/"/>
    
  </entry>
  
  <entry>
    <title>CNTK installation and IDE setup</title>
    <link href="http://kflu.github.io/2016/10/27/2016-10-27-cntk-installation/"/>
    <id>http://kflu.github.io/2016/10/27/2016-10-27-cntk-installation/</id>
    <published>2016-10-27T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.626Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Followed &lt;a href=&quot;https://github.com/Microsoft/CNTK/wiki/CNTK-Binary-Download-and-Manual-Installation&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this manual instruction&lt;/a&gt; since I have Anaconda already installed. &lt;strong&gt;Be very careful&lt;/strong&gt; to install all required binaries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-ie/download/details.aspx?id=40784&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Visual C++ Redistributable Package for Visual Studio 2013&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=30679&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Visual C++ Redistributable Package for Visual Studio 2012&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=49926&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Visual C++ compiler - install this from visual studio, otherwise it complains &amp;quot;Microsoft Visual C++ 14.0 is required&amp;quot; during &lt;code&gt;pip install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I forgot to install MPI and later when &lt;code&gt;import cntk&lt;/code&gt; it failed loading the &lt;code&gt;_cntk_py.pyd&lt;/code&gt; module, costing me a lot of time. This error can also happen if you installed a wrong target version of CNTK, e.g., you installed CNTK GPU on a host without GPU.&lt;/p&gt;
&lt;p&gt;Then create a conda environment for it:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;conda create --name cntk python=3.4.3 anaconda&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;activate cntk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python -m pip install --upgrade pip  # This is really optional to me&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;See &lt;a href=&quot;https://conda.io/docs/py2or3.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Anaconda python management&lt;/a&gt; for how to create conda environment.&lt;/p&gt;
&lt;p&gt;Now &lt;code&gt;pip install&lt;/code&gt; from &lt;a href=&quot;https://github.com/Microsoft/CNTK/wiki/Setup-Windows-Python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github here&lt;/a&gt;. There&#39;re three choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU only&lt;/li&gt;
&lt;li&gt;GPU&lt;/li&gt;
&lt;li&gt;GPU with 1bit SGD&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the python version needs to match your python installation.&lt;/p&gt;
&lt;p&gt;I tried the CPU only and the GPU with 1bit SGD, seems to work on my Surface Book with standalone GPU.&lt;/p&gt;
&lt;p&gt;Now to verify it works, fire up a conda commandline and:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;activate cntk-py34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# now in python:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;&amp;gt; import cntk  # this should succeed!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;Notes on Anaconda environment&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;to display conda environment information&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;conda info --all
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;IDE setup&lt;/h2&gt;
&lt;p&gt;Best autocompletion support for Python that I&#39;ve seen so far is PyCharm. Python Tools for Visual Studio (PTVS), for example, is not able to infer function signature on &lt;code&gt;cntk.ops.input_variable&lt;/code&gt; and others. Install the free PyCharm community edition is sufficient. To let
PyCharm use the Anaconda CNTK environment:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;find the python executable python by using &lt;code&gt;conda info --all&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;in PyCharm -&amp;gt; settings -&amp;gt; project -&amp;gt; project interpreter -&amp;gt; &amp;quot;add local&amp;quot;, put in the desired python executable path&lt;/li&gt;
&lt;li&gt;note that CNTK relies on a bunch of environment variables to work, e.g., &lt;code&gt;MSMPI_LIB32&lt;/code&gt;, &lt;code&gt;MSMPI_LIB64&lt;/code&gt;, so &lt;strong&gt;always launch PyCharm from the anaconda console&lt;/strong&gt; to ensure necessary environment variables are inherited by the IDE. If this is not set up properly, interpreter throws when &lt;code&gt;import cntk&lt;/code&gt;, complaining module cannot be loaded.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For the convinience of launch PyCharm from commandline, I added PyCharm to &lt;code&gt;PATH&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;CNTK development workflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;launch Anaconda console&lt;/li&gt;
&lt;li&gt;&lt;code&gt;activate cntk-py34&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(optional) launch powershell&lt;/li&gt;
&lt;li&gt;launch IDE from anaconda
        
      
    
    </summary>
    
    
      <category term="machinelearning" scheme="http://kflu.github.io/tags/machinelearning/"/>
    
      <category term="cntk" scheme="http://kflu.github.io/tags/cntk/"/>
    
  </entry>
  
  <entry>
    <title>GraphViz notes</title>
    <link href="http://kflu.github.io/2016/10/27/2016-10-27-GraphViz/"/>
    <id>http://kflu.github.io/2016/10/27/2016-10-27-GraphViz/</id>
    <published>2016-10-27T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.626Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Windows download is &lt;a href=&quot;http://www.graphviz.org/Download_windows.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. I cannot find a statically linked version (all-in-one). &lt;a href=&quot;http://melp.nl/2013/08/flow-charts-in-code-enter-graphviz-and-the-dot-language/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This&lt;/a&gt; is a good short tutorial on how to draw flowchart. Note how common node attributes can be declared together:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;digraph &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    label=&amp;quot;How to make sure &amp;apos;input&amp;apos; is valid&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node[shape=&amp;quot;box&amp;quot;, style=&amp;quot;rounded&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       start; end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node[shape=&amp;quot;parallelogram&amp;quot;, style=&amp;quot;&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       message; input;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    node[shape=&amp;quot;diamond&amp;quot;, style=&amp;quot;&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       if_valid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start -&amp;gt; input;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    input -&amp;gt; if_valid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if_valid -&amp;gt; message[label=&amp;quot;no&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    if_valid -&amp;gt; end[label=&amp;quot;yes&amp;quot;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message -&amp;gt; input;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;rank=same; message input&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;On commandline, use:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dot -Tpng -o graph.png graph.dot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For newlines in labels, you can use &lt;code&gt;&#92;n&lt;/code&gt;. Alternatively, literal newlines in the string is captured and regarded. Further more, &lt;code&gt;&#92;&lt;/code&gt; in
strings are line continuation. So for better formatting, one can write:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node[label=&amp;quot;&#92;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is a long description&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this is another line];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.graphviz.org/doc/info/attrs.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node, Edge and Graph Attributes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/wannesm/wmgraphviz.vim&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nice Vim GraphViz
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="graphviz" scheme="http://kflu.github.io/tags/graphviz/"/>
    
  </entry>
  
  <entry>
    <title>Computing covariance</title>
    <link href="http://kflu.github.io/2016/09/04/2016-09-04-computing-covariance/"/>
    <id>http://kflu.github.io/2016/09/04/2016-09-04-computing-covariance/</id>
    <published>2016-09-04T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.625Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;For a given m x n matrix $X = {X_{ij}}$, where each row is a sample, each column is a &lt;strong&gt;zero-mean&lt;/strong&gt; feature, the normal way of computing covariance matrix is&lt;/p&gt;
&lt;p&gt;$$ &#92;Sigma = &#92;frac{1}{m} X^T &#92;times X $$&lt;/p&gt;
&lt;p&gt;This can be easily understood - $&#92;Sigma_{ij}$ is the covariance between i-th and j-th feature of the dataset. The computation reflects that - $&#92;Sigma_{ij}$ is computed by $(1/m) * &amp;lt;X_i, X_j&amp;gt;$, where $&amp;lt;X_i, X_j&amp;gt;$ is the inner product between column $X_i$ and column $X_j$. Since all features (columns) are zero-mean, this is exactly the definition of covariance between two random variables.&lt;/p&gt;
&lt;p&gt;To my suprise, the other way of estimating the covariance is:&lt;/p&gt;
&lt;p&gt;$$ &#92;Sigma = &#92;frac{1}{m} &#92;sum_{i=1}^m { {X^{(i)}}^T &#92;times X^{(i)} }  $$&lt;/p&gt;
&lt;p&gt;where $X^{(i)}$ is a 1xn row vector representing the i-th observed sample in the dataset. What that means is that instead of estimating the covariance matrix feature-wise, i.e., computing covariance values one by one, we&#39;re now estimating the entire covariance matrix using each single observation samples, and averaging those estimates ($&#92;frac{1}{m}&#92;sum$). This approach has the benefit that the covariance matrix can be built incrementally!&lt;/p&gt;
&lt;p&gt;The below graph demonstrates the squared estimation errors of these two methods compared with the &lt;code&gt;cov()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;computing_covariance.png&quot; alt=&quot;comparison&quot;&gt;&lt;/p&gt;
&lt;p&gt;The two lines overlaps perfectly implying they&#39;re fundamentally equivelent. And as the sample size gets large, the estimation error gets small.&lt;/p&gt;
&lt;p&gt;Here&#39;s the code for it (&lt;a href=&quot;https://gist.github.com/kflu/c8dbb4a365302386109724faa2c15cbe#file-compute_covariance-m&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;gist&lt;/a&gt;):&lt;/p&gt;
&lt;figure class=&quot;highlight matlab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;clc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;close all;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mm = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E1 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;E2 = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;  m = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e1 = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e2 = &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  mm = [mm m];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  # averaging the error performance&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    n = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    X = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; * &lt;span class=&quot;built_in&quot;&gt;rand&lt;/span&gt;(m,n) - &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    C1 = cov(X);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # computing covariance feature by feature (column wise inner product)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    C2 = (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/m) * X&#39; * X;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    # estimate covariance by computing covariance on each sample and then average&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    C = &lt;span class=&quot;built_in&quot;&gt;zeros&lt;/span&gt;(n, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:m&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      C += X(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;,:)&#39; * X(&lt;span class=&quot;built_in&quot;&gt;i&lt;/span&gt;, :);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    C = (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/m) * C;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e1 += (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/m*n) * sum(sum((C1 - C).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    e2 += (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/m*n) * sum(sum((C2 - C1).^&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;), &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  E1 = [E1 e1/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  E2 = [E2 e2/&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;hold&lt;/span&gt; on;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semilogy(mm, E1, &lt;span class=&quot;string&quot;&gt;&#39;-k&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;semilogy(mm, E2, &lt;span class=&quot;string&quot;&gt;&#39;-xr&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;legend&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;sq err cov = avg cov per sample&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sq err cov = (1/m) * X&#39; * X&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grid on;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;hold&lt;/span&gt;
        
      
    
    </summary>
    
    
      <category term="datascience" scheme="http://kflu.github.io/tags/datascience/"/>
    
      <category term="machinelearning" scheme="http://kflu.github.io/tags/machinelearning/"/>
    
      <category term="math" scheme="http://kflu.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>C# parsing and evaluating using Roslyn</title>
    <link href="http://kflu.github.io/2016/08/27/2016-08-27-csharp-parsing-evaluating-roslyn/"/>
    <id>http://kflu.github.io/2016/08/27/2016-08-27-csharp-parsing-evaluating-roslyn/</id>
    <published>2016-08-27T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.625Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Using Roslyn you can parse c# code into AST and given a c# code snippet, it can be evaluated. You need the following binaries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft.CodeAnalysis.CSharp&lt;/li&gt;
&lt;li&gt;Microsoft.CodeAnalysis.CSharp.Scripting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;CSharpSyntaxTree.ParseText&lt;/code&gt; converts a c# code (string) into a &lt;code&gt;SyntaxTree&lt;/code&gt;. &lt;code&gt;CSharpScript.EvaluateAsync&lt;/code&gt; can be used to evaluate a c# code snippet. There&#39;re other useful API for scripting, documented &lt;a href=&quot;https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples#prevstate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;, including inspecting defined variables, continuing with a previous state, etc.&lt;/p&gt;
&lt;p&gt;Note that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CSharpScript.EvaluateAsync(&amp;quot;new DateTime(2016,12,1)&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;throws an exception:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Microsoft.CodeAnalysis.Scripting.CompilationErrorException: (1,5): error CS0246: The type or namespace name &#39;DateTime&#39; could not be found (are you missing a using directive or an assembly reference?)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Since the code snippet needs to be &amp;quot;self-contained&amp;quot;, namespace needs to be properly used. Below is a fully working example of the parsing and evaluating.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; System.Threading.Tasks;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; Microsoft.CodeAnalysis;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; Microsoft.CodeAnalysis.CSharp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; Microsoft.CodeAnalysis.CSharp.Scripting;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;GettingStartedCS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Program&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// demonstrate parsing&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            SyntaxTree tree = CSharpSyntaxTree.ParseText(&lt;span class=&quot;string&quot;&gt;@&quot;var x = new DateTime(2016,12,1);&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Console.WriteLine(tree.ToString()); &lt;span class=&quot;comment&quot;&gt;// new DateTime(2016,12,1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = Task.Run&amp;lt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;async&lt;/span&gt; () =&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// CSharpScript.RunAsync can also be generic with typed ReturnValue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; CSharpScript.RunAsync(&lt;span class=&quot;string&quot;&gt;@&quot;using System;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// continuing with previous evaluation state&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                s = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; s.ContinueWithAsync(&lt;span class=&quot;string&quot;&gt;@&quot;var x = &quot;&quot;my/&quot;&quot; + string.Join(&quot;&quot;_&quot;&quot;, &quot;&quot;a&quot;&quot;, &quot;&quot;b&quot;&quot;, &quot;&quot;c&quot;&quot;) + &quot;&quot;.ss&quot;&quot;;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                s = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; s.ContinueWithAsync(&lt;span class=&quot;string&quot;&gt;@&quot;var y = &quot;&quot;my/&quot;&quot; + @x;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                s = &lt;span class=&quot;keyword&quot;&gt;await&lt;/span&gt; s.ContinueWithAsync(&lt;span class=&quot;string&quot;&gt;@&quot;y // this just returns y, note there is NOT trailing semicolon&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;comment&quot;&gt;// inspecting defined variables&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;inspecting defined variables:&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; variable &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; s.Variables)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;name: &amp;#123;0&amp;#125;, type: &amp;#123;1&amp;#125;, value: &amp;#123;2&amp;#125;&quot;&lt;/span&gt;, variable.Name, variable.Type.Name, variable.Value);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.ReturnValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;).Result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Result is: &amp;#123;0&amp;#125;&quot;&lt;/span&gt;, result);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The above code give the output:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var x = new DateTime(2016,12,1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inspecting defined variables:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name: x, type: String, value: my/a_b_c.ss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name: y, type: String, value: my/my/a_b_c.ss&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Result is: my/my/a_b_c.ss&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples#expr&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Roslyn scripting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/wiki/Getting-Started-C%23-Syntax-Analysis&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Roslyn syntax analysis aka parsing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://social.msdn.microsoft.com/Forums/vstudio/en-US/e6364fec-29c5-4f1d-95ce-796feb25a8a9/is-it-possible-to-convert-a-roslyn-ast-expression-tree-to-a-linq-expression-tree-is-there-a-roslyn?forum=roslyn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Roslyn AST to Linq expression tree? This may not be necessary anymore since Roslyn can be fully functional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples#prevstate&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Roslyn scripting scenarios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Using it in F#&lt;/h1&gt;
&lt;p&gt;Same thing can be used in F#. I can successfully use it in a F# console application with nuget (via Visual Studio).&lt;/p&gt;
&lt;figure class=&quot;highlight fsharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; Microsoft.CodeAnalysis&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; Microsoft.CodeAnalysis.CSharp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;open&lt;/span&gt; Microsoft.CodeAnalysis.CSharp.Scripting&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; ast = CSharpSyntaxTree.ParseText(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;var x = new DateTime(2016,12,1);&quot;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;printfn &lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt; (ast.ToString())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; result = &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    async &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let!&lt;/span&gt; s = CSharpScript.RunAsync(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;using System;&quot;&quot;&quot;&lt;/span&gt;) |&amp;gt; Async.AwaitTask&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;let!&lt;/span&gt; s = s.ContinueWithAsync(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;var x = &quot;my/&quot; + string.Join(&quot;_&quot;, &quot;a&quot;, &quot;b&quot;, &quot;c&quot;) + &quot;.ss&quot;;&quot;&quot;&quot;&lt;/span&gt;) |&amp;gt;
        
      
    
    </summary>
    
    
      <category term="c#" scheme="http://kflu.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Visualizing Precision Recall</title>
    <link href="http://kflu.github.io/2016/08/26/2016-08-26-visualizing-precision-recall/"/>
    <id>http://kflu.github.io/2016/08/26/2016-08-26-visualizing-precision-recall/</id>
    <published>2016-08-26T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.624Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Andrew Ng&#39;s &lt;a href=&quot;https://www.coursera.org/learn/machine-learning/lecture/tKMWX/error-metrics-for-skewed-classes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;lecture on error analysis of Machine Learning&lt;/a&gt; gave a good explanation on Precision and Recall. Here I have a visualization of the concept.&lt;/p&gt;
&lt;p&gt;Given the classification results on a test set, comparing the prediction result (P) and the actual label (L), each comparison can be categorized into four buckets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;True positive (TP): P = L = 1&lt;/li&gt;
&lt;li&gt;False positive (FP): P = 1, L = 0&lt;/li&gt;
&lt;li&gt;False negative (FN): P = 0, L = 1&lt;/li&gt;
&lt;li&gt;True negative (TN): P = L = 0&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;2016-08-26-visualizing-precision-recall-1.png&quot; alt=&quot;PR&quot;&gt;&lt;/p&gt;
&lt;p&gt;Three metrics are often used:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Accuracy&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Accuracy measures, among all test data, how many samples does the algorithm get correctly. This is defined as the number of correct classifications divided by the total test samples:&lt;/p&gt;
&lt;p&gt;$$ Accuracy = &#92;frac{TP + TN}{total} $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Precision&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Precision measures, among all samples that the algorithm claims to be positive ($TP + FP$), how many are correct:&lt;/p&gt;
&lt;p&gt;$$ Precision = &#92;frac{TP}{TP + FP} $$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recall&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Recall measures, among all sample that are actually positive ($TP + FN$), how many the algorithm classified as positive:&lt;/p&gt;
&lt;p&gt;$$ Recall = &#92;frac{TP}{TP + FN}&lt;/p&gt;
&lt;p&gt;When the data has &lt;strong&gt;&amp;quot;skewed classes&amp;quot;&lt;/strong&gt;, precision is not a good performance metric. For example, this shows a skewed classes data:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2016-08-26-visualizing-precision-recall-2.png&quot; alt=&quot;skewed&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can have a cheating algorithm to predict everything as negative (imagine the horizontal threshold line to be moved way up), and the accuracy will be high (due to high TN). But as there are no positive classification, the recall is 0.&lt;/p&gt;
&lt;p&gt;That&#39;s why precision and recall is a more balanced measurement for performance. An ideal algorithm should have high precision and recall values. But for a given algorithm, the precision and recall is traded off by setting the classification threshold higher or lower. For example, for the same data shown as above, we could choose a threshold so the algorithm only classifies positive when it&#39;s very confident:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;2016-08-26-visualizing-precision-recall-3.png&quot; alt=&quot;confident&quot;&gt;&lt;/p&gt;
&lt;p&gt;This yields higher precision, but lower recall. If a single metric is desired out of precision and recall, there is F1 score defined as below:&lt;/p&gt;
&lt;p&gt;$$ F_1 score = 2 &#92;frac{precision &#92;times recall}{precision + recall} $$&lt;/p&gt;
&lt;p&gt;When either recall or precision is small, the score will be small. The perfect score is 1 when both precision and recall are
        
      
    
    </summary>
    
    
      <category term="machinelearning" scheme="http://kflu.github.io/tags/machinelearning/"/>
    
  </entry>
  
  <entry>
    <title>Paket - using private nuget feed</title>
    <link href="http://kflu.github.io/2016/08/16/2016-08-16-paket-using-private-nuget-feed/"/>
    <id>http://kflu.github.io/2016/08/16/2016-08-16-paket-using-private-nuget-feed/</id>
    <published>2016-08-16T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.624Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Paket can be set up (per project) to use private nuget feeds that require authentication. Here&#39;s how:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In paket.dependencies, add a line &lt;code&gt;source &amp;lt;feed_url&amp;gt;&lt;/code&gt;. Also add the dependencies you want to pull: &lt;code&gt;nuget &amp;lt;library&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Encode the credential for the feed by calling &lt;code&gt;paket.exe config add-credentials &amp;lt;feed_url&amp;gt;&lt;/code&gt;. This stores the credential at paket&#39;s global config location &lt;code&gt;%appdata%/paket/paket.config&lt;/code&gt;. (to get credentials for VisualStudio Online (VSO) feeds, see below).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now you can run &lt;code&gt;paket.exe install&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note that nuget credential provider is a better way to manage credentials. But currently paket doesn&#39;t support that.&lt;/p&gt;
&lt;h1&gt;Get access to private VSO feeds&lt;/h1&gt;
&lt;p&gt;The ideal way is to use nuget provider. Paket doesn&#39;t support that yet. So the alternative is to get a personal access token for the VSO feed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the VSO site of the nuget feed and sign in&lt;/li&gt;
&lt;li&gt;Click on your profile -&amp;gt; security. There you can manage all credentials like the nuget token or SSH public keys.&lt;/li&gt;
&lt;li&gt;Create a new token for the project. Store it somewhere as you can&#39;t retrieve it from VSO once closed.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://fsprojects.github.io/Paket/paket-config.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;paket config&lt;/code&gt; doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://fsprojects.github.io/Paket/nuget-dependencies.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Paket&#39;s nuget dependencies
        
      
    
    </summary>
    
    
      <category term="f#" scheme="http://kflu.github.io/tags/f/"/>
    
  </entry>
  
  <entry>
    <title>FsLab Journal</title>
    <link href="http://kflu.github.io/2016/08/04/2016-08-04-FsLab-Journal/"/>
    <id>http://kflu.github.io/2016/08/04/2016-08-04-FsLab-Journal/</id>
    <published>2016-08-04T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.624Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;FsLab Journal is a literate programming tool based on FSharp.Formatting. It&#39;s sort of like Jupyter notebook. The advantage of it over IPython notebook
is that it&#39;s statically typed and IDE supports are awesome. In order to use it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the template from &lt;a href=&quot;https://github.com/fslaborg/FsLab.Templates/archive/journal.zip&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;build run&lt;/code&gt; to automatically restore packages and start a live server&lt;/li&gt;
&lt;li&gt;Unzip and open the &lt;code&gt;.fsproj&lt;/code&gt; file to start editing in Visual Studio&lt;/li&gt;
&lt;li&gt;The web page is automatically updated (there&#39;s a several seconds delay)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To add a reference, add a line in &lt;code&gt;paket.dependencies&lt;/code&gt;, and reference the assembly in the &lt;code&gt;.fsx&lt;/code&gt; script file by the following. Then intellisense will work!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#r &amp;quot;packages/Argu/lib/net40/Argu.dll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;FSharp.Formatting lets you register custom object output by &lt;a href=&quot;https://tpetricek.github.io/FSharp.Formatting/evaluation.html#Custom-formatting-functions&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;RegisterTransformation&lt;/code&gt;&lt;/a&gt;. Here&#39;s &lt;a href=&quot;https://github.com/BlueMountainCapital/Deedle/blob/5d347cf9329d427e3872c1197303f20554e37a32/docs/tools/formatters.fsx#L288&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Deedle&#39;s implementation&lt;/a&gt; (e.g., frame as table, etc.). But currently it doesn&#39;t let you do table cells conditional formatting.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://fslab.org/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FsLab Journal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tpetricek.github.io/FSharp.Formatting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FShapr.Formatting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bluemountaincapital.github.io/Deedle/tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Deedle
        
      
    
    </summary>
    
    
      <category term="datascience" scheme="http://kflu.github.io/tags/datascience/"/>
    
      <category term="f#" scheme="http://kflu.github.io/tags/f/"/>
    
  </entry>
  
  <entry>
    <title>Pandas reference</title>
    <link href="http://kflu.github.io/2016/08/03/2016-08-03-pandas-reference/"/>
    <id>http://kflu.github.io/2016/08/03/2016-08-03-pandas-reference/</id>
    <published>2016-08-03T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.624Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;See &lt;a
        
      
    
    </summary>
    
    
      <category term="datascience" scheme="http://kflu.github.io/tags/datascience/"/>
    
      <category term="machinelearning" scheme="http://kflu.github.io/tags/machinelearning/"/>
    
  </entry>
  
  <entry>
    <title>Some F# Update</title>
    <link href="http://kflu.github.io/2016/06/17/2016-06-17-fsharp-update/"/>
    <id>http://kflu.github.io/2016/06/17/2016-06-17-fsharp-update/</id>
    <published>2016-06-17T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.624Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I looked into &lt;a href=&quot;http://ionide.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Ionide&lt;/a&gt; that enhances Atom/VSCode into an F# IDE. I&#39;d say
compared with the IDE toolings of other languages I&#39;ve looked into recently, like
Haskell and OCaml, the experience is pretty good. It has auto-complete, Paket
and Fake integration. It is still not as good as VisualStudio though. One thing
I miss a lot is &amp;quot;Go to definition&amp;quot; on a type in assemblies. With VisualStudio,
it brings you to the &amp;quot;ILDASM&amp;quot; style metadata. This is greatly useful for
exploration.&lt;/p&gt;
&lt;p&gt;But I still appreciate the cross-platform capability that the tool brings in -
with Ionide, Fake, Paket/Nuget, there&#39;s no need for VS and full profile .NET
develop environment.&lt;/p&gt;
&lt;p&gt;So an F# development pattern I would like to establish from now on, is to use
the &lt;a href=&quot;https://github.com/fsprojects/generator-fsharp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;fsharp yeoman generator&lt;/a&gt; to scaffold the project (rather than
letting VisualStudio to the job). And when VisualStudio is available, use it
with the &lt;code&gt;.fsproj&lt;/code&gt; file. When it&#39;s not available, I can fallback to Atom/VSCode.&lt;/p&gt;
&lt;p&gt;P.S. just realized &lt;a href=&quot;http://websharper.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WebSharper&lt;/a&gt;(&lt;a href=&quot;http://websharper.com/docs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;document&lt;/a&gt; looks awesome!) is
a fullstack web framework using F#, including frontend. Its &lt;a href=&quot;http://websharper.com/tutorials/rest-api&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;REST service&lt;/a&gt;
support also looks
        
      
    
    </summary>
    
    
      <category term="f#" scheme="http://kflu.github.io/tags/f/"/>
    
  </entry>
  
  <entry>
    <title>Two&#39;s complement notes</title>
    <link href="http://kflu.github.io/2016/05/29/2016-05-29-twos-complement-notes/"/>
    <id>http://kflu.github.io/2016/05/29/2016-05-29-twos-complement-notes/</id>
    <published>2016-05-29T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.623Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;In the following discussion, I assume the cardinality of the number set is
2^32, or, 32 bit integer. But it can be generalized to any size.&lt;/p&gt;
&lt;p&gt;A visualization of the integers on the number domain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;twos-complement-visualization.png&quot; alt=&quot;visualization&quot;&gt;&lt;/p&gt;
&lt;p&gt;There&#39;s always one more negative numbers than the positive numbers. That&#39;s
because, total available numbers is even (2^32). 0 take a spot, leaving all
positive and negative numbers to split the rest 2^32 - 1 spots, which is an odd
number.&lt;/p&gt;
&lt;p&gt;This further leads to the fact that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;abs(int.MinValue) = abs(int.MaxValue) + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So on any integer domain, negation should not cause overflow except for
&lt;code&gt;int.MinValue&lt;/code&gt;. Interestingly,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-int.MinValue == int.MinValue
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For two&#39;s complement representation, $b_{31} b_{30} ... b_0$, the most significant
$b_{31}$ represents the sign of the integer. That&#39;s the reason why negative
numbers are more than positive numbers, as 0 takes a spot in the $0 b_{30} ... b_0$
space.&lt;/p&gt;
&lt;p&gt;Negating a number $x$ can be done by computing $0 - x$, or more commonly, by
inverting the bits and add 1.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-x = ~x + 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In terms of math operations, note that two&#39;s complement representation works
intuitively with addition and substraction: &lt;code&gt;-1 == 0 - 1 == 0xffffffff&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Also note that for signed integers, the fill value of right shift bit operation
depends on the sign of the number. For negative numbers, right shifting will
shift in 1 instead of 0 for the most significant bit, to maintain the sign.&lt;/p&gt;
&lt;p&gt;Note about integer shifting and two&#39;s complement - integer division are
roundings towards 0. So $&#92;frac{5}{-1} = &#92;frac{-5}{2} = -2$, $&#92;frac{-1}{2} = &#92;frac{1}{-2} = 0$. &lt;strong&gt;This is different
than right shifting&lt;/strong&gt;, rounding of negative numbers resulting from right shifts
are towards &lt;strong&gt;minus infinity&lt;/strong&gt; $-&#92;infty$. &lt;strong&gt;Divide by two and right shifts
are only equivelent when the result to be rounded is positive&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Taking absolute values of negative numbers in two&#39;s complement can be achieve by
negating the number and cast to unsigned counterpart of the integer type:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;abs(x) = (uint)(-x), when x &amp;lt; 0, x is integer
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reason of the casting is because integer range can&#39;t represent numbers in
the domain of the absolute function - &lt;code&gt;abs(int.MinValue)&lt;/code&gt;. Casting to unsigned
integer works even for &lt;code&gt;int.MinValue&lt;/code&gt;.&lt;/p&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cs.cornell.edu/~tomf/notes/cps104/twoscomp.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cornell&#39;s two&#39;s complement course note&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Two%27s_complement&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Two&#39;s complement on
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="math" scheme="http://kflu.github.io/tags/math/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript, Type Definitions, and Promisification</title>
    <link href="http://kflu.github.io/2016/05/12/2016-05-12-TypeScript%20Type%20Definitions%20Promisification/"/>
    <id>http://kflu.github.io/2016/05/12/2016-05-12-TypeScript Type Definitions Promisification/</id>
    <published>2016-05-12T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.623Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Got disgusted by JS&#39;s dynamic typing nature (same thing I hated Python). So I
gave typescript another try. The one thing I care most is the support for
async/await syntax, which it already supported.&lt;/p&gt;
&lt;h1&gt;Bare minimum TypeScript Setup&lt;/h1&gt;
&lt;p&gt;To setup a TypeScript project you need a &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;compilerOptions&amp;quot;: {
        &amp;quot;module&amp;quot;: &amp;quot;commonjs&amp;quot;,
        &amp;quot;target&amp;quot;: &amp;quot;es2015&amp;quot;,
        &amp;quot;noImplicitAny&amp;quot;: false,
        &amp;quot;sourceMap&amp;quot;: false
    },
    &amp;quot;exclude&amp;quot;: [
        &amp;quot;node_modules&amp;quot;,
        &amp;quot;typings/browser.d.ts&amp;quot;,
        &amp;quot;typings/browser&amp;quot;
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compilation is then done with a simple &lt;code&gt;tsc&lt;/code&gt; command. This would compile your
scripts into &lt;code&gt;.js&lt;/code&gt; files.&lt;/p&gt;
&lt;h1&gt;Working with Type Definitions&lt;/h1&gt;
&lt;p&gt;To work with external libaries, you&#39;ll need to download a lot of &lt;code&gt;.d.ts&lt;/code&gt; type
definition files. That&#39;s where &lt;code&gt;typings&lt;/code&gt; comes into play. Install with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i -g typings
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Install type definitions with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typings install node --save --ambient
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Installed defs are put under &lt;code&gt;typings&lt;/code&gt; folder with the structure:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;typings
│   browser.d.ts
│   main.d.ts
│
├───browser
│   └───ambient
│       ├───bluebird
│       │       index.d.ts
│       ├───commander
│       │       index.d.ts
│       └───node
│               index.d.ts
└───main
    └───ambient
        ├───bluebird
        │       index.d.ts
        ├───commander
        │       index.d.ts
        └───node
                index.d.ts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;browser.d.ts&lt;/code&gt; and &lt;code&gt;main.d.ts&lt;/code&gt; are top level definition for browser and server use respectively.
They contain the same content, simply referencing each installed &lt;code&gt;.d.ts&lt;/code&gt; files:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/// &amp;lt;reference path=&amp;quot;main/ambient/bluebird/index.d.ts&amp;quot; /
/// &amp;lt;reference path=&amp;quot;main/ambient/commander/index.d.ts&amp;quot;
/// &amp;lt;reference path=&amp;quot;main/ambient/node/index.d.ts&amp;quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since they&#39;re duplicates to each other, and causes compilation warnings (a lot of them!)
if not treated. Therefore in &lt;code&gt;tsconfig.json&lt;/code&gt; you need to exclude
the portion (either broser or server) you don&#39;t intend to include when TypeScript compiles the project.
E.g., this project is a node project, so I excluded all browser ones by
specifying in &lt;code&gt;tsconfig.json&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;exclude&amp;quot;: [
    &amp;quot;typings/browser.d.ts&amp;quot;,
    &amp;quot;typings/browser&amp;quot;
]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1&gt;Working with Promisified Node Modules&lt;/h1&gt;
&lt;p&gt;It&#39;s common to &lt;code&gt;promisifyAll&lt;/code&gt; a node module. Since you want to use the
&lt;code&gt;*Async()&lt;/code&gt; function variants, and they don&#39;t have definitions since they&#39;re
interpolated by &lt;code&gt;bluebird&lt;/code&gt;, sadly all intellisense and type checking for them
are gone.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import fs = require(&#39;fs&#39;);
import cp = require(&#39;child_process&#39;);

Promise.promisifyAll(fs);
Promise.promisifyAll(cp); 

async function main() : Promise&amp;lt;string&amp;gt; {
    let content : string = await fs.readFileAsync(&#39;./package.json&#39;, &#39;utf8&#39;);
    console.log(content);

    let out : string = await cp.execAsync(&#39;cmd.exe /c dir&#39;);
    console.log(out);

    return content;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The pattern I adopted is to type &lt;code&gt;fs.readFile&lt;/code&gt;, filling in the parameters except
the callback, and then append the &lt;code&gt;Async&lt;/code&gt; to the function name. Note that this
way &lt;code&gt;tsc&lt;/code&gt; would complain no such functions. An alternative to that is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import fs = require(&#39;fs&#39;);
import cp = require(&#39;child_process&#39;);

let fs2 = Promise.promisifyAll(fs);
let cp2 = Promise.promisifyAll(cp); 

async function main() : Promise&amp;lt;string&amp;gt; {
    let content : string = await fs2.readFileAsync(&#39;./package.json&#39;, &#39;utf8&#39;);
    console.log(content);

    let out : string = await cp2.execAsync(&#39;cmd.exe /c dir&#39;);
    console.log(out);

    return content;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The benefit is now that compilation errors are gone. But when you need
intellisense, you would type &lt;code&gt;fs.readFile&lt;/code&gt; first, then convert that to
&lt;code&gt;fs2.readFileAsync&lt;/code&gt; when you&#39;re ready.&lt;/p&gt;
&lt;p&gt;Theoretically speaking, someone would hand craft a &lt;code&gt;promisified-node.d.ts&lt;/code&gt; for
all the &lt;code&gt;*Async()&lt;/code&gt; functions. That took a lot of patience to me, but would be
greatly joyful to
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="javascript" scheme="http://kflu.github.io/tags/javascript/"/>
    
      <category term="typescript" scheme="http://kflu.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>Debugging Yeoman generators</title>
    <link href="http://kflu.github.io/2016/05/11/2016-05-11-Debugging%20Yeoman%20generators/"/>
    <id>http://kflu.github.io/2016/05/11/2016-05-11-Debugging Yeoman generators/</id>
    <published>2016-05-11T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.623Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I found myself sending much more time than I want to make one of my Yeoman
generators to work. It&#39;s hard because by default, Yeoman is so user friendly
that it decides to swallow all error information. So if something failed, it
silently completes, leaving an empty directory to you.&lt;/p&gt;
&lt;p&gt;I found the most useful thing is to tell it to display error information. It can
be achieved by setting environment variable &lt;code&gt;DEBUG=yeoman:generator&lt;/code&gt; in the
shell, and then run the generator. This time, it&#39;s more developer friendly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS&amp;gt; yo kfl-node
  yeoman:generator Queueing prompting in prompting +0ms
  yeoman:generator Queueing writing in writing +4ms
  yeoman:generator Queueing install in install +3ms
  yeoman:generator Running prompting +20ms
? Your project name (serman)
? Your project name serman
  yeoman:generator Running writing +8s
  yeoman:generator An error occured while running writing +16ms { AssertionError: Trying to copy from a source that does not exist: C:&#92;Users&#92;kfl&#92;AppData&#92;Roaming&#92;npm&#92;node_modules&#92;generator-kfl-node&#92;generators&#92;app&#92;templates&#92;.gitignore
    at EditionInterface.exports._copySingle (C:&#92;Users&#92;kfl&#92;AppData&#92;Roaming&#92;npm&#92;node_modules&#92;generator-kfl-node&#92;node_modules&#92;mem-fs-editor&#92;lib&#92;actions&#92;copy.js:45:3)
    at EditionInterface.exports.copy (C:&#92;Users&#92;kfl&#92;AppData&#92;Roaming&#92;npm&#92;node_modules&#92;generator-kfl-node&#92;node_modules&#92;mem-fs-editor&#92;lib&#92;actions&#92;copy.js:23:17)
    at module.exports.yeoman.Base.extend.writing (C:&#92;Users&#92;kfl&#92;AppData&#92;Roaming&#92;npm&#92;node_modules&#92;generator-kfl-node&#92;generators&#92;app&#92;index.js:26:15)
    at Object.&amp;lt;anonymous&amp;gt; (C:&#92;Users&#92;kfl&#92;AppData&#92;Roaming&#92;npm&#92;node_modules&#92;generator-kfl-node&#92;node_modules&#92;yeoman-generator&#92;lib&#92;base.js:436:25)
    at C:&#92;Users&#92;kfl&#92;AppData&#92;Roaming&#92;npm&#92;node_modules&#92;generator-kfl-node&#92;node_modules&#92;run-async&#92;index.js:26:25
    at C:&#92;Users&#92;kfl&#92;AppData&#92;Roaming&#92;npm&#92;node_modules&#92;generator-kfl-node&#92;node_modules&#92;run-async&#92;index.js:25:19
    at C:&#92;Users&#92;kfl&#92;AppData&#92;Roaming&#92;npm&#92;node_modules&#92;generator-kfl-node&#92;node_modules&#92;yeoman-generator&#92;lib&#92;base.js:452:8
    at tryOnImmediate (timers.js:543:15)
    at processImmediate [as _immediateCallback] (timers.js:523:5)
  name: &#39;AssertionError&#39;,
  actual: false,
  expected: true,
  operator: &#39;==&#39;,
  message: &#39;Trying to copy from a source that does not exist: C:&#92;&#92;Users&#92;&#92;kfl&#92;&#92;AppData&#92;&#92;Roaming&#92;&#92;npm&#92;&#92;node_modules&#92;&#92;generator-kfl-node&#92;&#92;generators&#92;&#92;app&#92;&#92;templates&#92;&#92;.gitignore&#39;,
  generatedMessage: false }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Some other tips (may also apply to general node.js developing):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always test it out locally (&lt;code&gt;npm link&lt;/code&gt;) before publishing&lt;/li&gt;
&lt;li&gt;Always &lt;code&gt;npm pack&lt;/code&gt; and examine the package before publishing&lt;/li&gt;
&lt;li&gt;Always &lt;code&gt;git clean -xd -n&lt;/code&gt; before &lt;code&gt;npm pack&lt;/code&gt; to eliminate unwanted files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another caveat that cost me an hour - in my generator template I have a
&lt;code&gt;.gitignore&lt;/code&gt;. But &lt;code&gt;npm publish&lt;/code&gt; insists to leave it out of the package, which in
turn caused a silent failure when I &lt;code&gt;yo&lt;/code&gt; the generator. &lt;em&gt;Note&lt;/em&gt; that this error
cannot be caught with local testing &lt;code&gt;npm link&lt;/code&gt;. But you might spot it manually
inspect the package tarball if you are more carefully than I was.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://yeoman.io/authoring/debugging.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Here&lt;/a&gt; is the document for Yeoman
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Sending email with raw SMTP (sending emails without an account)</title>
    <link href="http://kflu.github.io/2016/05/10/2016-05-10-Sending%20email%20with%20raw%20SMTP/"/>
    <id>http://kflu.github.io/2016/05/10/2016-05-10-Sending email with raw SMTP/</id>
    <published>2016-05-10T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.622Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I often need to send notification emails to myself from applications. It&#39;s not really reliable to authenticate your existing email account
and send emails, as authentication can randomly be audited by robot checks and
fail. Recently, I found how to send email with raw SMTP protocol
without needing an account.&lt;/p&gt;
&lt;h3&gt;Assumptions &amp;amp; Requirements&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There&#39;s no firewall blocking you from contacting the recipient&#39;s mail
exchange (MX) server port 25&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For instance, at home I can&#39;t seem to contacting gmail MX server port 25.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Gmail at least, you can force your program to use IPv4 when
communicating with the MX server, or you have a consistent PTR record if
IPv6 must be used&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The emails would usually be delivered right into the spam folder. So you
must be OK with it. You might create a rule to override it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The workflow is that (inspired by &lt;a href=&quot;http://stackoverflow.com/a/12747310/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this SO answer&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Look up the MX server for the recipient email address by using &lt;code&gt;nslookup mx&lt;/code&gt;. I find &lt;a href=&quot;http://mxtoolbox.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this&lt;/a&gt; online mx lookup service is invaluable.&lt;/li&gt;
&lt;li&gt;Talk with the MX server in SMTP to send the mail.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&#39;s an example SMTP session I had with gmail server. Lines marked with &lt;code&gt;S&amp;gt;&lt;/code&gt;
is server response, those marked with &lt;code&gt;C&amp;gt;&lt;/code&gt; is from the client:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;S&amp;gt; 220 mx.google.com ESMTP hj1si1000592pac.235 - gsmtp
C&amp;gt; HELO kfl.com
S&amp;gt; 250 mx.google.com at your service
C&amp;gt; MAIL FROM:&amp;lt;k@kfl.com&amp;gt;
S&amp;gt; 250 2.1.0 OK hj1si1000592pac.235 - gsmtp
C&amp;gt; RCPT TO:&amp;lt;kfl@gmail.com&amp;gt;
S&amp;gt; 250 2.1.5 OK hj1si1000592pac.235 - gsmtp
C&amp;gt; DATA
S&amp;gt; 354  Go ahead hj1si1000592pac.235 - gsmtp
C&amp;gt; From: &amp;quot;KL&amp;quot; &amp;lt;kfl@gmail.com&amp;gt;
C&amp;gt; To: &amp;quot;You&amp;quot; &amp;lt;kfl@gmail.com&amp;gt;
C&amp;gt; Subject: This is from me
C&amp;gt;
C&amp;gt; Hello there:)
C&amp;gt;
C&amp;gt; .
S&amp;gt; 250 2.0.0 OK 1462862782 hj1si1000592pac.235 - gsmtp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that if you&#39;re accessing internet through a regular consumer ISP, e.g.,
I&#39;m using the crappy Comcast, firstly, you most likely is blocked from
accessing port 25 of the MX server, I haven&#39;t tried SSL, maybe it will work.
But from my work environment, I can access port 25 just fine.&lt;/p&gt;
&lt;p&gt;Secondly, if you have IPv6 address and don&#39;t have a consistent PTR record (some
sort of DNS reverse lookup strategy), you&#39;ll be blocked by Gmail at the end of
the session, like this one. The workaround is to force the client to use IPv4.
Linux telnet client has &lt;code&gt;-4&lt;/code&gt; command line option. Windows telnet client doesn&#39;t
have that, but putty does have this option.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;telnet.exe gmail-smtp-in.l.google.com 25

220 mx.google.com ESMTP m90si995173pfj.201 - gsmtp
HELO kfl.com
250 mx.google.com at your service
MAIL FROM:&amp;lt;k@kfl.com&amp;gt;
250 2.1.0 OK m90si995173pfj.201 - gsmtp
RCPT TO:&amp;lt;kfl@gmail.com&amp;gt;
250 2.1.5 OK m90si995173pfj.201 - gsmtp
DATA
354  Go ahead m90si995173pfj.201 - gsmtp
From: &amp;quot;KL&amp;quot; &amp;lt;kfl@gmail.com&amp;gt;
To: &amp;quot;You&amp;quot; &amp;lt;kfl@gmail.com&amp;gt;
Subject: This is from me

Hello there:)

.
550-5.7.1 [2001:4898:80e8::436] Our system has detected that this message does
550-5.7.1 not meet IPv6 sending guidelines regarding PTR records and
550-5.7.1 authentication. Please review
550-5.7.1  https://support.google.com/mail/?p=ipv6_authentication_error for more
550 5.7.1 information. m90si995173pfj.201 - gsmtp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, don&#39;t forget to check the spam folder for the
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="smtp" scheme="http://kflu.github.io/tags/smtp/"/>
    
  </entry>
  
  <entry>
    <title>Scan Documents with ImageMagick and Canon MX922 Scanner</title>
    <link href="http://kflu.github.io/2016/03/26/2016-03-26-document-scanning/"/>
    <id>http://kflu.github.io/2016/03/26/2016-03-26-document-scanning/</id>
    <published>2016-03-26T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.622Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I have a WLAN scanner Canon MX922. It has a document feeder on the top that can take multiple pages. The default Windows scanner application
revert every other page. Installing the &lt;a href=&quot;https://www.usa.canon.com/internet/portal/us/home/support/details/printers/inkjet-multifunction/mx-series-inkjet/mx922&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MX920 series MP Drivers and software&lt;/a&gt; from Canon solved the issue.&lt;/p&gt;
&lt;p&gt;If the pages are scanned as JPEGs, they can be merged into PDF with ImageMagick:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;convert &amp;quot;*.jpg&amp;quot; output.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In PowerShell, to convert a set of images whose paths are copied from Explorer (&amp;quot;copy as path&amp;quot;, the copied paths are on separate lines), &lt;ctrl-v&gt; means pressing control-V to paste the copied paths. They are on separate lines but are in the PowerShell array and PowerShell knows to join them by space when invoking convert.exe.&lt;/ctrl-v&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS&amp;gt; convert @(&amp;lt;CTRL-V&amp;gt;) output.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To avoid naming conflict with Windows builtin filesystem conversion tool (&lt;code&gt;convert.exe&lt;/code&gt;), I renamed ImageMagick tool to &lt;code&gt;convertimg.exe&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Note the Canon scan utility is able to output PDF directly. But I like separte images files since I like to feed in several multi-page
documents at once, and I don&#39;t like to have them mixed into a single PDF.&lt;/p&gt;
&lt;p&gt;If the images have their orientations adjusted in Windows File Explorer by setting EXIF info, the above command does not respect the
orientation setting. Instead, use the below command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;convert &amp;quot;*.jpg&amp;quot; -auto-orient output.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is also a PDF utility command line tool called PDFtk, more specificaly &lt;a href=&quot;https://www.pdflabs.com/tools/pdftk-server/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PDFtk server&lt;/a&gt;. It&#39;s open source and seems to be of good quality and have a large user base. I might want to add it to my toolkit in the future, but for this scanning scenario, I don&#39;t need it yet.&lt;/p&gt;
&lt;p&gt;Rotating every page in a PDF 90° counter-clockwise:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pdftk old.pdf cat 1-endwest output new.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Extracting page(s) from a PDF document:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pdftk original.pdf cat &amp;lt;start_page&amp;gt;-&amp;lt;end_page&amp;gt; output new.pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out &lt;a href=&quot;https://www.pdflabs.com/docs/pdftk-cli-examples/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;other pdftk
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="misc" scheme="http://kflu.github.io/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>Setting up Jupyter on Windows</title>
    <link href="http://kflu.github.io/2016/03/25/2016-03-25-setting-up-jupyter-windows/"/>
    <id>http://kflu.github.io/2016/03/25/2016-03-25-setting-up-jupyter-windows/</id>
    <published>2016-03-25T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.622Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Installing any python module on Windows is an advanture. Fuck Python. It&#39;s no exception for Jupyter.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install Jupyter&lt;/code&gt; fails at the end. Boot up &lt;code&gt;jupyter nbconvert &amp;lt;notebook&amp;gt;&lt;/code&gt; would fail with &lt;code&gt;import failed for XXX, module XXX not found&lt;/code&gt;.
Then you&#39;ll have to &lt;code&gt;pip install XXX&lt;/code&gt; and the same thing happens you&#39;ll follow down the deps manuall. Here&#39;s a list of deps you&#39;ll probably install
for yourself.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install path.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install functools32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install jsonschema&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install
        
      
    
    </summary>
    
    
      <category term="machinelearning" scheme="http://kflu.github.io/tags/machinelearning/"/>
    
      <category term="python" scheme="http://kflu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Deploy Node.js web app with Enterprise Network Authentication</title>
    <link href="http://kflu.github.io/2016/03/24/2016-03-24-setup-iis-nodejs-enterprise/"/>
    <id>http://kflu.github.io/2016/03/24/2016-03-24-setup-iis-nodejs-enterprise/</id>
    <published>2016-03-24T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.622Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This article describes how to deploy node.js web app to be accessible in a Windows domain controlled (ActiveDirectory) network. For the ease of
discussion, lets assume:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the machine hosting the app is named &lt;code&gt;DOMAIN&#92;MACHINE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the users access the website at &lt;code&gt;http://machine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the website should only be accessible by users within the ActiveDirectory security group &lt;code&gt;DOMAIN&#92;SecurityGroup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Approach 1 - Plain Vanilla Node.js&lt;/h2&gt;
&lt;p&gt;Now, to achieve the above three goals, we can do it the plain vanilla way:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Host the app directly with Node.js http module, or anything built on top of that.&lt;/li&gt;
&lt;li&gt;In the app, authenticate with NTLM/Kerboros (maybe with &lt;a href=&quot;https://github.com/einfallstoll/express-ntlm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;express-ntml&lt;/a&gt; module)&lt;/li&gt;
&lt;li&gt;Roll your own AD code to check if the authenticated user is a member of &lt;code&gt;DOMAIN&#92;SecurityGRoup&lt;/code&gt;. This step is extremely easy. Even doable in PowerShell. Proof in the last section. To use .NET in node, &lt;a href=&quot;http://tjanczuk.github.io/edge/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;edge.js&lt;/a&gt; can be used.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Totally doable. But is it necessary? I think not.&lt;/p&gt;
&lt;h2&gt;Approach 2 - IIS + Node.js&lt;/h2&gt;
&lt;p&gt;This approach delegates the entire authentication and authorization to the IIS. And uses &lt;a href=&quot;https://github.com/tjanczuk/iisnode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;iisnode&lt;/code&gt;&lt;/a&gt; to integrate the node.js app into IIS. I&#39;m going to talk about the steps in detail.&lt;/p&gt;
&lt;h3&gt;Setup IIS for Security Group Authorization&lt;/h3&gt;
&lt;p&gt;For this step I&#39;m mostly based on &lt;a href=&quot;http://serverfault.com/a/721855/309638&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this&lt;/a&gt; article.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install IIS, ensure URL authorization and Windows Authentication are enabled (under IIS/WWW Server/Security)&lt;/li&gt;
&lt;li&gt;Go to the desired web site in IIS manager&lt;/li&gt;
&lt;li&gt;Enable Windows Authentication&lt;/li&gt;
&lt;li&gt;Configure Authorization Rules to ONLY allow the security group. Specify it in the form of &amp;quot;DOMAIN&#92;SecurityGroup&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Setup &lt;code&gt;iisnode&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;For this step I&#39;m mainly following the guidance &lt;a href=&quot;https://github.com/tjanczuk/iisnode&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Enable ASP 4.6 in IIS&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.iis.net/download/URLRewrite&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Install URL rewrite module for IIS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install node of course (matching OS bitness)&lt;/li&gt;
&lt;li&gt;Install iisnode matching OS bitness&lt;/li&gt;
&lt;li&gt;Install iisnode samples by running &lt;code&gt;%programfiles%&#92;iisnode&#92;setupsamples.bat&lt;/code&gt; in admin cmd&lt;/li&gt;
&lt;li&gt;Go to http://localhost/node for verification (make sure your authentication works in previous section!)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;Check if a domain user is a member of a security group&lt;/h1&gt;
&lt;p&gt;This &lt;a href=&quot;http://stackoverflow.com/a/12029478/695964&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SO answer&lt;/a&gt; helped.&lt;/p&gt;
&lt;figure class=&quot;highlight powershell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Add-Type&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-AssemblyName&lt;/span&gt; System.DirectoryServices.AccountManagement&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$ctx&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;New-Object&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;-TypeName&lt;/span&gt; System.DirectoryServices.AccountManagement.PrincipalContext &lt;span class=&quot;literal&quot;&gt;-ArgumentList&lt;/span&gt; ([&lt;span class=&quot;type&quot;&gt;System.DirectoryServices.AccountManagement.ContextType&lt;/span&gt;]::Domain,&lt;span class=&quot;string&quot;&gt;&quot;DOMAIN&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$user&lt;/span&gt; = [&lt;span class=&quot;type&quot;&gt;System.DirectoryServices.AccountManagement.UserPrincipal&lt;/span&gt;]::FindByIdentity(&lt;span class=&quot;variable&quot;&gt;$ctx&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$group&lt;/span&gt; = [&lt;span class=&quot;type&quot;&gt;System.DirectoryServices.AccountManagement.GroupPrincipal&lt;/span&gt;]::FindByIdentity(&lt;span class=&quot;variable&quot;&gt;$ctx&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;SecurityGroup&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$user&lt;/span&gt;.IsMemberOf(&lt;span
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="nodejs" scheme="http://kflu.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>New Javascript direction</title>
    <link href="http://kflu.github.io/2016/03/23/2016-03-23-new-js-pattern/"/>
    <id>http://kflu.github.io/2016/03/23/2016-03-23-new-js-pattern/</id>
    <published>2016-03-23T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.622Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;This is to quickly summerize my recent thinking into using JS. There&#39;re many options, coffeescript, typescript, even livescript. Liked all of them. But I in general like something plain. So this suites me better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Babel to enable ES6 and ES7 (async-await)&lt;/li&gt;
&lt;li&gt;bluebird to promisify Node APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This generally solves the problem of callback hell. Promises was a step further. But ultimately it comes to async-await. I&#39;m not too worried about type safety, which TypeScript provides. But the requirement of &lt;code&gt;.d.ts&lt;/code&gt; declarations scared me away. No thank you. Maybe later.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;.babelrc&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;presets&amp;quot;: [&amp;quot;es2015&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;plugins&amp;quot;: [&amp;quot;syntax-async-functions&amp;quot;,&amp;quot;transform-regenerator&amp;quot;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;sourceMaps&amp;quot;: true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;name&amp;quot;: &amp;quot;awesome-async&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;main&amp;quot;: &amp;quot;github.js&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;scripts&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;test&amp;quot;: &amp;quot;echo &#92;&amp;quot;Error: no test specified&#92;&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;author&amp;quot;: &amp;quot;&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;dependencies&amp;quot;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-plugin-syntax-async-functions&amp;quot;: &amp;quot;^6.1.4&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-plugin-transform-regenerator&amp;quot;: &amp;quot;^6.1.4&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-polyfill&amp;quot;: &amp;quot;^6.1.4&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;babel-preset-es2015&amp;quot;: &amp;quot;^6.1.4&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;bluebird&amp;quot;: &amp;quot;^3.3.4&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In &lt;code&gt;test.es6&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;require(&amp;apos;babel-polyfill&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var Promise = require(&amp;apos;bluebird&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var fs = Promise.promisifyAll(require(&amp;quot;fs&amp;quot;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;async function read(p) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var data = await fs.readFileAsync(p, &amp;apos;utf8&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * data is the actual file content. You can print it:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * 		console.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * But if it&amp;apos;s returned from this function, it&amp;apos;s wrapped&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     * into a Promise&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * async functions return Promises!!!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * Note: you can&amp;apos;t await outside of async:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     var data = await read(&amp;apos;package.json&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;read(&amp;apos;package.json&amp;apos;).then(console.log);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now run:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; babel test.es6 -o test.js --source-maps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; node test.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Note that async await needs polyfill the app, and hence the &lt;code&gt;require(&#39;babel-polyfill&#39;);&lt;/code&gt; statement at the beginning of the script. Note that polyfill only needs to be done once for the app. So if you don&#39;t want to pollute the business logic code base, write a opt-level wrapper to polyfill and call the actuall
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="nodejs" scheme="http://kflu.github.io/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://kflu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Deploying Node App On Windows</title>
    <link href="http://kflu.github.io/2016/03/23/2016-03-23-Deploying-Node-App-On-Windows/"/>
    <id>http://kflu.github.io/2016/03/23/2016-03-23-Deploying-Node-App-On-Windows/</id>
    <published>2016-03-23T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.622Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Requirements:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;app can auto restart when crashed (via pm2)&lt;/li&gt;
&lt;li&gt;have clustering support (via pm2)&lt;/li&gt;
&lt;li&gt;can start on boot (via scheduled task)&lt;/li&gt;
&lt;li&gt;run as SYSTEM&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1-3 are straightforward. Step 4 was not - pm2 requires the &lt;code&gt;HOMEPATH&lt;/code&gt; to be set, which is not the case for SYSTEM account. For a regular user,
it&#39;s set to &lt;code&gt;c:&#92;users&#92;&amp;lt;user&amp;gt;&lt;/code&gt;. So I have to set it properly in the batch file that starts the
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="nodejs" scheme="http://kflu.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Data Analysis With Excel Pivot Table</title>
    <link href="http://kflu.github.io/2016/03/06/2016-03-06-Data-Analysis-With-Excel-Pivot-Table/"/>
    <id>http://kflu.github.io/2016/03/06/2016-03-06-Data-Analysis-With-Excel-Pivot-Table/</id>
    <published>2016-03-06T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.610Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;In today&#39;s cloud computing industry, data is essential to understand your
business, your customer and your system. In my experience, it usually boils
down to analyzing a key performance indicator (KPI) in terms of a set of
aspects. For example, I might be interested in the number of activities
performed by a user, and I might want to know how that is correlated with the
user&#39;s gender, region s/he lives in, and the client used.&lt;/p&gt;
&lt;p&gt;There are many ways I can use that data. I might be interested in comparing the
KPI by user gender first, then by the client types, or by the regions first,
then by the genders, etc. This could all be done writing scripts. But Excel
PivotTable can be handy in such scenarios.&lt;/p&gt;
&lt;p&gt;Suppose &lt;a href=&quot;https://github.com/kflu/kflu.github.io/files/160868/stats.txt&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this is my data
source&lt;/a&gt;. And
this can be the result if it&#39;s drilled down by Gender, Region, and finally
Client type:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;cca0312a-e3e9-11e5-8929-6f99035c9ff4.png&quot; alt=&quot;gener-region-client&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you need a different order of drill down, or different aggregation function
(e.g., averaging instead of summing), you can do so by adjusting the pivot
table options:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;29356eb4-e3ea-11e5-9d59-2f519279bb73.png&quot; alt=&quot;pivot table options&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;6a3b0b1e-e3e8-11e5-8ff1-98a87e14db9b.gif&quot;&gt;This screencast&lt;/a&gt; illustrates the use of PivotTable to analyze it.&lt;/p&gt;
&lt;p&gt;It is also important to note that, the &amp;quot;source data&amp;quot; that I used here is
already a digest of raw data from the enormous amount of log files from our big
data system. The log files have many columns than just the few &amp;quot;aspects&amp;quot; that I
mentioned earlier. It is very important to understand and plan ahead the
several aspects you will be interested in analyzing, so you can use big data
systems like map-reduce to cook down them into the digest. In a summary, an
end-to-end workflow of analyzing big data is usually like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;d50cb834-e3ed-11e5-8657-8ba115cf7290.png&quot; alt=&quot;data work
        
      
    
    </summary>
    
    
      <category term="datascience" scheme="http://kflu.github.io/tags/datascience/"/>
    
  </entry>
  
  <entry>
    <title>Portable Node.Js Installation</title>
    <link href="http://kflu.github.io/2015/12/07/2015-12-07-Portable-NodeJs/"/>
    <id>http://kflu.github.io/2015/12/07/2015-12-07-Portable-NodeJs/</id>
    <published>2015-12-07T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.610Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;I&#39;ve been looking for a way to deploy Node.Js apps onto machines that doesn&#39;t have the Node.Js runtime installed, more particularly, on Windows machines. I&#39;ve been looked into various tools to &amp;quot;package&amp;quot; the app, the runtime, and all its dependencies into a single executable. None of those tools work properly. Luckily, it is much easier than I thought to setup a portable Node.Js environment, e.g. all through files copies and without registry change. &lt;a href=&quot;https://github.com/nodejs/node-v0.x-archive/issues/3978&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;This is the original discussion inspired me&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the runtime, all you need is a single executable &lt;code&gt;node.exe&lt;/code&gt;, or &lt;code&gt;node.lib&lt;/code&gt; if this is to be linked to an application. The latest runtime build is available at http://nodejs.org/dist/latest. If you need &lt;code&gt;npm&lt;/code&gt;, download it from http://nodejs.org/dist/npm/ and unzip it to where &lt;code&gt;node.exe&lt;/code&gt; is. Now your portable node installation will look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;node
|- node.exe
|- npm.cmd
`- node_modules&#92;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can use node and npm from anywhere on the system:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;path_to_node&amp;gt;&#92;npm init
&amp;lt;path_to_node&amp;gt;&#92;npm install express
&amp;lt;path_to_node&amp;gt;&#92;node &amp;lt;your_script.js&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Armed with the portability of &lt;code&gt;Node.Js&lt;/code&gt; runtime, deploying apps to systems without runtime is really straightforward:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepare a portable &lt;code&gt;Node.Js&lt;/code&gt; runtime on the dev machine&lt;/li&gt;
&lt;li&gt;Install all dependencies using &lt;code&gt;npm&lt;/code&gt; locally&lt;/li&gt;
&lt;li&gt;Develop the application in this portable runtime locally&lt;/li&gt;
&lt;li&gt;Zip the portable runtime and deploy
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
      <category term="nodejs" scheme="http://kflu.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Using Vagrant on Windows</title>
    <link href="http://kflu.github.io/2015/11/18/2015-11-18-Using-Vagrant-On-Windows/"/>
    <id>http://kflu.github.io/2015/11/18/2015-11-18-Using-Vagrant-On-Windows/</id>
    <published>2015-11-18T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.609Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Vagrant is a virtualization technology for creating development environments. It is based on virtual machine technology and can be used with multiple VM providers. Not surprisingly, for a technology rised up from Linux ecosystem, even if it claims to be cross-platform, setting it up on Windows won&#39;t be easy. This article documents the steps to use Vagrant on Windows, the issues found, and the way to address them.&lt;/p&gt;
&lt;p&gt;Before started, make sure Hyper-V is enabled on the machine. This can be done via &amp;quot;Add/Remove features&amp;quot; dialog in Control Panel. Don&#39;t forget to enable the Hyper-V PowerShell tools - Vagrant needs it to work against the Hyper-V provider. Why using Hyper-V rather than VirtualBox, etc.? Hyper-V comes standard with all Windows versions after 8.1. It might be the most feature rich and efficient Virtual Machine technology on Windows - it powers Windows Azure!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;f1cf17c2-8e12-11e5-8b8a-60d8a1061ccd.png&quot; alt=&quot;feature hyper-v&quot;&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;getting started guide&lt;/strong&gt; is &lt;a href=&quot;https://docs.vagrantup.com/v2/getting-started/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. Use &lt;code&gt;vagrant init &amp;lt;boxname&amp;gt;&lt;/code&gt; to initialize one. But not all &amp;quot;boxes&amp;quot; supports all providers. The default one in the getting started doc &lt;code&gt;hashicorp/precise32&lt;/code&gt;, for example, does not support hyper-v. But all the boxes can be explored &lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;. And it doesn&#39;t take long to realize that &lt;a href=&quot;https://atlas.hashicorp.com/hashicorp/boxes/precise64&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;hashicorp/precise64&lt;/code&gt;&lt;/a&gt; supports hyper-v. Once initialized, use &lt;code&gt;valgrant up&lt;/code&gt; to download and set up the virtual machine.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;valgrant init hashicorp/precise64
valgrant up --provider hyperv
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once done, use &lt;code&gt;valgrant ssh&lt;/code&gt; to log in to it. It uses &lt;code&gt;ssh&lt;/code&gt; to log in. So make sure &lt;code&gt;ssh&lt;/code&gt; is on &lt;code&gt;PATH&lt;/code&gt;. If &lt;code&gt;git&lt;/code&gt; is installed, it usually comes with a set of unix commands including &lt;code&gt;ssh&lt;/code&gt;. So to bring &lt;code&gt;ssh&lt;/code&gt; onto &lt;code&gt;PATH&lt;/code&gt; in PowerShell:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS&amp;gt; $env:path += &amp;quot;;C:&#92;Program Files&#92;Git&#92;bin&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In &lt;code&gt;cmd.exe&lt;/code&gt; use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SET PATH=%PATH%;C:&#92;Program Files&#92;Git&#92;bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With that done, you can log in and (finally!) be greeted with the Linux command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS&amp;gt; vagrant ssh
Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.11.0-15-generic x86_64)

 * Documentation:  https://help.ubuntu.com/
Last login: Thu Mar  6 09:02:28 2014
vagrant@precise64:~$
vagrant@precise64:~$ uname -a
Linux precise64 3.11.0-15-generic #25~precise1-Ubuntu SMP Thu Jan 30 17:39:31 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#References&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.vagrantup.com/v2/getting-started/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vagrant getting started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://atlas.hashicorp.com/boxes/search&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Explorer Valgrant
        
      
    
    </summary>
    
    
      <category term="unix" scheme="http://kflu.github.io/tags/unix/"/>
    
  </entry>
  
  <entry>
    <title>PsExec to salvage a remote PC that can&#39;t connect to</title>
    <link href="http://kflu.github.io/2015/11/18/2015-11-18-PsExec-to-salvage-a-remote-pc-that-cant-connect-to/"/>
    <id>http://kflu.github.io/2015/11/18/2015-11-18-PsExec-to-salvage-a-remote-pc-that-cant-connect-to/</id>
    <published>2015-11-18T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.609Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;My work PC is a VM that is only accessible through remote desktop. Today after rebooting it, it can&#39;t be connected via remote desktop again. The remote desktop connection diaglog flashed with the usual &amp;quot;setting up connection&amp;quot; messages and quitted silently. I can&#39;t connect through hyper-V manager either. I guessed that some process is in a bad state and needed to be restarted. To do this, I&#39;ll need to log on remotely to kill the process. So I connected via &lt;code&gt;PsExec&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PsExec -h -u &amp;lt;domain&#92;user&amp;gt; &#92;&#92;&amp;lt;remote_machine&amp;gt; cmd.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;-h&lt;/code&gt; is for elevated access. Here&#39;s what it looked like once logged on:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PsExec v2.11 - Execute processes remotely
Copyright (C) 2001-2014 Mark Russinovich
Sysinternals - www.sysinternals.com

Password:

Microsoft Windows [Version 10.0.10240]
(c) 2015 Microsoft Corporation. All rights reserved.

C:&#92;WINDOWS&#92;system32&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I killed the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/aa969540(v=vs.85).aspx&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;desktop window manager&lt;/a&gt; with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;taskkill /im dwm.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;PsExec&lt;/code&gt; connection was lost (I guess &lt;code&gt;dwm.exe&lt;/code&gt; is too important to be killed). And after a while, remote desktop worked again. I guess &lt;code&gt;dwm.exe&lt;/code&gt; was restarted
        
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How to build SQLite on Windows</title>
    <link href="http://kflu.github.io/2015/11/04/2015-11-04-How-to-build-sqlite-on-Windows/"/>
    <id>http://kflu.github.io/2015/11/04/2015-11-04-How-to-build-sqlite-on-Windows/</id>
    <published>2015-11-04T08:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.609Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;The official compiling document is &lt;a href=&quot;https://www.sqlite.org/howtocompile.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;here&lt;/a&gt;.  You&#39;ll need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSVC compiler (&lt;code&gt;cl.exe&lt;/code&gt;) and &lt;code&gt;nmake&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TCL 8.5 (make sure &lt;code&gt;tclsh85&lt;/code&gt; is on PATH)&lt;/li&gt;
&lt;li&gt;Some build utilities that&#39;re common on Linux, like &lt;code&gt;gawk&lt;/code&gt;. On Windows use
&lt;a href=&quot;https://github.com/bmatzelle/gow&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Gow&lt;/a&gt;. Add gow/bin to &lt;code&gt;PATH&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a personal preference, I do not wish to install programs to pollute &lt;code&gt;PATH&lt;/code&gt;.
So before compiling I need to make sure the necessary tools are on the &lt;code&gt;PATH&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set PATH=%PATH%;c:&#92;gow&#92;bin;c:&#92;tcl&#92;bin
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SQLIte source comes in two flavors. The simpliest to compile is the
&amp;quot;&lt;a href=&quot;https://www.sqlite.org/amalgamation.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;amalgamation&lt;/a&gt;&amp;quot; source that&#39;s a preprocessed huge &lt;code&gt;sqlite3.c&lt;/code&gt;.
To compile this file, simply do:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cl shell.c sqlite3.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It builds the interactive shell &lt;code&gt;shell.exe&lt;/code&gt;. This approach doesn&#39;t require
&lt;code&gt;tcl&lt;/code&gt; or &lt;code&gt;gow&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The other flavor is the raw source which contains 1000+ files. To build it, you
first build the the amalgamation file, then follow the steps for amalgamation
source.&lt;/p&gt;
&lt;p&gt;Don&#39;t use any source that&#39;s from a git mirrow like &lt;a href=&quot;https://github.com/mackyle/sqlite&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;this one&lt;/a&gt;. When
not properly mirrored, the source doesn&#39;t have &lt;code&gt;manifest.uuid&lt;/code&gt;, which is
critical to compilation. So make sure to use the official repository, or just
download the source from the offical website.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nmake /f Makefile.msc sqlite3.c
cl shell.c sqlite3.c
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compiling the shell requires some generated headers like &lt;code&gt;parse.h&lt;/code&gt;. If there is
error during &lt;code&gt;nmake&lt;/code&gt;, make sure &lt;code&gt;parse.h&lt;/code&gt; is correctly generated and is
non-empty. Otherwise do&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lemon.exe parse.y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to re-generate &lt;code&gt;parse.h&lt;/code&gt;. Note that &lt;code&gt;lemon.exe&lt;/code&gt; is itself built from &lt;code&gt;lemon.c&lt;/code&gt;
during the build process.&lt;/p&gt;
&lt;p&gt;It is also possible to build &lt;code&gt;sqlite3.dll&lt;/code&gt; to be linked by applications:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nmake /f Makefile.msc
        
      
    
    </summary>
    
    
      <category term="programming" scheme="http://kflu.github.io/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>Enumerable and Disposable</title>
    <link href="http://kflu.github.io/2015/10/02/2015-10-02-Enumerable-and-Disposable/"/>
    <id>http://kflu.github.io/2015/10/02/2015-10-02-Enumerable-and-Disposable/</id>
    <published>2015-10-02T07:00:00.000Z</published>
    <updated>2024-06-20T04:41:55.609Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;Enumerables are deferred executions. This can be problematic when used with Disposables as the latter are tend to be disposed prematurely. The below example shows the difference. &lt;code&gt;ildasm&lt;/code&gt; shows that the compiler generates a class that implements &lt;code&gt;IEnumerable&amp;lt;int&amp;gt;&lt;/code&gt; for &lt;code&gt;Foo2&lt;/code&gt; behind the scene, and returns an instance of it for &lt;code&gt;Foo2&lt;/code&gt;. Because of that, the &lt;code&gt;using&lt;/code&gt; is embedded into that instance so the constructing and disposal of &lt;code&gt;Disposable&lt;/code&gt; is carried on by the deferred executed implementation. On the contrary, &lt;code&gt;Foo&lt;/code&gt; just returns the source enumerable as a pass through, at the time it&#39;s executed, the disposal already happened. This causes the problem that if the returned enumerable depends on the disposable, at the time the enumerable is extracted from, the disposable is in the disposed state.&lt;/p&gt;
&lt;figure class=&quot;highlight csharp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Main&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;string&lt;/span&gt;[] args&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;[] source = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;[] &amp;#123; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Using Foo...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Outputs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Disposed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;source&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        Console.&lt;span class=&quot;title&quot;&gt;WriteLine&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Using Foo2...&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Outputs:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Disposed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Foo2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;source&lt;/span&gt;))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;        Console.&lt;span class=&quot;title&quot;&gt;WriteLine&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IEnumerable&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;Foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;IEnumerable&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; source&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; disposable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Disposable())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; source;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; IEnumerable&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; &lt;span class=&quot;title&quot;&gt;Foo2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;IEnumerable&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; source&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; disposable = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Disposable())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;foreach&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; source)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Disposable&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;IDisposable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dispose&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Console.WriteLine(&lt;span class=&quot;string&quot;&gt;&quot;Disposed&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span
        
      
    
    </summary>
    
    
      <category term="c#" scheme="http://kflu.github.io/tags/c/"/>
    
  </entry>
  
</feed>
